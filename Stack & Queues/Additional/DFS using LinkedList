import java.util.LinkedList;

class Graph {
    private int vertices; // number of vertices
    private LinkedList<Integer>[] adjacencyList; // adjacency list representation of the graph

    public Graph(int v) {
        vertices = v;
        adjacencyList = new LinkedList[v];
        for (int i = 0; i < v; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
    }

    public void DFS(int startVertex) {
        boolean[] visited = new boolean[vertices]; // track visited vertices

        // Call the recursive helper function to perform DFS
        DFSHelper(startVertex, visited);
    }

    private void DFSHelper(int vertex, boolean[] visited) {
        visited[vertex] = true;
        System.out.print(vertex + " ");

        LinkedList<Integer> neighbors = adjacencyList[vertex];
        for (int neighbor : neighbors) {
            if (!visited[neighbor]) {
                DFSHelper(neighbor, visited);
            }
        }
    }
}

class Main {
    public static void main(String[] args) {
        // Create a graph
        int vertices = 6;
        Graph graph = new Graph(vertices);

        // Add edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        System.out.println("DFS traversal starting from vertex 0:");
        graph.DFS(0);
    }
}

==========================================
Certainly! Here's an example of a Depth-First Search (DFS) implementation using a LinkedList in Java:

```java
import java.util.LinkedList;

class Graph {
    private int vertices; // number of vertices
    private LinkedList<Integer>[] adjacencyList; // adjacency list representation of the graph

    public Graph(int v) {
        vertices = v;
        adjacencyList = new LinkedList[v];
        for (int i = 0; i < v; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
    }

    public void DFS(int startVertex) {
        boolean[] visited = new boolean[vertices]; // track visited vertices

        // Call the recursive helper function to perform DFS
        DFSHelper(startVertex, visited);
    }

    private void DFSHelper(int vertex, boolean[] visited) {
        visited[vertex] = true;
        System.out.print(vertex + " ");

        LinkedList<Integer> neighbors = adjacencyList[vertex];
        for (int neighbor : neighbors) {
            if (!visited[neighbor]) {
                DFSHelper(neighbor, visited);
            }
        }
    }
}

class Main {
    public static void main(String[] args) {
        // Create a graph
        int vertices = 6;
        Graph graph = new Graph(vertices);

        // Add edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        System.out.println("DFS traversal starting from vertex 0:");
        graph.DFS(0);
    }
}
```

This code demonstrates the DFS algorithm using a graph represented as an adjacency list. The `Graph` class maintains an array of LinkedLists to store the adjacency list.

The `addEdge` method adds an edge between two vertices by appending the destination vertex to the list of the source vertex.

The `DFS` method performs the depth-first search starting from a given start vertex. It initializes a boolean array `visited` to keep track of visited vertices and then calls a recursive helper function `DFSHelper` to perform the actual DFS traversal.

The `DFSHelper` method takes a vertex and the `visited` array as parameters. It marks the current vertex as visited, prints its value, and then recursively calls itself for each unvisited neighbor of the current vertex.

In the `main` method, a graph is created, and edges are added between vertices. Then, the DFS traversal is performed starting from vertex 0. The result is printed, which shows the order in which the vertices are visited during the DFS traversal.
