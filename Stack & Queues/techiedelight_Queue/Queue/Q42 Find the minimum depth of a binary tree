Find the minimum depth of a binary tree
Google Translate Icon
Given a binary tree, find its minimum depth. The minimum depth is the total number of nodes along the shortest path from the root node down to the nearest leaf node.

For example, the minimum depth of the following binary tree is 3. The shortest path is 1 —> 3 —> 6.

Binary Tree – Minimum Depth

Practice This Problem

The idea is to traverse the binary tree in a bottom-up manner using postorder traversal and calculate the minimum depth of left and right subtree for each encountered node. The minimum depth of the subtree rooted at any node is one more than the minimum depth of its left and right subtree. If either left or right subtree does not exist for a node, consider the minimum depth returned by the other subtree.

The algorithm can be implemented as follows in C++, Java, and Python:


// Data structure to store a binary tree node
class Node
{
    int data;
    Node left, right;
 
    Node(int data)
    {
        this.data = data;
        this.left = this.right = null;
    }
}
 
class Main
{
    // Recursive function to find the minimum depth of a path starting
    // from the given node in a binary tree
    public static int findMinDepth(Node root)
    {
        // base case
        if (root == null) {
            return 0;
        }
 
        // find the minimum depth of the left subtree
        int l = findMinDepth(root.left);
 
        // find the minimum depth of the right subtree
        int r = findMinDepth(root.right);
 
        // if the left child does not exist, consider the depth
        // returned by the right subtree
        if (root.left == null) {
            return 1 + r;
        }
 
        // if the right child does not exist, consider the depth
        // returned by the left subtree
        if (root.right == null) {
            return 1 + l;
        }
 
        // otherwise, choose the minimum depth returned by the
        // left and right subtree
        return Integer.min(l, r) + 1;
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.right = new Node(8);
        root.left.right.right = new Node(9);
        root.right.right.left = new Node(10);
        root.right.right.left = new Node(11);
        root.left.left.right.right = new Node(12);
 
        System.out.println("The minimum depth is " + findMinDepth(root));
    }
}
Download  Run Code

Output:

The minimum depth is 3

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The auxiliary space required by the program is O(h) for the call stack, where h is the height of the tree.

 
The above recursive solution is far from optimal as we might end up traversing the whole tree to find a leaf closest to the root node. The idea is to traverse the tree using BFS instead of DFS. Then the procedure can be terminated upon encountering the first leaf node closest to the root.

The standard algorithm for performing BFS on trees is level order traversal. This is demonstrated below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// Data structure to store a binary tree node
class Node
{
    int data;
    Node left, right;
 
    Node(int data)
    {
        this.data = data;
        this.left = this.right = null;
    }
}
 
// Queue node for storing a pointer to a tree node and its current depth
class QueueNode
{
    Node node;
    int depth;
 
    public QueueNode(Node node, int depth)
    {
        this.node = node;
        this.depth = depth;
    }
}
 
class Main
{
    // Returns true if the given tree node is a leaf, false otherwise
    public static boolean isLeaf(Node node) {
        return node.left == null && node.right == null;
    }
 
    // Iterative function to find the minimum depth of a path starting
    // from the given node in a binary tree
    public static int findMinDepth(Node root)
    {
        // base case
        if (root == null) {
            return 0;
        }
 
        // create an empty queue and push the root node with a depth of 1
        Queue<QueueNode> q = new ArrayDeque<>();
        q.add(new QueueNode(root, 1));
 
        // run till queue is empty
        while (!q.isEmpty())
        {
            // dequeue front node
            Node node = q.peek().node;
            int depth = q.peek().depth;
 
            q.poll();
 
            // if the popped node is a leaf node, return its depth
            if (isLeaf(node)) {
                return depth;
            }
 
            // enqueue left child of the popped node with +1 depth
            if (node.left != null) {
                q.add(new QueueNode(node.left, depth + 1));
            }
 
            // enqueue right child of the popped node with +1 depth
            if (node.right != null) {
                q.add(new QueueNode(node.right, depth + 1));
            }
        }
        return 0;
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.right = new Node(8);
        root.left.right.right = new Node(9);
        root.right.right.left = new Node(10);
        root.right.right.left = new Node(11);
        root.left.left.right.right = new Node(12);
 
        System.out.println("The minimum depth is " + findMinDepth(root));
    }
}
Download  Run Code

Output:

The minimum depth is 3

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The extra space used by the program is O(n) for the queue data structure.
