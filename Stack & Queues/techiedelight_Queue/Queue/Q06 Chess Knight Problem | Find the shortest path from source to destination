Chess Knight Problem | Find the shortest path from source to destination
Google Translate Icon
Given a chessboard, find the shortest distance (minimum number of steps) taken by a knight to reach a given destination from a given source.

For example,

Input:
 
N = 8 (8 × 8 board)
Source = (7, 0)
Destination = (0, 7)
 
Output: Minimum number of steps required is 6
The knight’s movement is illustrated in the following figure:

Chess Knight Problem
 

Practice This Problem

 
The idea is to use Breadth–first search (BFS) as it is the shortest path problem. Following is the complete algorithm:

Create an empty queue and enqueue the source cell having a distance of 0 from the source (itself).
Loop till queue is empty:
Dequeue next unvisited node.
If the popped node is the destination node, return its distance.
Otherwise, we mark the current node as visited. For each of eight possible movements for a knight, enqueue each valid movement with +1 distance (minimum distance of a given node from the source is one more than the minimum distance of parent from source).
 
A knight can move in eight possible directions from a given cell, as illustrated in the following figure:

 
Knight Movements

 
We can find all the possible locations the knight can move to from the given location by using the array that stores the relative position of knight movement from any location. For example, if the current location is (x, y), we can move to (x + row[k], y + col[k]) for 0 <= k <= 7 using the following array:

row[] = [ 2, 2, -2, -2, 1, 1, -1, -1 ]
col[] = [ -1, 1, 1, -1, 2, -2, 2, -2 ]
So, from position (x, y) knight’s can move to:

(x + 2, y – 1)
(x + 2, y + 1)
(x – 2, y + 1)
(x – 2, y – 1)
(x + 1, y + 2)
(x + 1, y – 2)
(x – 1, y + 2)
(x – 1, y – 2)
Note that in BFS, all cells having the shortest path as 1 are visited first, followed by their adjacent cells having the shortest path as 1 + 1 = 2 and so on… so if we reach any node in BFS, its shortest path = shortest path of parent + 1. So, the destination cell’s first occurrence gives us the result, and we can stop our search there. The shortest path cannot exist from some other cell for which we haven’t reached the given node yet. If any such path were possible, we would have already explored it.

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.*;
 
// A queue node used in BFS
class Node
{
    // (x, y) represents chessboard coordinates
    // `dist` represents its minimum distance from the source
    int x, y, dist;
 
    public Node(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
 
    public Node(int x, int y, int dist)
    {
        this.x = x;
        this.y = y;
        this.dist = dist;
    }
 
    // As we are using the class object as a key in a `HashMap`,
    // we need to implement `hashCode()` and `equals()`
 
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Node node = (Node) o;
        return x == node.x &&
                y == node.y &&
                dist == node.dist;
    }
 
    @Override
    public int hashCode() {
        return Objects.hash(x, y, dist);
    }
}
 
class Main
{
    // Below arrays detail all eight possible movements for a knight
    private static int[] row = { 2, 2, -2, -2, 1, 1, -1, -1 };
    private static int[] col = { -1, 1, 1, -1, 2, -2, 2, -2 };
 
    // Check if (x, y) is valid chessboard coordinates.
    // Note that a knight cannot go out of the chessboard
    private static boolean isValid(int x, int y, int N) {
        return (x >= 0 && x < N) && (y >= 0 && y < N);
    }
 
    // Find the minimum number of steps taken by the knight
    // from the source to reach the destination using BFS
    public static int findShortestDistance(Node src, Node dest, int N)
    {
        // set to check if the matrix cell is visited before or not
        Set<Node> visited = new HashSet<>();
 
        // create a queue and enqueue the first node
        Queue<Node> q = new ArrayDeque<>();
        q.add(src);
 
        // loop till queue is empty
        while (!q.isEmpty())
        {
            // dequeue front node and process it
            Node node = q.poll();
 
            int x = node.x;
            int y = node.y;
            int dist = node.dist;
 
            // if the destination is reached, return distance
            if (x == dest.x && y == dest.y) {
                return dist;
            }
 
            // skip if the location is visited before
            if (!visited.contains(node))
            {
                // mark the current node as visited
                visited.add(node);
 
                // check for all eight possible movements for a knight
                // and enqueue each valid movement
                for (int i = 0; i < row.length; i++)
                {
                    // get the knight's valid position from the current position on
                    // the chessboard and enqueue it with +1 distance
                    int x1 = x + row[i];
                    int y1 = y + col[i];
 
                    if (isValid(x1, y1, N)) {
                        q.add(new Node(x1, y1, dist + 1));
                    }
                }
            }
        }
 
        // return infinity if the path is not possible
        return Integer.MAX_VALUE;
    }
 
    public static void main(String[] args)
    {
        // N x N matrix
        int N = 8;
 
        // source coordinates
        Node src = new Node(0, 7);
 
        // destination coordinates
        Node dest = new Node(7, 0);
 
        System.out.println("The minimum number of steps required is " +
                findShortestDistance(src, dest, N));
    }
}
Download  Run Code

Output:

The minimum number of steps required is 6

The time complexity of the proposed solution is O(M × N) and requires O(M × N) extra space, where M and N are dimensions of the matrix.

 
Exercise: Extend the solution to print the paths as well.

