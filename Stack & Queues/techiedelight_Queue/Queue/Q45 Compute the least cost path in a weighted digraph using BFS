Compute the least cost path in a weighted digraph using BFS
Google Translate Icon
Consider a directed graph where the weight of its edges can be one of x, 2x, or 3x (x is a positive integer), efficiently compute the least-cost path from source to destination.

For example, consider the following graph:

 
Least Cost Path

If the source is 1 and destination is 3, the least-cost path from source to destination is [1, 4, 3] having cost 2.

If the source is 0 and destination is 2, the least-cost path from source to destination is [0, 4, 2] having cost 3.

Practice This Problem

We know that Breadth–first search (BFS) can be used to find the shortest path in an unweighted graph or a weighted graph having the same cost of all its edges. BFS runs in O(E + V) time, where E is the total number of the edges and V is the total number of vertices in the graph. But if the edges in the graph are weighted with different costs, then the recommended algorithm is Dijkstra’s Algorithm, which takes O(E.log(V)) time.

Can we use BFS?

The idea is to modify the input graph so that all its edges have the same weight. For edges having weight 3x, split them into three edges of weight x each. Similarly, edges having weight 2x gets split into two edges of weight x each. Nothing needs to be done for edges already having weight x. Special care has to be taken while introducing new edges in the graph such that no new routes are introduced into the graph. To split an edge of weight 3x, create two new vertices in the graph instead of using existing vertices. Similarly, to split edge having weight 2x, create one new vertex. Let’s illustrate this with the help of a diagram.

Split edge (v, u) having weight 3x into three edges (v, v+n), (v+n, v+2N), and (v+2N, u) each having weight x.

Spilt edges into two

Split edge (v, u) having weight 2x into two edges (v, v+n) and (v+n, u) each having weight x.

Spilt edges into one

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.*;
 
// A class to store a graph edge
class Edge
{
    int source, dest, weight;
 
    public Edge(int source, int dest, int weight)
    {
        this.source = source;
        this.dest = dest;
        this.weight = weight;
    }
}
 
// A class to represent a graph object
class Graph
{
    // A list of lists to represent an adjacency list
    List<List<Integer>> adjList = null;
 
    // Constructor
    Graph(List<Edge> edges, int x, int n)
    {
        adjList = new ArrayList<>(3*n);
 
        for (int i = 0; i < 3*n; i++) {
            adjList.add(new ArrayList<>());
        }
 
        // add edges to the directed graph
        for (Edge edge: edges)
        {
            int v = edge.source;
            int u = edge.dest;
            int weight = edge.weight;
 
            // create two new vertices, `v+n` and `v+2×n`, if the edge's weight is `3x`
            // Also, split edge (v, u) into (v, v+n), (v+n, v+2N) and (v+2N, u),
            // each having weight `x`.
            if (weight == 3*x)
            {
                adjList.get(v).add(v + n);
                adjList.get(v + n).add(v + 2*n);
                adjList.get(v + 2*n).add(u);
            }
 
            // create one new vertex `v+n` if the weight of the edge is `2x`.
            // Also, split edge (v, u) into (v, v+n), (v+n, u) each having weight `x`
            else if (weight == 2*x)
            {
                adjList.get(v).add(v + n);
                adjList.get(v + n).add(u);
            }
 
            // no splitting is needed if the edge weight is `1x`
            else {
                adjList.get(v).add(u);
            }
        }
    }
}
 
class Main
{
    // Recursive function to print the path of a given vertex `v` from
    // the source vertex
    private static int printPath(int[] predecessor, int vertex, int cost, int n)
    {
        if (vertex >= 0)
        {
            cost = printPath(predecessor, predecessor[vertex], cost, n);
            cost++;
 
            // only consider the original nodes present in the graph
            if (vertex < n) {
                System.out.print(vertex + " ");
            }
        }
        return cost;
    }
 
    // Perform BFS on the graph starting from vertex source
    public static void findLeastPathCost(Graph graph, int source, int dest, int n)
    {
        // stores vertex is discovered in BFS traversal or not
        boolean[] discovered = new boolean[3*n];
 
        // mark the source vertex as discovered
        discovered[source] = true;
 
        // `predecessor[]` stores predecessor information. It is used
        // to trace a least-cost path from the destination back to the source.
        int[] predecessor = new int[3*n];
        Arrays.fill(predecessor, -1);
 
        // create a queue for doing BFS and enqueue source vertex
        Queue<Integer> q = new ArrayDeque<>();
        q.add(source);
 
        // loop till queue is empty
        while (!q.isEmpty())
        {
            // dequeue front node and print it
            int curr = q.poll();
 
            // if destination vertex is reached
            if (curr == dest)
            {
                System.out.print("The least-cost path between " + source
                        + " and " + dest + " is ");
                System.out.println("having cost " +
                        printPath(predecessor, dest, -1, n));
            }
 
            // do for every adjacent edge of the current vertex
            for (int v: graph.adjList.get(curr))
            {
                if (!discovered[v])
                {
                    // mark it as discovered and enqueue it
                    discovered[v] = true;
                    q.add(v);
 
                    // set `curr` as the predecessor of vertex `v`
                    predecessor[v] = curr;
                }
            }
        }
    }
 
    public static void main(String[] args)
    {
        int x = 1;
 
        // List of graph edges as per the above diagram
        List<Edge> edges = Arrays.asList(
                new Edge(0, 1, 3*x), new Edge(0, 4, 1*x), new Edge(1, 2, 1*x),
                new Edge(1, 3, 3*x), new Edge(1, 4, 1*x), new Edge(4, 2, 2*x),
                new Edge(4, 3, 1*x)
        );
 
        // total number of nodes in the graph
        int n = 5;
 
        // given the source and destination vertex
        int source = 0, dest = 2;
 
        // build a graph from the given edges
        Graph graph = new Graph(edges, x, n);
 
        // Perform BFS traversal from the given source
        findLeastPathCost(graph, source, dest, n);
    }
}
Download  Run Code

Output:

The least-cost path between 0 and 2 is 0 4 2 having cost 3
