Invert Binary Tree â€“ Iterative and Recursive Solution
Google Translate Icon
Given a binary tree, write an efficient algorithm to invert it.

For example,

Invert Binary Tree

Practice This Problem

Recursive Solution
This is one of the most famous interview questions and can be easily solved recursively. The idea is to traverse the tree in a preorder fashion, and for every node encountered, swap its left and right child before recursively inverting its left and right subtree. We can also traverse the tree in a postorder fashion.

The algorithm can be implemented as follows in C++, Java, and Python:


// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to perform preorder traversal on a given binary tree
    public static void preorder(Node root)
    {
        if (root == null) {
            return;
        }
 
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);
    }
 
    // Utility function to swap left subtree with right subtree
    public static void swap(Node root)
    {
        if (root == null) {
            return;
        }
 
        Node temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
 
    // Function to invert a given binary tree using preorder traversal
    public static void invertBinaryTree(Node root)
    {
        // base case: if the tree is empty
        if (root == null) {
            return;
        }
 
        // swap left subtree with right subtree
        swap(root);
 
        // invert left subtree
        invertBinaryTree(root.left);
 
        // invert right subtree
        invertBinaryTree(root.right);
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /   \
               /     \
              2       3
             / \     / \
            4   5   6   7
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        invertBinaryTree(root);
        preorder(root);
    }
}
Download  Run Code

Output:

1 3 7 6 2 5 4

The time complexity of the above recursive solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.

Iterative Solution
We can easily convert the above recursive solution into an iterative one using a queue or stack to store tree nodes.

1. Using Queue:
The code is almost similar to the level order traversal of a binary tree. This is demonstrated below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to perform preorder traversal on a given binary tree
    public static void preorder(Node root)
    {
        if (root == null) {
            return;
        }
 
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);
    }
 
    // Utility function to swap left subtree with right subtree
    public static void swap(Node root)
    {
        if (root == null) {
            return;
        }
 
        Node temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
 
    // Iterative function to invert a given binary tree using a queue
    public static void invertBinaryTree(Node root)
    {
        // base case: if the tree is empty
        if (root == null) {
            return;
        }
 
        // maintain a queue and push the root node
        Queue<Node> q = new ArrayDeque<>();
        q.add(root);
 
        // loop till queue is empty
        while (!q.isEmpty())
        {
            // dequeue front node
            Node curr = q.poll();
 
            // swap the left child with the right child
            swap(curr);
 
            // enqueue left child of the popped node
            if (curr.left != null) {
                q.add(curr.left);
            }
 
            // enqueue right child of the popped node
            if (curr.right != null) {
                q.add(curr.right);
            }
        }
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /   \
               /     \
              2       3
             / \     / \
            4   5   6   7
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        invertBinaryTree(root);
        preorder(root);
    }
}
Download  Run Code

Output:

1 3 7 6 2 5 4

2. Using Stack:
The code is almost similar to the iterative preorder traversal of a binary tree. This is demonstrated below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Deque;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to perform preorder traversal on a given binary tree
    public static void preorder(Node root)
    {
        if (root == null) {
            return;
        }
 
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);
    }
 
    // Utility function to swap left subtree with right subtree
    public static void swap(Node root)
    {
        if (root == null) {
            return;
        }
 
        Node temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
 
    // Iterative function to invert a given binary tree using stack
    public static void invertBinaryTree(Node root)
    {
        // base case: if the tree is empty
        if (root == null) {
            return;
        }
 
        // create an empty stack and push the root node
        Deque<Node> s = new ArrayDeque<>();
        s.add(root);
 
        // loop till stack is empty
        while (!s.isEmpty())
        {
            // pop the top node from the stack
            Node curr = s.pollLast();
 
            // swap the left child with the right child
            swap(curr);
 
            // enqueue right child of the popped node
            if (curr.right != null) {
                s.add(curr.right);
            }
 
            // push the left child of the popped node into the stack
            if (curr.left != null) {
                s.add(curr.left);
            }
        }
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /   \
               /     \
              2       3
             / \     / \
            4   5   6   7
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        invertBinaryTree(root);
        preorder(root);
    }
}
Download  Run Code

Output:

1 3 7 6 2 5 4

The time complexity of both above-discussed iterative methods is O(n), where n is the total number of nodes in the binary tree. The program requires O(n) extra space for storing nodes present in any level of the binary tree. The worst case happens for a full binary tree, in which the last level has n/2 nodes.

