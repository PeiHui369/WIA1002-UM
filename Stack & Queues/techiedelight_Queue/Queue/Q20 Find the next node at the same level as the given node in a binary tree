Find the next node at the same level as the given node in a binary tree
Google Translate Icon
Given a binary tree and a node in it, write an efficient algorithm to find its next node at the same level as the node.

For example, consider the following binary tree:

 
Find Next Node in Binary Tree

The next node of 2 is 3
The next node of 5 is 6
The next node of 7 is 8
The next node of 8 is null
Practice This Problem

A simple solution is to perform a level order traversal on the tree. The idea is to modify the level order traversal to maintain the level number of each node, and if the given node is found, we return its immediate right node, present at the same level.

The implementation can be seen below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to find the next node of a given node in the same level
    // in a given binary tree
    public static Node findRightNode(Node root, Node node)
    {
        // return null if a tree is empty
        if (root == null) {
            return null;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node front;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // calculate the total number of nodes at the current level
            int size = queue.size();
 
            // process every node of the current level and enqueue their
            // non-empty left and right child
            while (size-- > 0)
            {
                front = queue.poll();
 
                // if the desired node is found, return its next right node
                if (front == node)
                {
                    // if the next right node doesn't exist, return null
                    if (size == 0) {
                        return null;
                    }
 
                    return queue.peek();
                }
 
                if (front.left != null) {
                    queue.add(front.left);
                }
 
                if (front.right != null) {
                    queue.add(front.right);
                }
            }
        }
 
        return null;
    }
 
    public static void main(String[] args) {
        /* Construct the following tree
                  1
                /  \
               /    \
              2      3
             / \      \
            4   5      6
                      / \
                     7   8
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        Node right = findRightNode(root, root.left.right);
        if (right != null) {
            System.out.print("Right node is " + right.data);
        }
        else {
            System.out.print("Right node doesn't exist");
        }
    }
}
Download  Run Code

Output:

Right node is 6

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.
 

 
We can also solve this problem by using constant auxiliary space and linear time. The idea is to traverse the tree in a preorder fashion and search for the given node. Once the node is found, mark its level number. Then the first node encountered at the same level is the next right node.

Following is the implementation of the above approach in C++, Java, and Python:


import java.util.concurrent.atomic.AtomicInteger;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to find the next node for a given node in the same level in a
    // binary tree by using preorder traversal
    public static Node findRightNode(Node root, Node node, int level,
                                    AtomicInteger node_level)
    {
        // return null if a tree is empty
        if (root == null) {
            return null;
        }
 
        // if the desired node is found, set `node_level` to the current level
        if (root == node)
        {
            node_level.set(level);
            return null;
        }
 
        // if `node_level` is already set, then the current node is the next
        // right node
        else if (node_level.get() != 0 && level == node_level.get()) {
            return root;
        }
 
        // recur for the left subtree by increasing level by 1
        Node left = findRightNode(root.left, node, level + 1, node_level);
 
        // if the node is found in the left subtree, return it
        if (left != null) {
            return left;
        }
 
        // recur for the right subtree by increasing the level by 1
        return findRightNode(root.right, node, level + 1, node_level);
    }
 
    // Function to find the next node of a given node in the same level
    // in a given binary tree
    public static Node findRightNode(Node root, Node node)
    {
        AtomicInteger node_level = new AtomicInteger(0);
        return findRightNode(root, node, 1, node_level);
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /  \
               /    \
              2      3
             / \      \
            4   5      6
                      / \
                     7   8
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        Node right = findRightNode(root, root.left.right);
        if (right != null) {
            System.out.print("Right node is " + right.data);
        }
        else {
            System.out.print("Right node doesn't exist");
        }
    }
}
Download  Run Code

Output:

Right node is 6

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.
