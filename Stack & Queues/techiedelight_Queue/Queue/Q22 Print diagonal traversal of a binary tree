Print diagonal traversal of a binary tree
Google Translate Icon
Given a binary tree, print all nodes for each diagonal having negative slope (\). Assume that the left and right child of a node makes a 45–degree angle with the parent.

For example, consider the following binary tree having three diagonals. The diagonal’s traversal is:

1 3 6
2 5 8
4 7

Diagonal Traversal of Binary Tree

Practice This Problem

Recursive Version
We can easily solve this problem with the help of hashing. The idea is to create an empty map where each key in the map represents a diagonal in the binary tree, and its value maintains all nodes present in the diagonal. Then perform preorder traversal on the tree and update the map. For each node, recur for its left subtree by increasing the diagonal by one and recur for the right subtree with the same diagonal.

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to perform preorder traversal on the tree and
    // fill the map with diagonal elements
    public static void printDiagonal(Node node, int diagonal,
                                    Map<Integer, List<Integer>> map)
    {
        // base case: empty tree
        if (node == null) {
            return;
        }
 
        // insert the current node into the current diagonal
        map.putIfAbsent(diagonal, new ArrayList<>());
        map.get(diagonal).add(node.data);
 
        // recur for the left subtree by increasing diagonal by 1
        printDiagonal(node.left, diagonal + 1, map);
 
        // recur for the right subtree with the same diagonal
        printDiagonal(node.right, diagonal, map);
    }
 
    // Function to print the diagonal elements of a given binary tree
    public static void printDiagonal(Node root)
    {
        // create an empty multimap to store the diagonal element in every slope
        Map<Integer, List<Integer>> map = new HashMap<>();
 
        // perform preorder traversal on the tree and fill the map
        printDiagonal(root, 0, map);
 
        // traverse the map and print the diagonal elements
        for (int i = 0; i < map.size(); i++) {
            System.out.println(map.get(i));
        }
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /   \
               /     \
              2       3
             /      /  \
            /      /    \
           4      5      6
                 / \
                /   \
               7     8
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        printDiagonal(root);
    }
}
Download  Run Code

Output:

[1, 3, 6]
[2, 5, 8]
[4, 7]

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

Iterative Version
We can also use a queue to solve this problem. The idea is similar to level order traversal, but instead of storing nodes of a level, we enqueue nodes in a diagonal.

This approach is demonstrated below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Iterative function to print the diagonal elements of a given binary tree
    public static void diagonalPrint(Node root)
    {
        // create an empty queue
        Queue<Node> q = new ArrayDeque<>();
 
        // create a sentinel (dummy) node to denote the end of a diagonal
        Node sentinel = new Node(-1);
 
        // enqueue all nodes of the first diagonal in the binary tree
        while (root != null)
        {
            q.add(root);
            root = root.right;
        }
 
        // enqueue sentinel node at the end of each diagonal
        q.add(sentinel);
 
        // run till the only sentinel is left
        while (q.size() != 1)
        {
            // dequeue front node
            Node front = q.poll();
 
            if (front != sentinel)
            {
                // print the current node
                System.out.print(front.data + " ");
 
                // enqueue nodes of the next diagonal in the binary tree
                Node node = front.left;
                while (node != null)
                {
                    q.add(node);
                    node = node.right;
                }
            }
            else {
                // If the current diagonal end is reached, enqueue the sentinel node
                // and print an empty line
                q.add(sentinel);
                System.out.println();
            }
        }
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
               1
             /   \
            /     \
          2        3
         /        /  \
        /        /    \
       4        5      6
               / \
             /    \
            7      8
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        diagonalPrint(root);
    }
}
Download  Run Code

Output:

1 3 6
2 5 8
4 7

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

 
Exercise: Modify the solution to print diagonal elements for diagonals having positive slope /.
