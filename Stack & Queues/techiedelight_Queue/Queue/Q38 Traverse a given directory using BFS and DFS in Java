Traverse a given directory using BFS and DFS in Java
Google Translate Icon
This post will discuss how to traverse the given directory and list out all files present in it and all its sub-directories.

1. Using BFS (Breadth–First Search)
We can iteratively traverse the given directory, and print all files present within it and its sub-directories using Breadth–first search. Following is the complete algorithm:

Create an empty queue of File class and enqueue the root directory.
Loop till queue becomes empty (all files and directories present inside the root directory are processed)
Pop front File from the queue.
If the popped File is a directory, get the list of all files and directories present in it, add each directory to the queue and print every file.
The algorithm can be implemented as follows in Java:

import java.io.File;
import java.util.ArrayDeque;
import java.util.Queue;
 
class Main
{
    // Iterative function to traverse a given directory in Java using BFS
    public static void listFilesIteratively(File root)
    {
        // maintain a queue to store files and directories
        Queue<File> queue = new ArrayDeque<>();
 
        // add root directory to the queue
        queue.add(root);
 
        // loop till the queue is empty. i.e., all files and directories present
        // inside the root directory are processed
        while (!queue.isEmpty())
        {
            // get the next file/directory from the queue
            File current = queue.poll();
 
            // get the list of all files and directories in `current`
            File[] listOfFilesAndDirectory = current.listFiles();
 
            // `listFiles()` returns non-null array if `current` denotes a directory
            if (listOfFilesAndDirectory != null)
            {
                // iterate over the list of the files and directories in
                // the current directory
                for (File file: listOfFilesAndDirectory)
                {
                    // if the current file is a directory
                    if (file.isDirectory()) {
                        queue.add(file);
                    }
                    // otherwise, print it
                    else {
                        System.out.println(file);
                    }
                }
            }
        }
    }
 
    public static void main(String[] args)
    {
        // root directory
        String dir = "/var/www/html";
        File rootDir = new File(dir);
 
        listFilesIteratively(rootDir);
    }
}
Download

2. Using DFS (Depth–First Search)
We can also recursively traverse the given directory and print all files present within it and its sub-directories using Depth–first search. The idea is to start with the root directory, get the list of all files and directories present in it, recursively explore each directory, and print every file.

import java.io.File;
 
class Main
{
    // Recursive function to traverse a given directory in Java using DFS
    public static void listFilesRecursively(File root)
    {
        // get the list of all files and directories present in the `root`
        File[] listOfFilesAndDirectory = root.listFiles();
 
        // `listFiles()` returns non-null array if `root` denotes a directory
        if (listOfFilesAndDirectory != null)
        {
            for (File file : listOfFilesAndDirectory)
            {
                // if the file denotes a directory, recur for it
                if (file.isDirectory()) {
                    listFilesRecursively(file);
                }
                // otherwise, print it
                else {
                    System.out.println(file);
                }
            }
        }
    }
 
    public static void main(String args[])
    {
        // root directory
        String dir = "/var/www/html";
        File rootDir = new File(dir);
 
        // recursively print all files present in the root directory
        listFilesRecursively(rootDir);
    }
}
Download

 
Also see:

Traverse a directory and list all files in Java

List all files in a directory in Java using Guava and Apache Commons IO
