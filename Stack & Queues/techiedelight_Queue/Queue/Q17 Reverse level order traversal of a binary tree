Reverse level order traversal of a binary tree
Google Translate Icon
Given a binary tree, print its nodes level by level in reverse order, i.e., print all nodes present at the last level first, followed by nodes of the second last level, and so on… Print nodes at any level from left to right.

For example, the reverse level order traversal for the following tree is 4, 5, 6, 7, 2, 3, 1:

 
Level Order Traversal

Practice This Problem

A simple solution would be to print all nodes of level h first, followed by level h-1, until level 1, where h is the tree’s height. We can print all nodes present in a level by modifying the preorder traversal on the tree. The time complexity of this solution is O(n2), where n is the total number of nodes in the binary tree.

 
We can reduce the time complexity to O(n) by using extra space. Following is a pseudocode for a simple queue-based reverse level order traversal, which requires space proportional to the maximum number of nodes at a given depth. It can be as much as half of the total number of nodes.

levelorder(root)
 
q —> empty queue
s —> empty stack
q.enqueue(root)
while (not q.isEmpty())
  node —> q.dequeue()
  s.push(node)
  if (node.right <> null)
    q.enqueue(node.right)
  if (node.left <> null)
    q.enqueue(node.left)
 
while (not s.isEmpty())
  node —> s.pop()
  print(node)
The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Function to print reverse level order traversal of a given binary tree
    public static void reverseLevelOrderTraversal(Node root)
    {
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // create a stack to reverse level order nodes
        Deque<Integer> stack = new ArrayDeque<>();
 
        // to store the current node
        Node curr;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // process each node in the queue and enqueue their children
            curr = queue.poll();
 
            // push the current node into the stack
            stack.push(curr.key);
 
            // it is important to process the right node before the left node
            if (curr.right != null) {
                queue.add(curr.right);
            }
 
            if (curr.left != null) {
                queue.add(curr.left);
            }
        }
 
        // pop all nodes from the stack and print them
        while (!stack.isEmpty()) {
            System.out.print(stack.poll() + " ");
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(15);
        root.left = new Node(10);
        root.right = new Node(20);
        root.left.left = new Node(8);
        root.left.right = new Node(12);
        root.right.left = new Node(16);
        root.right.right = new Node(25);
 
        reverseLevelOrderTraversal(root);
    }
}
Download  Run Code

Output:

8 12 16 25 10 20 15

We can also solve this problem by using hashing. The idea is to traverse the tree in a preorder fashion and store every node and its level in a multimap using the level number as a key. Finally, print all nodes corresponding to every level starting from the last level. We can also traverse the tree in inorder or postorder fashion.

Following is the implementation in C++, Java, and Python based on the above idea:


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Utility function to add an element to the list corresponding to the given key
    // in `Map<Integer, List<Integer>>`.
    public static void insertIntoMultiMap(Map<Integer, List<Integer>> map,
                                        Integer key, Integer value) {
        map.putIfAbsent(key, new ArrayList<>());
        map.get(key).add(value);
    }
 
    // Traverse the tree in a preorder fashion and store nodes in a map
    // corresponding to their level
    public static void preorder(Node root, int level, Map<Integer, List<Integer>> map)
    {
        // base case: empty tree
        if (root == null) {
            return;
        }
 
        // insert the current node and its level into the map
        insertIntoMultiMap(map, level, root.key);
 
        // recur for the left and right subtree by increasing the level by 1
        preorder(root.left, level + 1, map);
        preorder(root.right, level + 1, map);
    }
 
    // Recursive function to perform reverse level order traversal on a binary tree
    public static void levelOrderTraversal(Node root)
    {
        // create an empty map to store nodes between given levels
        Map<Integer, List<Integer>> map = new HashMap<>();
 
        // traverse the tree and insert its nodes into the map
        // corresponding to their level
        preorder(root, 1, map);
 
        // iterate through the map in reverse order and
        // print all nodes present at every level
        for (int i = map.size(); i > 0; i--) {
            System.out.println("Level " + i + ": " + map.get(i));
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(15);
        root.left = new Node(10);
        root.right = new Node(20);
        root.left.left = new Node(8);
        root.left.right = new Node(12);
        root.right.left = new Node(16);
        root.right.right = new Node(25);
        root.right.right.right = new Node(30);
 
        levelOrderTraversal(root);
    }
}
Download  Run Code

Output:

Level 4: [30]
Level 3: [8, 12, 16, 25]
Level 2: [10, 20]
Level 1: [15]

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

 
Exercise: Modify the solution to print nodes of different levels in separate lines.

