Invert alternate levels of a perfect binary tree
Google Translate Icon
Write an efficient algorithm to invert alternate levels of a perfect binary tree.

For example, consider the following tree:

Perfect Binary Tree

We should convert it into the following tree:

Inverted Perfect Binary Tree

Practice This Problem

1. Using Level Order Traversal
The idea is to perform a level order traversal of the perfect binary tree and traverse its nodes level-by-level. Then for each odd level, push all nodes present in that level into a stack. Finally, at the end of each odd level, we put nodes present in the stack into their correct position. Following is the C++, Java, and Python program that demonstrates it:


import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Stack;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left, right;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to print level order traversal of a perfect binary tree
    public static void levelOrderTraversal(Node root)
    {
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node curr = null;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // process each node in the queue and enqueue their
            // non-empty left and right child
            curr = queue.poll();
 
            System.out.print(curr.data + " ");
 
            if (curr.left != null) {
                queue.add(curr.left);
            }
 
            if (curr.right != null) {
                queue.add(curr.right);
            }
        }
    }
 
    // Iterative function to invert alternate levels of a perfect binary tree
    // using level order traversal
    public static void invertBinaryTree(Node root)
    {
        // base case: if the tree is empty
        if (root == null) {
            return;
        }
 
        // maintain a queue and enqueue the root node
        Queue<Node> q = new ArrayDeque<>();
        q.add(root);
 
        // to store current level information
        boolean level = false;
 
        // maintain another queue to store nodes present at an odd level
        Queue<Node> level_nodes = new ArrayDeque<>();
 
        // maintain a stack to store node's data on an odd level
        Stack<Integer> level_data = new Stack<>();
 
        // loop till queue is empty
        while (!q.isEmpty())
        {
            // get the size of the current level
            int n = q.size();
 
            // process all nodes present at the current level
            while (n-- > 0)
            {
                // dequeue front node
                Node curr = q.poll();
 
                // if the level is odd
                if (level)
                {
                    // enqueue current node
                    level_nodes.add(curr);
 
                    // push the current node data into the stack
                    level_data.add(curr.data);
                }
 
                // if the current node is the last node of the level
                if (n == 0)
                {
                    // flip the level
                    level = !level;
 
                    // put elements present in the `level_data` into their correct
                    // position using `level_nodes`
                    while (!level_nodes.isEmpty())
                    {
                        Node front = level_nodes.poll();
                        front.data = level_data.pop();
                    }
                }
 
                // enqueue left child of the current node
                if (curr.left != null) {
                    q.add(curr.left);
                }
 
                // enqueue right child of the current node
                if (curr.right != null) {
                    q.add(curr.right);
                }
            }
        }
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                    1
                  /   \
                /       \
              2           3
            /   \       /   \
           4     5     6     7
          / \   / \   / \   / \
         8   9 10 11 12 13 14 15
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.left = new Node(8);
        root.left.left.right = new Node(9);
        root.left.right.left = new Node(10);
        root.left.right.right = new Node(11);
        root.right.left.left = new Node(12);
        root.right.left.right = new Node(13);
        root.right.right.left = new Node(14);
        root.right.right.right = new Node(15);
 
        invertBinaryTree(root);
        levelOrderTraversal(root);
    }
}
Download  Run Code

Output:

1 3 2 4 5 6 7 15 14 13 12 11 10 9 8

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(n) extra space for storing nodes present at odd levels of a binary tree. The stack is preferred over a list for storing nodes since it is a LIFO data structure, and we donâ€™t need to reverse it before assigning value to nodes.

2. Using Inorder Traversal
The idea remains similar to the previous approach, except here we recursively traverse the tree in an inorder fashion, and store nodes present all odd levels in a stack, and replace them later by doing another inorder traversal. This approach is demonstrated below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Stack;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left, right;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to print level order traversal of a given binary tree
    public static void levelOrderTraversal(Node root)
    {
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node curr = null;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // process each node in the queue and enqueue their
            // non-empty left and right child
            curr = queue.poll();
 
            System.out.print(curr.data + " ");
 
            if (curr.left != null) {
                queue.add(curr.left);
            }
 
            if (curr.right != null) {
                queue.add(curr.right);
            }
        }
    }
 
    // Recursive function to store nodes of odd levels in a stack using
    // inorder traversal
    public static void pushOddLevelNodes(Node root, Stack<Integer> s, boolean level)
    {
        // base case
        if (root == null) {
            return;
        }
 
        // store nodes in the left subtree
        pushOddLevelNodes(root.left, s, !level);
 
        // push the current node's data into the stack only if the level is odd
        if (level) {
            s.add(root.data);
        }
 
        // store nodes in the right subtree
        pushOddLevelNodes(root.right, s, !level);
    }
 
    // Recursive function to invert alternate levels of a perfect binary tree
    // using inorder traversal
    public static void invertBinaryTree(Node root, Stack<Integer> s, boolean level)
    {
        // base case
        if (root == null) {
            return;
        }
 
        // invert nodes in the left subtree
        invertBinaryTree(root.left, s, !level);
 
        // if the level is odd
        if (level)
        {
            // pop an element from the stack and assign it to the current node
            root.data = s.pop();
        }
 
        // invert nodes in the right subtree
        invertBinaryTree(root.right, s, !level);
    }
 
    // Invert alternate levels of a perfect binary tree
    public static void invertBinaryTree(Node root)
    {
        // create a stack and push nodes of odd levels into it
        Stack<Integer> s = new Stack<>();
        pushOddLevelNodes(root, s, false);
 
        // put nodes of odd levels at their correct position using stack
        invertBinaryTree(root, s, false);
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                    1
                  /   \
                /       \
              2           3
            /   \       /   \
           4     5     6     7
          / \   / \   / \   / \
         8   9 10 11 12 13 14 15
 
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.left = new Node(8);
        root.left.left.right = new Node(9);
        root.left.right.left = new Node(10);
        root.left.right.right = new Node(11);
        root.right.left.left = new Node(12);
        root.right.left.right = new Node(13);
        root.right.right.left = new Node(14);
        root.right.right.right = new Node(15);
 
        invertBinaryTree(root);
        levelOrderTraversal(root);
    }
}
Download  Run Code

Output:

1 3 2 4 5 6 7 15 14 13 12 11 10 9 8

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(n) extra space for storing nodes of odd levels.

 
We can replace stack with queue by doing reverse inorder traversal in the pushOddLevelNodes() function, i.e., call the right child before the left child. Following is the C++, Java, and Python program that demonstrates it:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left, right;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to print level order traversal of a given binary tree
    public static void levelOrderTraversal(Node root)
    {
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node curr = null;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // process each node in the queue and enqueue their
            // non-empty left and right child
            curr = queue.poll();
 
            System.out.print(curr.data + " ");
 
            if (curr.left != null) {
                queue.add(curr.left);
            }
 
            if (curr.right != null) {
                queue.add(curr.right);
            }
        }
    }
 
    // Recursive function to store nodes of odd levels in a queue
    // using inorder traversal
    public static void pushOddLevelNodes(Node root, Queue<Integer> q, boolean level)
    {
        // base case
        if (root == null) {
            return;
        }
 
        // store nodes in the right subtree
        pushOddLevelNodes(root.right, q, !level);
 
        // enqueue current node's data only if the level is odd
        if (level) {
            q.add(root.data);
        }
 
        // store nodes in the left subtree
        pushOddLevelNodes(root.left, q, !level);
    }
 
    // Recursive function to invert alternate levels of a perfect binary tree
    // using inorder traversal
    public static void invertBinaryTree(Node root, Queue<Integer> q, boolean level)
    {
        // base case
        if (root == null) {
            return;
        }
 
        // invert nodes in the left subtree
        invertBinaryTree(root.left, q, !level);
 
        // if the level is odd
        if (level)
        {
            // dequeue front element and assign it to the current node
            root.data = q.poll();
        }
 
        // invert nodes in the right subtree
        invertBinaryTree(root.right, q, !level);
    }
 
    // Invert alternate levels of a perfect binary tree
    public static void invertBinaryTree(Node root)
    {
        // create a queue and push nodes of odd levels into it
        Queue<Integer> q = new ArrayDeque<>();
        pushOddLevelNodes(root, q, false);
 
        // put nodes of odd levels at their correct position using a queue
        invertBinaryTree(root, q, false);
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                    1
                  /   \
                /       \
              2           3
            /   \       /   \
           4     5     6     7
          / \   / \   / \   / \
         8   9 10 11 12 13 14 15
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.left = new Node(8);
        root.left.left.right = new Node(9);
        root.left.right.left = new Node(10);
        root.left.right.right = new Node(11);
        root.right.left.left = new Node(12);
        root.right.left.right = new Node(13);
        root.right.right.left = new Node(14);
        root.right.right.right = new Node(15);
 
        invertBinaryTree(root);
        levelOrderTraversal(root);
    }
}
Download  Run Code

Output:

1 3 2 4 5 6 7 15 14 13 12 11 10 9 8

3. Using Preorder Traversal
The above solution requires two traversals of the binary tree and also needs a stack data structure. We can invert alternate levels of a perfect binary tree in single tree traversal and without any explicit stack. The idea is to perform a modified preorder traversal of the tree and use level information to swap the data within the function itself. It is a little tricky and requires special attention.

The implementation can be seen below in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left, right;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to print level order traversal of a perfect binary tree
    public static void levelOrderTraversal(Node root)
    {
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node curr = null;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // process each node in the queue and enqueue their
            // non-empty left and right child
            curr = queue.poll();
 
            System.out.print(curr.data + " ");
 
            if (curr.left != null) {
                queue.add(curr.left);
            }
 
            if (curr.right != null) {
                queue.add(curr.right);
            }
        }
    }
 
    // Recursive function to invert alternate levels of a perfect binary tree
    // using preorder traversal
    public static void invertBinaryTree(Node first, Node second, boolean level)
    {
        // return if either child is empty
        if (first == null || second == null) {
            return;
        }
 
        // swap data only if the level is odd
        if (level)
        {
            int temp = first.data;
            first.data = second.data;
            second.data = temp;
        }
 
        // recur with the left child of `first` and the right child
        // of `second` with an updated level
        invertBinaryTree(first.left, second.right, !level);
 
        // recur with the right child of `first` and left child of
        // `second` with an updated level
        invertBinaryTree(first.right, second.left, !level);
    }
 
    public static void invertBinaryTree(Node root)
    {
        // base case
        if (root == null) {
            return;
        }
 
        invertBinaryTree(root.left, root.right, true);
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                    1
                  /   \
                /       \
              2           3
            /   \       /   \
           4     5     6     7
          / \   / \   / \   / \
         8   9 10 11 12 13 14 15
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        root.left.left.left = new Node(8);
        root.left.left.right = new Node(9);
        root.left.right.left = new Node(10);
        root.left.right.right = new Node(11);
        root.right.left.left = new Node(12);
        root.right.left.right = new Node(13);
        root.right.right.left = new Node(14);
        root.right.right.right = new Node(15);
 
        invertBinaryTree(root);
        levelOrderTraversal(root);
    }
}
Download  Run Code

Output:

1 3 2 4 5 6 7 15 14 13 12 11 10 9 8

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.
