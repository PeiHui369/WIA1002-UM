Check if a binary tree is a complete binary tree or not
Google Translate Icon
Given a binary tree, check if it is a complete binary tree or not.

A complete binary tree is a binary tree in which every level, except possibly the last, is filled, and all nodes are as far left as possible. For example, the following binary trees are complete:

Complete Binary Tree

Practice This Problem

1. Level Order Traversal (BFS)
We can modify level order traversal to check if a given binary tree is a complete binary tree or not. The idea is for every dequeued node, check if it is a full node (have both left and right children). If a node is found that is not a full node, i.e., either it has no children or only one child, then all the remaining nodes in the queue should not have any children. If anyone has a child, then it’s not a complete binary tree; otherwise, it is.

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Function to check if a given binary tree is complete or not
    public static boolean isComplete(Node root)
    {
        // return if the tree is empty
        if (root == null) {
            return true;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node front;
 
        // flag to mark the end of full nodes
        boolean flag = false;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // dequeue front node
            front = queue.poll();
 
            // if we have encountered a non-full node before and the current node
            // is not a leaf, a tree cannot be complete
            if (flag && (front.left != null || front.right != null)) {
                return false;
            }
 
            // if the left child is empty and the right child exists,
            // a tree cannot be complete
            if (front.left == null && front.right != null) {
                return false;
            }
 
            // if the left child exists, enqueue it
            if (front.left != null) {
                queue.add(front.left);
            }
            // if the current node is a non-full node, set the flag to true
            else {
                flag = true;
            }
 
            // if the right child exists, enqueue it
            if (front.right != null) {
                queue.add(front.right);
            }
            // if the current node is a non-full node, set the flag to true
            else {
                flag = true;
            }
        }
 
        return true;
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
               /     \
              2       3
             / \     / \
            4   5   6   7
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        if (isComplete(root)) {
            System.out.println("Complete binary tree");
        }
        else {
            System.out.println("Not a complete binary tree");
        }
    }
}
Download  Run Code

Output:

Complete binary tree

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

2. Array representation of a complete tree
We can solve this problem by using the properties of a complete binary tree. We know that in the array representation of a binary tree, the left child for a node at index i is present at index 2i+1, and the right child is present at index 2i+2. If we construct an array with all the tree elements at the corresponding positions, then the elements will hold consecutive positions for a complete binary tree. If any vacant position is found, then the tree cannot be complete.

 
Complete Binary Trees

Following is the implementation in C++, Java, and Python based on the above idea:


// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Utility function to calculate the total number of nodes in a binary tree
    private static int size(Node root)
    {
        if (root == null) {
            return 0;
        }
        return 1 + size(root.left) + size(root.right);
    }
 
    // Perform inorder traversal on the binary tree and fill array `A[]`
    public static void inorder(Node root, boolean[] A, int i)
    {
        if (root == null || i >= A.length) {
            return;
        }
 
        // recur with index `2i+1` for left node
        inorder(root.left, A, 2*i + 1);
 
        // mark index `i` as visited
        A[i] = true;
 
        // recur with index `2i+2` for the right node
        inorder(root.right, A, 2*i + 2);
    }
 
    // Function to check if a given binary tree is a complete binary tree or not
    public static boolean isComplete(Node root, int n)
    {
        // return if the tree is empty
        if (root == null) {
            return true;
        }
 
        // construct an auxiliary boolean array of size `n`
        boolean[] A = new boolean[n];
 
        // fill array `A[]`
        inorder(root, A, 0);
 
        // check if all positions in the array are filled or not
        for (boolean e: A)
        {
            if (!e) {
                return false;
            }
        }
 
        return true;
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
               /     \
              2       3
             / \     / \
            4   5   6   7
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        if (isComplete(root, size(root))) {
            System.out.println("Complete binary tree");
        }
        else {
            System.out.println("Not a complete binary tree");
        }
    }
}
Download  Run Code

Output:

Complete binary tree

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

3. Space-optimized previous Approach
The above approach takes extra space for storage of the boolean array. As discussed for a complete binary tree, the left and right child’s index for any node is less than the total number of nodes for every node. We can avoid using extra space by passing the index as a recursion parameter and checking for every node that their left and right child’s index are within the correct range.

Complete Binary Tree – Array Representation

Following is the C++, Java, and Python program that demonstrates it:


// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    private static int size(Node root)
    {
        if (root == null) {
            return 0;
        }
        return 1 + size(root.left) + size(root.right);
    }
 
    // Recursive function to check if a given binary tree is a complete tree or not
    public static boolean isComplete(Node root, int i, int n)
    {
        // return if the tree is empty
        if (root == null) {
            return true;
        }
 
        if ((root.left != null && 2*i + 1 >= n) ||
                !isComplete(root.left, 2*i + 1, n)) {
            return false;
        }
 
        if ((root.right != null && 2*i + 2 >= n) ||
                !isComplete(root.right, 2*i + 2, n)) {
            return false;
        }
 
        return true;
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /   \
               /     \
              2       3
             / \     / \
            4   5   6   7
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        if (isComplete(root, 0, size(root))) {
            System.out.println("Complete binary tree");
        }
        else {
            System.out.println("Not a complete binary tree");
        }
    }
}
Download  Run Code

Output:

Complete binary tree

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.

