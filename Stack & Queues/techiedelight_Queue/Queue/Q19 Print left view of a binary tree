 to content
Print left view of a binary tree
Google Translate Icon
Given a binary tree, write an efficient algorithm to print its left view.

For example, the left view of the following binary tree is 1, 2, 4, 7:
 

Print left view of a binary tree

Practice This Problem

1. Iterative Implementation
In the iterative version, perform a level order traversal on the tree. We can modify level order traversal to maintain nodes at the current level. Then if the current node is the first node of the current level, print it.

Following is the C++, Java, and Python program that demonstrates it:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Iterative function to print the left view of a given binary tree
    public static void leftView(Node root)
    {
        // return if the tree is empty
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node curr;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // calculate the total number of nodes at the current level
            int size = queue.size();
            int i = 0;
 
            // process every node of the current level and enqueue their
            // non-empty left and right child
            while (i++ < size)
            {
                curr = queue.poll();
 
                // if this is the first node of the current level, print it
                if (i == 1) {
                    System.out.print(curr.key + " ");
                }
 
                if (curr.left != null) {
                    queue.add(curr.left);
                }
 
                if (curr.right != null) {
                    queue.add(curr.right);
                }
            }
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        leftView(root);
    }
}
Download  Run Code

Output:

1 2 4 7

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

2. Recursive implementation using hashing
We can also solve this problem by using hashing. The idea is to traverse the tree in a preorder fashion and pass level information in function arguments. If the level is visited for the first time, insert the current node and level information into the map. Finally, when all nodes are processed, traverse the map and print the left view.

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.HashMap;
import java.util.Map;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Recursive function to traverse the nodes in a preorder fashion
    public static void leftView(Node root, int level, Map<Integer, Integer> map)
    {
        // base case
        if (root == null) {
            return;
        }
 
        // if the level is visited for the first time, insert the current node
        // and level information into the map
        map.putIfAbsent(level, root.key);
 
        leftView(root.left, level + 1, map);
        leftView(root.right, level + 1, map);
    }
 
    // Function to print the left view of a given binary tree
    public static void leftView(Node root)
    {
        // create an empty HashMap to store the first node for each level
        Map<Integer, Integer> map = new HashMap<>();
 
        // traverse the tree and fill the map
        leftView(root, 1, map);
 
        // iterate through the HashMap in sorted order of its keys
        // and print the left view
        for (int i = 1; i <= map.size(); i++) {
            System.out.print(map.get(i) + " ");
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        leftView(root);
    }
}
Download  Run Code

Output:

1 2 4 7

We can also traverse nodes in reverse preorder fashion, as shown below:


void leftView(Node root, int level, Map<Integer, Integer> map)
{
    // base case
    if (root == null) {
        return;
    }
 
    // insert the current node and level information into the map
    map.put(level, root.key);
 
    // recur for the right subtree before the left subtree
    leftView(root.right, level + 1, map);
    leftView(root.left, level + 1, map);
}
The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

3. Recursive implementation using Preorder traversal
We can also solve this problem by using constant space and linear time. The idea is to traverse the tree in a preorder fashion and maintain the maximum level visited so far. If the current level is more than the maximum level visited so far, then the current node is the first node of the current level, and we print it and update the last level to the current level.

Following is the implementation in C++, Java, and Python based on the above idea:


// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Recursive function to print the left view of a given binary tree
    public static int leftView(Node root, int level, int last_level)
    {
        // base case: empty tree
        if (root == null) {
            return last_level;
        }
 
        // if the current node is the first node of the current level
        if (last_level < level)
        {
            // print the node's data
            System.out.print(root.key + " ");
 
            // update the last level to the current level
            last_level = level;
        }
 
        // recur for the left and right subtree by increasing the level by 1
        last_level = leftView(root.left, level + 1, last_level);
        last_level = leftView(root.right, level + 1, last_level);
 
        return last_level;
    }
 
    // Function to print the left view of a given binary tree
    public static void leftView(Node root) {
        leftView(root, 1, 0);
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        leftView(root);
    }
}
Download  Run Code

Output:

1 2 4 7

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.

 
Exercise: Print right view of a binary tree
