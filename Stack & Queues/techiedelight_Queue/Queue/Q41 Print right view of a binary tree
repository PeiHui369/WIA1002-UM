Print right view of a binary tree
Google Translate Icon
Given a binary tree, write an efficient algorithm to print its right view.

For example, the right view of the following binary tree is 1, 3, 6, 8:

 
Print right view of a binary tree

Practice This Problem

1. Iterative Implementation using Queue
In an iterative version, perform a level order traversal on the tree. The idea is to modify level order traversal to maintain nodes at the current level. Then if the current node is the last node of the current level, print it.

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Queue;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Iterative function to print the right view of a given binary tree
    public static void printRightView(Node root)
    {
        // return if the tree is empty
        if (root == null) {
            return;
        }
 
        // create an empty queue and enqueue the root node
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
 
        // to store the current node
        Node curr = null;
 
        // loop till queue is empty
        while (!queue.isEmpty())
        {
            // calculate the total number of nodes at the current level
            int size = queue.size();
            int i = 0;
 
            // process every node of the current level and enqueue their
            // non-empty right and right child
            while (i++ < size)
            {
                curr = queue.poll();
 
                // if this is the last node of the current level, print it
                if (i == size) {
                    System.out.print(curr.key + " ");
                }
 
                if (curr.left != null) {
                    queue.add(curr.left);
                }
 
                if (curr.right != null) {
                    queue.add(curr.right);
                }
            }
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        printRightView(root);
    }
}
Download  Run Code

Output:

1 3 6 8

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

2. Recursive Implementation using Hashing
We can also solve this problem by using hashing. The idea is to traverse the tree in a preorder fashion and pass level information in function arguments. For every node encountered, insert the node and level information into the map. Finally, when all nodes are processed, traverse the map and print the right view.

Following is the implementation in C++, Java, and Python based on the above idea:


import java.util.HashMap;
import java.util.Map;
 
// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Traverse nodes in reverse preorder fashion
    public static void printRightView(Node root, int level, Map<Integer, Integer> map)
    {
        if (root == null) {
            return;
        }
 
        // insert the current node and level information into the map
        map.put(level, root.key);
 
        // recur for the left subtree before the right subtree
        printRightView(root.left, level + 1, map);
        printRightView(root.right, level + 1, map);
    }
 
    // Function to print the right view of a given binary tree
    public static void printRightView(Node root)
    {
        // create an empty map to store the last node for each level
        Map<Integer, Integer> map = new HashMap<>();
 
        // traverse the tree and fill the map
        printRightView(root, 1, map);
 
        // iterate through the map in sorted order of its keys and print the right view
        for (int i = 1; i <= map.size(); i++) {
            System.out.print(map.get(i) + " ");
        }
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        printRightView(root);
    }
}
Download  Run Code

Output:

1 3 6 8

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree.

3. Recursive Implementation (using Preorder Traversal)
We can also solve this problem by using constant space and linear time. The idea is to traverse the tree in reverse preorder fashion (visit the right subtree before the left subtree) and maintain the maximum level visited so far. If the current level is more than the maximum level visited so far, then the current node is the last node of the current level, and we print it and update the last level to the current level.

Following is the C++, Java, and Python implementation of the idea:


// A class to store a binary tree node
class Node
{
    int key;
    Node left = null, right = null;
 
    Node(int key) {
        this.key = key;
    }
}
 
class Main
{
    // Recursive function to print the right view of a given binary tree
    public static int printRightView(Node root, int level, int lastLevel)
    {
        // base case: empty tree
        if (root == null) {
            return lastLevel;
        }
 
        // if the current node is the last node of the current level
        if (lastLevel < level)
        {
            // print the node's data
            System.out.print(root.key + " ");
 
            // update the last level to the current level
            lastLevel = level;
        }
 
        // recur for the right and left subtree by increasing level by 1
        lastLevel = printRightView(root.right, level + 1, lastLevel);
        lastLevel = printRightView(root.left, level + 1, lastLevel);
 
        return lastLevel;
    }
 
    // Function to print the right view of a given binary tree
    public static void printRightView(Node root) {
        printRightView(root, 1, 0);
    }
 
    public static void main(String[] args)
    {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        printRightView(root);
    }
}
Download  Run Code

Output:

1 3 6 8

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.

 
Exercise: Print left view of a binary tree
