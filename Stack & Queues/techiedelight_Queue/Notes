Repeated in Stack: 3,4

- Out of Topic (Labtest 2) on hold -
BST: 5, 13, 14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,39,40,41,42,48
Breadth-First Search(BFS) [Graph]: Shortest path, Movement on board, min val to convert all neg values in matrix, snake & ladder, undirected graph cycle or not
6,7,8,9,10,11,25,30,31,33
DFS: Movement on board, undirected graph cycle or not
9,10,11,33
Graph: 34,35,36,37,38,43,44,45,46,47

can do: 12,32
# Queue Implementation
@ Array
class Queue {
    private int[] arr;
    private int front;
    private int rear;
    private int capacity;
    private int count;
    
    Queue(int size){
        arr = new int[size];
        capacity = size;
        front = 0;
        rear = -1;
        count = 0;
    }
    
    1. int dequeue() {
          if (isEmpty()) {return;}
          int x = arr[front];
          front = (front + 1)%capacity;
          count--;
          return x;
       }
       
     2. void enqueue (int item_ {
            if (isFull()) {return;}
            rear = (rear+1)%capacity;
            arr[rear] = item;
            count++;
        }
     
     3.  int peek() {
            if (isEmpty()) {return;}
            return arr[front];
          }
      
      4. int size() {return count;}
      
      5. boolean isEmpty() {return (size()==0);}
      
      6. boolean isFull() {return (size()==capacity);}
      
@ Queue Interface
psvm{
    Queue<String> queue = new LinkedList<String>();
    queue.add("A");
    queue.peek();
    queue.remove();
    queue.size();
    queue.isEmpty();
}

@ LinkedList -> Can grow/shrink 
class Node{
    int data;
    Node next;
    
    public Node(int data){
      this.data = data;
      this.next = null;
    }
}

class Queue{
    private static Node rear = null, front = null;
    private static int count = 0;
    
    1. public static int dequeue() {
        if (front == null) {return;}
        Node temp = front;
        front = front.next;
        if (front == null) { rear = null; }
        count -= 1;
        return temp.data;
    }
    
    2. void enqueue(int item) {
          Node node = new Node(item);
          if (front == null) {
              front = node;
              rear = node;
          }else{
              rear.next = node;
              rear = node;
          }
          count += 1;
      }
    
    3. int peek(){
          if (front == null) {return;}
          return front.data;
        }
    
    4. boolean isEmpty() {return rear==null && front==null;}
    
    5. int size() {return count;}

# Generate binary numbers between 1 to `n`
class Main {
    public static void generate (int n) {
        Queue<String> q = new ArrayDeque<>();
        q.add("1");
        int i = 1;
        while (i++ <= n) {
            q.add(q.peek() + '0');
            q.add(q.peek() + '1');
        }
        System.out.print(q.poll() + ' ');
    }
}

# Convert a multilevel linked list to a singly linked list
class Node{
    int data;
    Node next, child;
    
    Node(int data, Node next, Node child){
        this.data = data;
        this.next = next;
        this.child = child;
    }
}

class Main{
    1. public static Node convertList (Node head) {
        Node curr = head;
        Queue<Node> q = new ArrayDeque<>();
        while (curr != null) {
            if (curr.next = null) {curr.next = q.poll();}
            if (curr.child != null) {q.add (curr.child);}
            curr = curr.next;
        }
        return head;
    }
    
    2. public static void printList (Node head) {
        Node ptr = head;
        while (ptr != null) {
            S.o.p (ptr.data + " -> ");
            ptr = ptr.next;
        }
        S.o.println("null")
      }
      
    3. public static Node createHorizontalList(int[] input){
        Node head = null;
        for(int i = input.length-1; i>=0; i--){
            head = new Node (input[i], head, null);
        }
        return head;
      }
                

=========
# Efficiently print all nodes between two given levels in a binary tree
class Node {
    int key;
    Node left = null, right = null;
    
    Node (int key) {this.key = key;}
}

@ 
class Main {
    1. public static void printNodes(Node root, int start, int end){
            if (root == null) {return;}
            Queue<Node> queue = new ArrayDeque<>();
            queue.add(root);
            Node curr = null;
            int level = 0;
            while (!queue.isEmpty()) {
                level++;
                int size = queue.size();
                while (size-- > 0){
                  curr = queue.poll();
                  if(level >= start && level <= end) {S.o.p(curr.key + " ");}
                  if(curr.left != null) {queue.add(curr.left);}
                  if(curr.right != null) {queue.add(curr.right);}
                }
                if (level >= start && level <= end) {S.o.println();}
           }
      }
      
@
class Main {
    1. public static void printNodes (Node root, int start, int end, int level, Map<Integer, List<Integer>> map){
            if (root == null) {return;}
            if (level>=start && level<=end) {
                map.putIfAbsent(level, new ArrayList<>());
                map.get(level).add(root.key);
            }
            printNodes(root.left, start, end, level+1, map);
            printNodes(root.right, start, end, level+1, map);
       }
       
    2. printNodes (Node root, int start, int end){
            Map<Integer, List<Integer>> map = new HashMap<>();
            printNodes(root, start, end, 1, map);
            for(int i = start; i <= end; i++) {
                if (map.containsKey(i)) {
                    System.out.println("Level " +i+ ": " + map.get(i));
                }
            }
        }
        
        
        
            
            
            
            
