To implement a stack in Java using an array, you can define a class that encapsulates the array and provides methods for the stack operations. Here's an example implementation:

```java
public class ArrayStack {
    private int maxSize;
    private int[] stackArray;
    private int top;

    public ArrayStack(int capacity) {
        maxSize = capacity;
        stackArray = new int[maxSize];
        top = -1;
    }

    public void push(int value) {
        if (isFull()) {
            throw new IllegalStateException("Stack is full. Cannot push element.");
        }
        top++;
        stackArray[top] = value;
    }

    public int pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty. Cannot pop element.");
        }
        int poppedValue = stackArray[top];
        top--;
        return poppedValue;
    }

    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty. Cannot peek element.");
        }
        return stackArray[top];
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top == maxSize - 1;
    }

    public static void main(String[] args) {
        ArrayStack stack = new ArrayStack(5);

        stack.push(5);
        stack.push(2);
        stack.push(10);

        System.out.println(stack.pop()); // Output: 10
        System.out.println(stack.peek()); // Output: 2
        System.out.println(stack.isEmpty()); // Output: false
    }
}
```

In this implementation, the `ArrayStack` class has an array `stackArray` to store the elements of the stack. The `maxSize` variable represents the maximum capacity of the stack, and the `top` variable keeps track of the index of the top element.

The `push` method adds an element to the top of the stack. It first checks if the stack is full, and if so, throws an exception. Otherwise, it increments the `top` variable and assigns the value to the corresponding index in the `stackArray`.

The `pop` method removes and returns the top element from the stack. It checks if the stack is empty, and if so, throws an exception. Otherwise, it retrieves the value at the top index, decrements the `top` variable, and returns the value.

The `peek` method returns the value of the top element without removing it. It performs the same empty check as `pop` and returns the value at the top index.

The `isEmpty` method checks if the stack is empty by verifying if the `top` index is -1.

The `isFull` method checks if the stack is full by comparing the `top` index with `maxSize - 1`.

In the `main` method, we create an `ArrayStack` object, perform stack operations (push, pop, peek), and print the results for demonstration.
