@ Basic operations of Stack  Data Structure
You can implement a Stack data structure using an array or linked list but what matters most is that you should implement the basic operations like push, pop, peek, size, isEmpty, etc.

1. Push
This operation adds an element at the top of the stack. A top is a place where all stack operations take place.

2. Pop
This operation retrieves the top element after removing it from the stack.

3. isEmpty
This operation returns true if the stack is empty.

4. peek()
This operation returns the top element without removing it from the stack, also known as the top

5. size()
This operation returns the total number of elements in the stack.

One of the gotcha while implementing stack using array in Java is not removing the object reference from the array, which can cause memory leak, as explained in Effective Java. So, don't repeat that mistake, particularly in interviews. 

@ Basic operations of Queue
Similar to stack, Queue also has some basic options for adding, removing, and querying elements. These are known as enqueue, dequeue, and peek. Though there is no top, instead you have the front and rear end of the queue. elements are inserted at the end of the queue and removed from the front of the queue. 

1. Enqueue()
This operation adds an element at the end of the queue. It also increases the size by 1.

2. Dequeue()
This operation removes an element from the start of the queue and decreases the size by 1.

3. isEmpty()
This function returns true if the queue is empty like size==0

4. peek()
This function returns the first element of the queue without removing it, also known as the top(). 

5. size()
This operation returns the total number of elements in the stack.

You can implement Queue using both array and linked list in Java just try both of them. If you are stuck then I also suggest you go through one of these the best data structure and algorithms courses to revise key data structure concepts before interviews. 

Q2
@ Implement Stack using Array

Instance variable: int maxSize, int[] stackArray, int top;
Constructor: 
public ArrayStack (int capacity){
        maxSize = capacity;
        stackArray = new int [maxSize];
        top = -1;
    }
Method:
- isFull(): top==maxSize-1
- push(int value): isFull(){}; top++; stackArray[top] = value
- isEmpty(): top == -1
- pop(): isEmpty(){}; int poppedValue = stackArray[top]; top--;
- peek(): isEmpty(){}; stackArray[top]


Q3:
@ Evaluate Postfix Expression Using a Stack

     Stack<Integer> stack = new Stack<>();

        for (char c : postfix.toCharArray()) {
            if (Character.isDigit(c)) {
                int operand = Character.getNumericValue(c);
                stack.push(operand);
            } else {
                int operand2 = stack.pop();
                int operand1 = stack.pop();
                int result = performOperation(c, operand1, operand2);
                stack.push(result);
            }
        }

        return stack.pop();
    }
    
Q4
@ Sort stack
public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();

            while (!tempStack.isEmpty() && tempStack.peek() > temp) { //if ascending: tempStack.peek()<temp
                stack.push(tempStack.pop());
            }

            tempStack.push(temp);
        }

        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }
    
Q5
@ Reverse first k elements of Queue
public static void reverseFirstKElements(Queue<Integer> queue, int k){
        if(k<0 || k>queue.size()){
            throw new IllegalArgumentException("Invalid value of k.");
        }
        Stack<Integer> stack = new Stack<>();

        //Push the first k elements into the stack
        for(int i = 0; i<k; i++){
            stack.push(queue.poll());
        }

        //Enqueue the elements from the stack back into the queue
        while(!stack.isEmpty()){
            queue.offer(stack.pop());
        }

        //Rotate the remaining elements in the queue (they should be after rotated k elements)
        for(int i = 0; i<queue.size()-k; i++){
            queue.offer(queue.poll());
        }
    }
    
Q6
@ Generate binary number from 1 to n using queue
public static void generateBinaryNumbers(int n) {
        Queue<String> queue = new LinkedList<>();
        queue.offer("1");

        for (int i = 1; i <= n; i++) {
            String binaryNumber = queue.poll();
            System.out.println(binaryNumber);

            queue.offer(binaryNumber + "0");
            queue.offer(binaryNumber + "1");
        }
    }

Q7
@ Sum 2 linked list using stack [QTA]

Q8
@ Balanced Parentheses
public static boolean checkBalancedParentheses(String expression) {
        Stack<Character> stack = new Stack<>();

        for (char ch : expression.toCharArray()) {
            if (ch == '(' || ch == '[' || ch == '{') {
                stack.push(ch);
            } else if (ch == ')' || ch == ']' || ch == '}') {
                if (stack.isEmpty()) {
                    return false;
                }

                char top = stack.pop();
                if ((ch == ')' && top != '(') ||
                    (ch == ']' && top != '[') ||
                    (ch == '}' && top != '{')) {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }
    
Q9
@ Stack using queue
public void push(int value) {
        queue1.offer(value);
        while (!queue2.isEmpty()) {
            queue1.offer(queue2.poll());
        }
        Queue<Integer> temp = queue1;
        queue1 = queue2;
        queue2 = temp;
    }

pop(): queue2.poll();
top(): queue2.peek();

Q10
@ Reversed string using stack
public static String reverseString(String input){
        Stack<Character> stack = new Stack<>();

        //Push each character onto the stack
        for(int i = 0; i<input.length(); i++){
            stack.push(input.charAt(i));
        }

        StringBuilder reversedString = new StringBuilder();

        //Pop each character from the stack and append it to the new string
        while(!stack.isEmpty()){
            reversedString.append(stack.pop());
        }

        return reversedString.toString();
    }
    
Q11 Repeat

Q12 
@ Infix to Postfix using Stack
 public static String convertToPostfix(String infix) {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < infix.length(); i++) {
            char ch = infix.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                postfix.append(ch);
            } else if (ch == '(') {
                stack.push(ch);
            } else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop(); // Discard the opening parenthesis
            } else {
                while (!stack.isEmpty() && getPrecedence(ch) <= getPrecedence(stack.peek())) {
                    postfix.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    private static int getPrecedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
        }
        return -1;
    }

Q13
@ Queue using Stack
public void enqueue(int value) {
        stack1.push(value);
    }

    public int dequeue() {
        if (stack2.isEmpty()) {
            // Transfer elements from stack1 to stack2
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }
    
Q14
@ Postfix to Prefix
public static String convertToPostfix(String infix){
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for(int i = 0; i<infix.length(); i++){
            char ch = infix.charAt(i);

            if(Character.isLetterOrDigit(ch)){
                postfix.append(ch);
            }else if (ch == '('){
                stack.push(ch);
            }else if (ch == ')'){
                while(!stack.isEmpty() && stack.peek()!='('){
                    postfix.append(stack.pop());
                }
                stack.pop(); //Discard the opening parenthesis
            }else{
                while(!stack.isEmpty() && getPrecedence(ch) <= getPrecedence(stack.peek())){
                    postfix.append(stack.pop());
                }
                stack.push(ch);
            }
        }
        while(!stack.isEmpty()){
            postfix.append(stack.pop());
        }
        return postfix.toString();
    }
    
Q15



@ Prefix, Infix, Postfix
 public static String convertToPrefix(String postfix){
        Stack<String> stack = new Stack<>();

        for(int i = 0; i<postfix.length(); i++){
            char c = postfix.charAt(i);

            if(Character.isLetterOrDigit(c)){
                stack.push(String.valueOf(c));
           ###
    
- In -> Post
            }else if (ch == '('){
                stack.push(ch);
            }else if (ch == ')'){
                while(!stack.isEmpty() && stack.peek()!='('){
                    postfix.append(stack.pop());
                }
                stack.pop(); //Discard the opening parenthesis
            }else{
                while(!stack.isEmpty() && getPrecedence(ch) <= getPrecedence(stack.peek())){
                    postfix.append(stack.pop());
                }
                stack.push(ch);
            }
        }
        while(!stack.isEmpty()){
            postfix.append(stack.pop());
        }
        return postfix.toString();
    }

- Post -> Pre
            }else{
                String operand2 = stack.pop();
                String operand1 = stack.pop();
                String expression = c + operand1 + operand2;//#
                stack.push(expression);
            }
        }
        return stack.pop();
    }
    
 - Pre -> Post
           } else {
                String operand1 = stack.pop();
                String operand2 = stack.pop();
                String postfix = operand1 + operand2 + ch;//#
                stack.push(postfix);
            }
        }

        return stack.pop();
    }
 
- Pre -> In
            } else {
                String operand1 = stack.pop();
                String operand2 = stack.pop();
                String infix = "(" + operand1 + ch + operand2 + ")"; //#
                stack.push(infix);
            }
        }

        return stack.pop();
    }           
 
 
 
 
    
