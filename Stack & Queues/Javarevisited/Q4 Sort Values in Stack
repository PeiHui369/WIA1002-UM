To sort the values in a stack, you can use an additional temporary stack. Here's a solution in Java:

@ Descending
```java
import java.util.Stack;

public class StackSorter {

    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();

            while (!tempStack.isEmpty() && tempStack.peek() > temp) { //if ascending: tempStack.peek()<temp
                stack.push(tempStack.pop());
            }

            tempStack.push(temp);
        }

        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(2);
        stack.push(10);
        stack.push(1);

        System.out.println("Stack before sorting: " + stack);

        sortStack(stack);

        System.out.println("Stack after sorting: " + stack);
    }
}
```

In this solution, the `sortStack` method takes a stack of integers and sorts it using an additional temporary stack.

The method uses a while loop to iterate through the elements of the original stack. It pops each element from the original stack and compares it with the elements in the temporary stack.

If the element from the original stack is smaller than the top element of the temporary stack, it pops elements from the temporary stack and pushes them back onto the original stack until it finds the correct position to insert the element.

After finding the correct position, it pushes the element onto the temporary stack.

Once the original stack is empty, the elements in the temporary stack are already sorted in descending order. So, we pop elements from the temporary stack and push them back onto the original stack to get the sorted stack in ascending order.

In the `main` method, we create a stack with some unsorted elements, sort it using the `sortStack` method, and print the stack before and after sorting to verify the result.
