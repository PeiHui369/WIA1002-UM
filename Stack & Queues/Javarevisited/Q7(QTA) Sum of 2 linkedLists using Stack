7. How do you find the sum of two linked lists using Stack? (solution)
For example, if the given linked list are 1-2-3-4-5 and 6-7-8-9-10 then your program should return a linked list with nodes 7-9-11-13-15
-------------

To find the sum of two linked lists using a stack, you can follow these steps:

1. Create a stack for each linked list.
2. Traverse both linked lists simultaneously and push the values of each node onto their respective stacks.
3. Initialize a carry variable to 0 to handle any carryover during addition.
4. Create a new linked list to store the sum.
5. Pop elements from both stacks, add them along with the carry, and update the carry if necessary.
6. Create a new node with the sum (taking care of carry) and add it to the new linked list.
7. Repeat steps 5 and 6 until both stacks are empty.
8. If there is any remaining carry after processing all nodes, create a new node for it and add it to the new linked list.
9. Reverse the new linked list to get the correct order.
10. Return the new linked list as the result.

Here's an implementation of the solution in Java:

```java
import java.util.Stack;

public class LinkedListSum {

    private static class Node {
        int value;
        Node next;

        Node(int value) {
            this.value = value;
        }
    }

    public static Node sumLinkedLists(Node head1, Node head2) {
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();

        // Push values of linked list 1 onto stack 1
        while (head1 != null) {
            stack1.push(head1.value);
            head1 = head1.next;
        }

        // Push values of linked list 2 onto stack 2
        while (head2 != null) {
            stack2.push(head2.value);
            head2 = head2.next;
        }

        Node result = null;
        int carry = 0;

        // Calculate the sum of the two linked lists
        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {
            int sum = carry;

            if (!stack1.isEmpty()) {
                sum += stack1.pop();
            }

            if (!stack2.isEmpty()) {
                sum += stack2.pop();
            }

            carry = sum / 10; // Calculate the carry

            Node newNode = new Node(sum % 10); // Create a new node with the sum (taking care of carry)
            newNode.next = result;
            result = newNode;
        }

        return result;
    }

    public static void main(String[] args) {
        // Create linked list 1: 1-2-3-4-5
        Node head1 = new Node(1);
        head1.next = new Node(2);
        head1.next.next = new Node(3);
        head1.next.next.next = new Node(4);
        head1.next.next.next.next = new Node(5);

        // Create linked list 2: 6-7-8-9-10
        Node head2 = new Node(6);
        head2.next = new Node(7);
        head2.next.next = new Node(8);
        head2.next.next.next = new Node(9);
        head2.next.next.next.next = new Node(10);

        Node result = sumLinkedLists(head1, head2);

        // Print the result: 7-9-11-13-15
        while (result != null) {
            System.out.print(result.value + " ");
            result = result.next;
        }
    }
}
```

In this solution, the `Node` class represents a node in the linked list. The `sumLinkedLists` method takes two linked list heads as input and returns a new linked list that represents the sum of the input linked lists
