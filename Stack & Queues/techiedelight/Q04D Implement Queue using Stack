We know that queue is a First–In, First–Out (FIFO) data structure in which elements are removed in the same order in which they were added to the queue. In an enqueue operation, items are added to the rear of the queue, while in dequeue operation, items are removed from the front of the queue.

There are several ways to implement a queue using one or two stacks by tweaking their push and pop operations.

@1 Using two stacks
The idea is to implement the queue’s enqueue operation so that the first entered element always ends up at the top of the stack. To achieve this, we need an additional stack.

- To enqueue an item into the queue, first move all elements from the first stack to the second stack, push the item into the first stack, and finally move all elements back to the first stack. This ensures that the new item lies at the bottom of the stack and hence would be the last one to be removed.
- To dequeue an item from the queue, return the top item from the first stack.

import java.util.Stack;
 
// Implement a queue using two stacks
class Queue<T> {
    private Stack<T> s1, s2;
 
    // Constructor
    Queue()
    {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
 
    // Add an item to the queue
    public void enqueue(T data)
    {
        // Move all elements from the first stack to the second stack
        while (!s1.isEmpty()) {
            s2.push(s1.pop());
        }
 
        // push item into the first stack
        s1.push(data);
 
        // Move all elements back to the first stack from the second stack
        while (!s2.isEmpty()) {
            s1.push(s2.pop());
        }
    }
 
    // Remove an item from the queue
    public T dequeue()
    {
        // if the first stack is empty
        if (s1.isEmpty())
        {
            System.out.println("Underflow!!");
            System.exit(0);
        }
 
        // return the top item from the first stack
        return s1.pop();
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        int[] keys = { 1, 2, 3, 4, 5 };
        Queue<Integer> q = new Queue<Integer>();
 
        // insert above keys
        for (int key: keys) {
            q.enqueue(key);
        }
 
        System.out.println(q.dequeue());    // print 1
        System.out.println(q.dequeue());    // print 2
    }
}

/* 
enqueue
        stack1: 1
        stack2: 
        
        stack1: N
        stack2: 1
        
        stack1: 2 1
        stack2: 
                
        stack1: 2 
        stack2: 1
                
        stack1: 
        stack2: 1 2
         
        stack1: N 
        stack2: 1 2
                
        stack1: N 2
        stack2: 1
         
        stack1: N 2 1
        stack2: 
 */
 
Note that the elements are exchanged between the stacks twice for every enqueue operation. This can impact performance if enqueue operations are frequent. Here’s an alternative approach that affects the dequeue operation’s time complexity instead of the enqueue operation.

- To enqueue an item into the queue, push the item into the first stack.
- To dequeue an item from the queue, move elements from the first stack to the second stack if it is empty, and return the top item from the second stack.

import java.util.Stack;
 
// Implement a queue using two stacks
class Queue<T> {
    private Stack<T> s1, s2;
 
    // Constructor
    Queue()
    {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
 
    // Add an item to the queue
    public void enqueue(T data)
    {
        // push item into the first stack
        s1.push(data);
    }
 
    // Remove an item from the queue
    public T dequeue()
    {
        // if both stacks are empty
        if (s1.isEmpty() && s2.isEmpty())
        {
            System.out.println("Underflow!!");
            System.exit(0);
        }
 
        // if the second stack is empty, move elements from the first stack to it
        if (s2.isEmpty())
        {
            while (!s1.isEmpty()) {
                s2.push(s1.pop());
            }
        }
 
        // return the top item from the second stack
        return s2.pop();
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        int[] keys = { 1, 2, 3, 4, 5 };
        Queue<Integer> q = new Queue<Integer>();
 
        // insert above keys
        for (int key: keys) {
            q.enqueue(key);
        }
 
        System.out.println(q.dequeue());    // print 1
        System.out.println(q.dequeue());    // print 2
    }
}

@2 Using one stack with call stack
We can also use an implicit stack (call stack) and an actual stack for constructing a queue. The dequeue operation pops all elements from the stack and stores them in the call stack. When the stack is left with a single item, remove and return that item. Finally, push all elements back into the stack from the call stack as the recursion unfolds.

import java.util.Stack;
 
// Implement a queue using a single stack
class Queue<T> {
    private Stack<T> s;
 
    // Constructor
    Queue() {
        s = new Stack<>();
    }
 
    // Add an item to the queue
    public void enqueue(T data)
    {
        // push item into the first stack
        s.push(data);
    }
 
    // Remove an item from the queue
    public T dequeue()
    {
        // if the stack is empty
        if (s.isEmpty())
        {
            System.out.println("Underflow!!");
            System.exit(0);
        }
 
        // pop an item from the stack
        T top = s.pop();
 
        // if the stack becomes empty, return the popped item
        if (s.isEmpty()) {
            return top;
        }
 
        // recur
        T item = dequeue();
 
        // push popped item back into the stack
        s.push(top);
 
        // return the result of dequeue() call
        return item;
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        int[] keys = { 1, 2, 3, 4, 5 };
        Queue<Integer> q = new Queue<Integer>();
 
        // insert the above keys into the queue
        for (int key: keys) {
            q.enqueue(key);
        }
 
        System.out.println(q.dequeue());    // print 1
        System.out.println(q.dequeue());    // print 2
    }
}


