r: Repeated question (solution is directly taken, no code tracing)
X: for the moment it is out of topic
R: Revise, does not understand clearly
[QTA]: Couldn't understand concept, might have issue with solution provided

start from Q7
d: Code tracing done
D: Code tracing done + Understand concept clearly
P: Own solution succesfully run

# Only 1 type
#<> A collection of similar type question

==============================================================================
/X/
Recursion: 7,8

#<Stack Implementation>
@ Array
class Stack{
  private int arr[];
  private int top;
  private int capacity;
  
  Stack(int size){
    arr = new int [size];
    capacity = size;
    top = -1;
  }
  
  1. push(int x){
        if(isFull()) {return;}
        arr[++top] = x;
     }
     
   2. pop(){
        if(isEmpty()) {return;}
        return arr[top--];
      }
      
    3. peek(){
          if(isEmpty()) {return;}
          return arr[top];
        }
        
    4. size() {return top+1;}
    
    5. isEmpty() {return top == -1;}
    
    6. isFull() {return top == capacity-1;}
      
@ LinkedList

class Node  {
    int data;
    Node next;
}

class Stack {
    private Node top;
    private int nodesCount;
    
    public Stack()  {
        this.top = null;
        this.nodesCount = 0;
    }
    
    1. push(int x){
      Node node = new Node();
      if(node==null) {return;}
      node.data = x;
      node.next = top;
      top = node;
      this.nodesCount += 1;
      }
      
      2. isEmpty() {return top == null;}
      
      3. peek(){
      if (isEmpty()){return;}
      return top.data;
      }
      
      4. pop(){
      if (isEmpty()) {return;}
      int top = peek();
      this.nodesCount -= 1;
      this.top = (this.top).next;
      return top;
      }
      
      5. size() {return this.nodesCount;}
}
      
@ 2Queue
class Stack<T>
{
  Queue<T> q1, q2;
  
  public Stack()
  {
    q1 = new ArrayDequeue<>();
    q2 = new ArrayDequeue<>();
  }
  
  1. add(T data){
          while (!q1.isEmpty())
          {
              q2.add(q1.peek());
              q1.poll();
          }
          q1.add(data);
          while (!q2.isEmpty())
          {
              q1.add(q2.peek());
              q2.poll();
          }
      }
      @@
      add(T data) {q1.add(data);}
    
    2. T poll(){
        if (q1.isEmpty()) {return;}
            T front = q1.peek();
            q1.poll();
            return front;
       }
       @@
       T poll(){
          if (q1.isEmpty()) {return;}
          T front = null;
          
          while (!q1.isEmpty()){
              if(q1.size() == 1) {front = q1.peek();}
              else {q2.add (q1.peek();}
              q1.poll();
          }
          
          while (!q2.isEmpty()) {
              q1.add(q2.peek());
              q2.poll();
          }
          
          return front;
      }

@ 1Queue
class Stack<T>
{
    Queue<T> q;
    
    public Stack()  {
        q = new ArrayDequeue<>();
    }
    
    1. add(T data)  {
           q.add(data);
        }
        
     2. reverseQueue() {            //#
          //base case
          if(q.isEmpty()){ return;}
          T front = q.peek();
          q.poll();
          reverseQueue();
          q.add(front);
        }
        
      3. poll() {
              if(q.isEmpty()) {return;}
              reverseQueue();
              T front = q.peek();
              q.poll();
              reverseQueue();
              return front;
          }
 
#Implement Queue Using Stack
@ 2stacks
class Queue<T>{
    private Stack<T> s1, s2;
    
    Queue(){
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    1. void enqueue (T data){
          while (!s1.isEmpty()) {s2.push(s1.pop());}
          s1.push(data);
          while (!s2.isEmpty()) {s1.push(S2.pop());}
       }
       @@
       void enqueue (T data){
          s1.push(data);
       }
       
     2. T dequeue() {
            if (s1.isEmpty()) {return;}
            return s1.pop();
        }
        @@
        T dequeue() {
            if(s1.isEmpty() && s2.isEmpty()) {return;}
            if(s2.isEmpty()) {
                while (!s1.isEmpty()){
                    s2.push(s1.pop());
                 }
             }
             return s2.pop();
         }
        
@ 1stack
class Queue<T> {
    Queue() {
        s = new Stack<>();
    }
    
    1. void enqueue (T data) {s.push(data);}
    
    2. T dequeue() {
          if (s.isEmpty()) {return;}
          T top = s.pop();
          if (s.isEmpty()) {return top;}
          T item = dequeue();
          s.push(top)
          return item;
       }
       
# Minimum Element
@ 2 stacks
class MinStack{
    private Stack<Integer> s;
    private Stack<Integer> aux;
    
    public MinStack(){
        s = new Stack<>();
        aux = new Stack<>();
    }
    
    1. void push(int val){
            s.push(val;)
            if (aux.isEmpty()) {aux.push(val);}
            else{
                if (aux.peek() >= val) {aux.push(val);}
            }
        }
        
     2. int pop () {
            if (isEmpty()) {return;}
            int top = s.pop();
            if (top == aux.peek()) {aux.pop();}
            return top;
        }
        
     3. int top() {return s.peek();}
     
     4. int size() {return s.size();}
     
     5. boolean isEmpty() {return s.isEmpty();}
     
     6. int getMin() {
            if (aux.isEmpty()) {return;}
            return aux.peek();
        }

@ 1 stack
class MinStack { 
    private Stack<Integer> s = new Stack<>();
    private int min;
    1. void push (int val)
            if(s.empty()) {
                s.push(val);
                min = val;
             }
             else if (val > min){
                 s.push(val);
             }
             else {
                 s.push(2*val - min);
                 min = val;
             }
         }
     
     2. void pop()
            if(s.empty()) {return;}
            int top = s.peek();
            if(top < min){
                min = 2*min - top;
            }
            s.pop();
        }
        
      3. int getMin(){
              return min;
          }
        
# Implement 2 stacks in 1 array
class Stack {
    private int[] arr;
    private int capacity;
    private int top1, top2;
    
    public Stack (int n) {
            capacity = n;
            arr = new int [n];
            top1 = -1;
            top2 = n;
     }
     
     1. void pushFirst(int key){
            if (top1 + 1 == top2) {return;}
            top1++;
            arr[top1] = key;
        }
     
     2. void pushSecond(int key){
            if (top1 + 1 == top2) {return;}
            top2--;
            arr[top2] == key;
        }
        
     3. int popFirst(){
            if (top1 < 0) {return;}
            int top = arr[top1];
            top1--;
            return top;
         }
     
     4. int popSecond(){
            if(top2 >= capacity) {return;}
            int top = arr[top2];
            top2++;
            return top;
        }
        
# Recursive Solution to Sort a Stack
public static void sortedInsert (Stack<Integer> stack, int key){
        if (stack.isEmpty() || key > stack.peek()){
                stack.push(key);
                return;
         }
         int top = stack.pop();
         sortedInsert(stack, key);
         stack.push(top);
}

public static void sortStack (Stack<Integer> stack){
        if(stack.isEmpty()) {return;}
        int top = stack.pop();
        sortStack(stack);
        sortedInsert(stack, top);
        
# Reverse String
String reverse(String str){
  Stack <Character> stack = new Stack<>();
  
  char[] chars = str.toCharArray();
  for (char c:chars) {str.toCharArray();}
  
  for(int i = 0; i<str.length(); i++) {chars[i] = stack.pop();}
  return new String(chars);
}

# Check Expression Balanced
@1
boolean isBalanced(String exp){
  if(exp == null || exp.length()%2 == 1) {return false;}
  Stack<Character> stack = new Stack<>();
  
  for(char c : exp.toCharArray()){
      if (c == '(' || c == '{' || c == '['){
          stack.push(c);
      }
      
      if (c == ')' || c == '}' || c == ']'){
        if (stack.empty()) {return false;}
        Character top = stack.pop();
        if ((top == '(' && c != ')') || (top == '{' && c != '}')|| (top == '[' && c != ']')) {return false;}
      }
    }
     return stack.empty();
}

@2
for (char ch: exp.toCharArray()){
        if (ch == '(') {stack.push(')');}
        else if (ch == '{') {stack.push('}');}
        else if (ch == '[') {stack.push(']');}
        else if (stack.isEmpty() || stack.pop() != ch) {return false;}
}

# Duplicate Parenthesis

class Main{
  public static boolean hasDuplicateParenthesis (String exp){
    if (exp == null || exp.length() <= 3) {return false; }
    Stack<Character> stack = new Stack<>();
    for (char c: exp.toCharArray()){
      if (c != ')') {stack.push(c);}
      else{
        if(stack.peek() == ')') {return true;}
        while(stack.peek() != '(') {stack.pop();}
      }
      stack.pop();
      }
    }
    return false;
  }
}

# Evaluate Postfix Expression
class Main{
  public static int evalPostfix(String exp){
    if (exp == null || exp.length() == 0){return;}
    Stack<Integer> stack = new Stack<>();
    for(char c: exp.toCharArray()) {
      if(Character.isDigit(c)) {stack.push(c - '0');}
      else{
        int x = stack.pop();
        int y = stack.pop();
        
        if (c == '+') {stack.push(y+x);}
        else if (c == '-') {stack.push(y-x);}
        else if (c == '*') {stack.push(y*x);}
        else if (c == '/) {stack.push(y/x);}
      }
  }
}
  
# Decode a given sequence to construct a minimum number without repeated digits
public static String decode (String seq) {
  if(seq == null || seq.length() == 0) {return seq;}
  StringBuilder result = new StringBuilder();
  Stack<Integer> stack = new Stack<>();
  for (int i = 0; i <= seq.length(); i++) {
    stack.push(i+1);
    if (i == seq.length() || seq.charAt(i) == 'I') {
      while (!stack.empty()) {
        result.append(stack.pop());
      }
    }
  }
  return result.toString();
}

# Merging Overlapping Intervals

class Interval {
  int begin, end;
  
  Interval (int begin, int end) {
    this.begin = begin;
    this.end = end;
  }
  
  public String toString() {return "{" + begin + ", " + end + "}";}
}

class Main {
//public static
  1. void mergeIntervals (List<Interval> intervals) {
        Collections.sort(intervals, Comparator.comparingInt(a -> a.begin));
        Stack <Interval> stack = new Stack<>();
        for(Interval curr: intervals){
          if(stack.empty() || curr.begin > stack.peek().end){
            stack.push(curr);
          }
          
          if(stack.peek().end < curr.end){
            stack.peek().end = curr.end;
          }
        }
        while(!stack.empty()) {S.o.println(stack.pop());}
       }
       
psvm{ List<Intervals> intervals = Arrays.asList (new Interval(1,3), new Interval(2,3)...);
      mergeIntervals(intervals);
    }

# Infix to Postfix
//public static
1. int prec (char c) {
      if (c == '*' || c == '/') {return 3;}
      if (c == '+' || c == '-') {return 4;}
      if (c == '&') {return 8;} //AND
      if (c == '^') {return 9;} //XOR
      if (c == '|') {return 10;} //or
      return Integer.MAX_VALUE; //for '('
  }
  
2. boolean isOperand (char c) {
      return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'); }

3. String infixToPostFix (String infix) {
      if (infix == null || infix.length() == 0) {return infix;}
      Stack<Character> s = new Stack <>();
      String postfix = "";
      for (char c : infix.toCharArray()) {
          if (c=='(') {s.add(c);}
          else if (c==')') {
              while (s.peek() != '(') {postfix += s.pop();}
          }
          else if (isOperand(c)) { postfix += c;}
          else{
              while (!s.isEmpty() && prec(c) >= prec(s.peek())) {
                    postfix += s.pop();
                }
                s.add(c);
          }
      }
      while(!s.isEmpty()) {postfix += s.pop();}
      return postfix;
  }
  
Case 1. If the current token is an opening bracket '(', push it into the stack
Case 2. If the current token is a closing bracket ')', pop tokens from the stack until the corresponding opening bracket '(' is removed. Append each operator at the end of the postfix expression
Case 3. If the current token is an operand, append it at the end of the postfix expression
Case 4. If the current token is an operator,  remove operators from the stack with higher or equal precedence and append them at the end of the postfix expression
               
# Next Greater Element for every element in a circulae array
public static int[] findNextGreater (int[] input){
    if (input==null) {return input;}
    int n = input.length;
    int[] out = new int[n];
    Arrays.fill(out, -1;}
    Stack<Integer> s = new Stack<>();
    @1
    for (int i = 0; i<2*n; i++) {
        while (!s.isEmpty() && input[s.peek()] < input[i%n]){
            out[s.pop()] = input[i%n];
        }
        s.add(i%n);
    }
    
    @2
    for (int i = 2*n -1; i>=0; i--) {
        while (!s.isEmpty()){
            if (s.peek() <= input[i%n]) {s.pop();}
            else {
              out[i%n] = s.peek();
              break;
            }
        }
        s.add(input[i%n]);
    }
    @     
    return out;
}

# Next Greater Element for every array element
@1
public static int[] findNextGreaterElements(int[] input){
    if (input == null) {return input;}
    int[] result = new int[input.length];
    Arrays.fill(result, -1);
    Stack<Integer> s = new Stack<>();
    
    for (int i = 0; i<input.length; i++) {
        while (!s.isEmpty() && input[s.peek()] < input[i]) {
            result[s.pop()] = input[i];
        }
        s.push(i);
    }
    return result;
 }
 
@2
public static int[] findNextGreaterElements(int[] input){
    if (input == null) {return input;}
    int n = input.length;
    int[] result = new int [n];
    Arrays.fill(result, -1);
    Stack<Integer> s = new Stack<>();
    for (int i = n-1; i>=0; i--) {
        while (!s.empty()) {
          if (s.peek() <= input[i]) {s.pop();}
          else {
              result[i] = s.peek();
              break;
          }
        }
        s.push(input[i]);
    }
    return result;
}

# Previous Smaller Element for each array element
@1 Brute-Force Approach
public static void findPrevSmaller(int[] arr) {
    if (arr == null || arr.length == 0) {return;}
    for(int i = 0; i<arr.length; i++) {
      int prev = -1;
      for(int j = i-1; j>=0; j--) {
        if (arr[j] < arr[i]) {
          prev = arr[j];
          break;
        }
      }
      System.out.print(prev + " ");
    }
}

@2 Using Stack
public static void findPrevSmaller (int[] arr) {
  if (arr==null || arr.length == 0) {return;}
  Stack<Integer> s = new Stack<>();
  for (int i = 0; i<arr.length; i++){
    while (!s.empty()) {
      if (s.peek() < arr[i]) {
        S.o.p(s.peek() + " ");
        break;
      }else{
        s.pop();
      }
    }
    if (s.empty()) {System.out.print(-1 + " ");}
    s.push (arr[i]);
  }
}

# Find all elements greater than all elements to their right
@1 2Loops
public static void find (int[] arr){
  if (arr == null || arr.length == 0) {return;}
  Stack<Integer> stack = new Stack<>();
  for (int value : arr) {
      while (!stack.isEmpty() && stack.peek() < value) {stack.pop();}
      stack.push (value);
  }
  
  while (!stack.isEmpty()) {S.o.p(stack.pop() + " ");}
}

@2 Constant space
public static void find (int[] arr) {
  if (arr == null || arr.length == 0) {return;}
  int max_so_far = Integer.MIN_VALUE;
  for(int i = arr.length-1; i>=0; i--) {
    if (arr[i] >= max_so_far) {
      max_so_far = arr[i];
      S.o.printf("%d ", arr[i]);
    }
  }
}

# Iterative Implementation of Quicksort
class Pair {
  private final int x;
  private final int y;
  
  Pair(int x, int y) {
    this.x = x;
    this.y = y;
  }
  
  public int getX() {return x;}
  public int getY() {return y;}
}

class Main {
//public static
  1. void swap (int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
     }
     
   2. int partition (int a[], int start, int end) {
          int pivot = a[end];
          int pIndex = start;
          for(int i = start; i<end; i++){
            if(a[i] <= pivot) {
              swap(a, i, pIndex);
              pIndex++;
            }
          }
          swap (a, pIndex, end);
          return pIndex;
      }
      
    3. void IterativeQuicksort (int[] a){
          Stack<Pair> stack = new Stack<>();
          int start = 0;
          int end = a.length - 1;
          stack.push(new Pair(start, end));
          while (!stack.empty()) {
            start = stack.peek().getX();
            end = stack.peek().getY();
            stack.pop();
            int pivot = partition(a, start, end);
            if (pivot - 1 > start) {
                stack.push(new Pair(start, pivot - 1));
            }
            if (pivot + 1 < end) {
                stack.push(new Pair(pivot + 1, end));
            }
        }
        
# Find all bianry strings that can be formed from a wildcard pattern
@1 Recursive
private static void printAllCombinations (char[] pattern, int i) {
  if (pattern == null || pattern.length == 0) {return;}
  if (i == pattern.length) {
      S.o.println(pattern);
      return;
  }
  if (pattern[i] == '?') {
    for (char ch = '0'; ch <= 'i'; ch++) {
      pattern[i] = ch;
      printAllCombinations(pattern, i+1);
      pattern[i] = '?';
    }
   }else { printAllCombinations(pattern, i+1);}
}

@2 Iterative
public static void printAllCombinations (String pattern) {
    if (pattern == null || pattern.length() == 0) {return;}
    Stack<String> stack = new Stack<>();
    stack.push(pattern);
    int index;
    while (!stack.empty()) {
      String curr = stack.pop();
      if ((index = curr.indexOf('?')) != -1) {
        for (char ch = '0'; ch <= '1'; ch++) {
          curr = curr.substring(0,index) + ch + curr.substring(index+1);
          stack.push(curr);
        }
      }
      else {S.o.println(curr); }
    }
}

# Find length of longest balanced parenthesis in a string
public static int findMaxLen (String str) {
    if (str == null) {return 0;}
    Stack<Integer> stack = new Stack<>();
    stack.push(-1);
    int len = 0;
    for (int i = 0; i<str.length(); i++) {
        if (str.charAt(i) == '(') {stack.push(i);}
        else{
          stack.pop();
          if (stack.empty()) {
            stack.push(i);
            continue;
          }
        }
        int curr_len = i - stack.peek();
        if (len<curr_len) {
            len = curr_len;
        }
      }
    }
    return len;
  }
 
# Reverse text without reversing individual words
@1
public static String reverseText(String s) {
  if (s == null || s.length() == 0) {return s;}
  int low = 0, high = 0;
  Stack<String> stack = new Stack<>();
  for (int i = 0; i<s.length(); i++) {
    if (s.charAt(i) == ' ') {
      stack.push(s.substring(low, high+1));
      low = high = i+1;
    }
    else {high = i;}
  }
  stack.push(s.substring(low));
  StringBuilder sb = new StringBuilder();
  while (!stack.empty()) {sb.append(stack.pop()).append(' ');}
  return sb.substring(0, sb.length()-1);
}

@2 -> Improve space complexity
The idea is to in-place reverse each word present in the input text and finally reverse the whole text to get the desired output. For instance,

Input text: Preparation Interview Technical
 
1. Reverse each word:
noitaraperp weivretnI lacinhceT TI rof lairetam doog edivorp eW
 
2. Reverse the whole text:
Technical Interview Preparation
The time complexity of this solution would be O(n) and doesn’t require any extra space. The problem with this approach is that it violates the problem constraints and does three traversals of the input text instead of just on

private static void swap (char[] chars, int i, int j) {
  char temp = chars [i];
  chars [i] = chars [j];
  chars [j] = temp;
}

public static void reverseText (char[] chars, int begin, int end) {
    while (begin<end) {swap(chars, begin++, end--);}
}

public static String reverseText(String str) {
    if (str == null || str.length() == 0) {
        return str;
    }
    
    char[] chars = str.toCharArray();
    int low = 0, high = 0;
    for (int i = 0; i<chars.length; i++) {
      if (chars[i] == ' ') {
        reverseText(chars, low, high);
        low = high = i + 1;
      }
      else {high = i;}
    }
    reverseText(chars, low, high);
    reverseText(chars, 0, chars.length - 1);
    return new String(chars);
  }

Q16onwards
C++ only: 20,21


        
        
    
       
       
            
    
          
         
      
      
      
      
      
      
