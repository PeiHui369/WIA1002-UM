Iterative solution to reverse a string in C++ and Java
Google Translate Icon
Write an iterative program to reverse a string in C++ and Java.

For example,

Input:  Hello, World
 
Output: dlroW ,olleH
1. Using built-in methods
A simple approach is to use strrev() function in C, or std::reverse in C++, or StringBuilder.reverse() method in Java.


import java.lang.StringBuilder;
 
class Main
{
    public static void main (String[] args)
    {
        String str = "Hello, World";
        String rev = new StringBuilder(str).reverse().toString();
 
        System.out.println("The reverse of the given string is " + rev);
    }
}
Download  Run Code

2. Using Stack
We can easily reverse a given string using the stack data structure. The idea is to push each character of the string into a stack and then start filling the input string (starting from index 0) by popping characters from the stack until it is empty.

Following is the C++ and Java implementation of the idea:


import java.util.Stack;
 
class Main
{
    // Iterative function to reverse a given string.
    public static void reverse(char[] c)
    {
        // create an empty stack of characters
        Stack<Character> stack = new Stack<>();
 
        // push each character of the given string into the stack
        for (int i = 0; i < c.length; i++) {
            stack.push(c[i]);
        }
 
        // start from index 0
        int k = 0;
 
        // pop characters from the stack until it is empty
        while (!stack.empty())
        {
            // assign each popped character back to the input string
            c[k++] = stack.pop();
        }
    }
 
    public static void main(String[] args)
    {
        String str = "Hello, World";
 
        char[] c = str.toCharArray();
        reverse(c);
        str = new String(c);
 
        System.out.print("Reverse of the given string is " + str);
    }
}
Download  Run Code

The time complexity of the above solution is O(n) and the auxiliary space used by the program is O(n) for stack.

3. In-place conversion
The above solution takes O(n) for stack data structure which is not recommended. We can easily solve this problem in linear time and constant space. Following is the iterative in-place solution in C++ and Java:


class Main
{
    // Utility function to swap elements `A[i]` and `A[j]` in a given
    // character array `A`
    private static void swap(char[] A, int i, int j)
    {
        char c = A[i];
        A[i] = A[j];
        A[j] = c;
    }
 
    // Iterative function to reverse a given string
    public static void reverse(char[] c)
    {
        // start with two endpoints of the given string
        int begin = 0;
        int end = c.length - 1;
 
        // do till two end-points intersect
        while (begin < end) {
            swap(c, begin++, end--);
        }
    }
 
    public static void main(String[] args)
    {
        String str = "Hello, World";
 
        char[] c = str.toCharArray();
        reverse(c);
        str = new String(c);
 
        System.out.print("Reverse of the given string is " + str);
    }
}
Download  Run Code

