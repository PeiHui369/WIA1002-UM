Construction of an expression tree
Google Translate Icon
Construct an expression tree from a given postfix notation and print the infix notation.

The binary expression tree is a binary tree whose leaves are operands, such as constants or variable names, and the other nodes contain operators.

For example, the postfix notation a b + c d e + * * results in the following expression tree. The corresponding infix notation is (a+b)*(c*(d+e)) which can be produced by traversing the expression tree in an inorder fashion. However, an opening and closing parenthesis must be added at the beginning and end of each expression (every subtree represents a subexpression).

Expression Tree

Practice This Problem

The construction of the expression tree takes place by reading the postfix expression one symbol at a time. If the symbol is an operand, a new binary tree node is created, and its pointer is pushed onto a stack. If the symbol is an operator, the pointers to two trees, x and y, are popped from the stack, and a new tree whose root is the operator and whose left and right children point to y and x, respectively is formed. A pointer to this new tree is then pushed to the stack. In the end, a pointer to the full expression tree remains on the stack.

The algorithm can be implemented as follows in C++, Java, and Python:


import java.util.Stack;
 
// Data structure to store a binary tree node
class Node
{
    char data;
    Node left, right;
 
    Node(char data)
    {
        this.data = data;
        this.left = this.right = null;
    }
 
    Node(char data, Node left, Node right)
    {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}
 
class Main
{
    // Function to check if a given token is an operator
    public static boolean isOperator(char c) {
        return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
    }
 
    // Print the postfix expression for an expression tree
    public static void postorder(Node root)
    {
        if (root == null) {
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data);
    }
 
    // Print the infix expression for an expression tree
    public static void inorder(Node root)
    {
        if (root == null) {
            return;
        }
 
        // if the current token is an operator, print open parenthesis
        if (isOperator(root.data)) {
            System.out.print("(");
        }
 
        inorder(root.left);
        System.out.print(root.data);
        inorder(root.right);
 
        // if the current token is an operator, print close parenthesis
        if (isOperator(root.data)) {
            System.out.print(")");
        }
    }
 
    // Function to construct an expression tree from the given postfix expression
    public static Node construct(String postfix)
    {
        // base case
        if (postfix == null || postfix.length() == 0) {
            return null;
        }
 
        // create an empty stack to store tree pointers
        Stack<Node> s = new Stack<>();
 
        // traverse the postfix expression
        for (char c: postfix.toCharArray())
        {
            // if the current token is an operator
            if (isOperator(c))
            {
                // pop two nodes `x` and `y` from the stack
                Node x = s.pop();
                Node y = s.pop();
 
                // construct a new binary tree whose root is the operator and whose
                // left and right children point to `y` and `x`, respectively
                Node node = new Node(c, y, x);
 
                // push the current node into the stack
                s.add(node);
            }
            // if the current token is an operand, create a new binary tree node
            // whose root is the operand and push it into the stack
            else {
                s.add(new Node(c));
            }
        }
 
        // a pointer to the root of the expression tree remains on the stack
        return s.peek();
    }
 
    public static void main(String[] args)
    {
        String postfix = "ab+cde+**";
        Node root = construct(postfix);
 
        System.out.print("Postfix Expression: ");
        postorder(root);
 
        System.out.print("\nInfix Expression: ");
        inorder(root);
    }
}
Download  Run Code

Output:

Postfix Expression: ab+cde+**
Infix Expression: ((a+b)*(c*(d+e)))

The time complexity of the above solution is O(n) and requires O(n) extra space for the stack, where n is the length of the postfix expression.
