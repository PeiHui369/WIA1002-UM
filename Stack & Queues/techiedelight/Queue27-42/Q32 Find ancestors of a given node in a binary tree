Find ancestors of a given node in a binary tree
Google Translate Icon
Given a binary tree, find all ancestors of a given node in it.

For example, consider the following binary tree:

 
Root To Leaf Paths in Binary Tree

The ancestor of node 9 are 7, 3 and 1
The ancestor of node 6 is 3 and 1
The ancestor of node 5 is 2 and 1
… …
Practice This Problem

Recursive Solution
The idea is to traverse the tree in a postorder fashion and search for a given node in the tree. For any node, if the given node is found in either its left subtree or its right subtree, then the current node is an ancestor of it. The algorithm can be implemented as follows in C++, Java, and Python:


// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to print all ancestors of a given node in a binary tree.
    // The function returns true if the node is found in the subtree rooted at the
    // given root node.
    public static boolean printAncestors(Node root, Node node)
    {
        // base case
        if (root == null) {
            return false;
        }
 
        // return true if a given node is found
        if (root == node) {
            return true;
        }
 
        // search node in the left subtree
        boolean left = printAncestors(root.left, node);
 
        // search node in the right subtree
        boolean right = false;
        if (!left) {
            right = printAncestors(root.right, node);
        }
 
        // if the given node is found in either left or right subtree,
        // the current node is an ancestor of a given node
        if (left || right) {
            System.out.print(root.data + " ");
        }
 
        // return true if a node is found
        return left || right;
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                  1
                /   \
               /     \
              2       3
               \     / \
                4   5   6
                   / \
                  7   8
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        Node node = root.right.left.left;    // Node 7
        printAncestors(root, node);
    }
}
Download  Run Code

Output:

5 3 1

The time complexity of the above solution is O(n), where n is the total number of nodes in the binary tree. The program requires O(h) extra space for the call stack, where h is the height of the tree.

Iterative Solution
The idea is to maintain a map to store the parent node of all nodes present in the tree. Then perform an iterative preorder traversal on the tree and set the parent pointer of each node. Finally, print ancestors of the given key by using a parent map.

Following is the implementation of the above approach in C++, Java, and Python:


import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;
 
// A class to store a binary tree node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Function to print root-to-leaf paths without using recursion
    public static void printTopToBottomPath(Map<Node, Node> parent, Node node)
    {
        while ((node = parent.get(node)) != null) {
            System.out.print(node.data + " ");
        }
    }
 
    // Iterative function to set parent nodes for all nodes of the binary tree
    // in a given map. The function is similar to the iterative preorder traversal
    public static void setParent(Node root, Map<Node, Node> parent)
    {
        // create an empty stack and push the root node
        Deque<Node> stack = new ArrayDeque<>();
        stack.add(root);
 
        // loop till stack is empty
        while (!stack.isEmpty())
        {
            // Pop the top item from the stack
            Node curr = stack.pollLast();
 
            // push its right child into the stack and set its parent on the map
            if (curr.right != null)
            {
                parent.put(curr.right, curr);
                stack.add(curr.right);
            }
 
            // push its left child into the stack and set its parent on the map
            if (curr.left != null)
            {
                parent.put(curr.left, curr);
                stack.add(curr.left);
            }
        }
    }
 
    // Iterative function to print all ancestors of a given node in a binary tree
    public static void printAncestors(Node root, Node node)
    {
        // base case
        if (root == null) {
            return;
        }
 
        // create an empty map to store parent pointers of binary tree nodes
        Map<Node, Node> parent = new HashMap<>();
 
        // set the parent of the root node as null
        parent.put(root, null);
 
        // set parent nodes for all nodes of the binary tree
        setParent(root, parent);
 
        // print ancestors of a given node using the parent map
        printTopToBottomPath(parent, node);
    }
 
    public static void main(String[] args)
    {
        /* Construct the following tree
                1
              /   \
             /     \
            2       3
             \     / \
              4   5   6
                 / \
                7   8
        */
 
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.right = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.left = new Node(7);
        root.right.left.right = new Node(8);
 
        Node node = root.right.left.left;    // Node 7
        printAncestors(root, node);
    }
}
Download  Run Code

Output:

5 3 1

The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the binary tree
