Given a balanced expression that can contain opening and closing parenthesis, check if it contains any duplicate parenthesis or not.

For example,

Input:  ((x+y))+z
Output: true
Explanation: Duplicate () found in subexpression ((x+y))
 
 
Input:  (x+y)
Output: false
Explanation: No duplicate () is found
 
 
Input:  ((x+y)+((z)))
Output: true
Explanation: Duplicate () found in subexpression ((z))

We can use a stack to solve this problem. The idea is to traverse the given expression and

If the current character in the expression is not a closing parenthesis ')', push the character into the stack.
If the current character in the expression is a closing parenthesis ')', check if the topmost element in the stack is an opening parenthesis or not. If it is an opening parenthesis, then the subexpression ending at the current character is of the form ((exp)); otherwise, continue popping characters from the stack till matching '(' is found for current ')'.

-------------------------------------------------------
import java.util.Stack;
 
class Main
{
    // Function to find duplicate parenthesis in an expression
    public static boolean hasDuplicateParenthesis(String exp)
    {
        if (exp == null || exp.length() <= 3) {
            return false;
        }
 
        // take an empty stack of characters
        Stack<Character> stack = new Stack<>();
 
        // traverse the input expression
        for (char c: exp.toCharArray())
        {
            // if the current char in the expression is not a closing parenthesis
            if (c != ')') {
                stack.push(c);
            }
            // if the current char in the expression is a closing parenthesis
            else {
                // if the stack's top element is an opening parenthesis,
                // the subexpression of the form ((exp)) is found
                if (stack.peek() == '(') {
                    return true;
                }
 
                // pop till '(' is found for current ')'
                while (stack.peek() != '(') {
                    stack.pop();
                }
 
                // pop '('
                stack.pop();
            }
        }
 
        // if we reach here, then the expression does not have any
        // duplicate parenthesis
        return false;
    }
 
    public static void main(String[] args)
    {
        String exp = "((x+y))";        // assumes valid expression
 
        if (hasDuplicateParenthesis(exp)) {
            System.out.println("The expression has duplicate parenthesis.");
        }
        else {
            System.out.println("The expression does not have duplicate parenthesis");
        }
    }
}

Output:

The expression has duplicate parenthesis
