A simple solution would be to divide the array into two halves and allocate each half to implement two stacks. 
In other words, for an array A of size n, the solution would allocate A[0, n/2] memory for the first stack and A[n/2+1, n-1] memory for the second stack. 
The problem with this approach is that it doesnâ€™t efficiently utilize the available space in the array.
For instance, if one half of the array is full, any subsequent push operations would lead to a stack overflow exception even though the other half has space available.

 To handle this, we can grow stacks from two extreme corners of the array. 
 In other words, the first stack grows from the 0'th index, and the second stack grows from the (n-1)'th index, where n is the array size. 
 Both stacks can grow towards each other with no fixed capacity. 
 Now overflow will only happen if both stacks are full (i.e., top elements of both stacks are adjacent), and there is no space left in the array to accommodate a new element
 
 import java.util.Arrays;
import java.util.List;
 
class Stack
{
    private int[] arr;
    private int capacity;
    private int top1, top2;
 
    // Constructor
    public Stack(int n)
    {
        capacity = n;
        arr = new int[n];
        top1 = -1;
        top2 = n;
    }
 
    // Function to insert a given element into the first stack
    public void pushFirst(int key)
    {
        // check if the array is full
        if (top1 + 1 == top2)
        {
            System.out.println("Stack Overflow");
            System.exit(-1);
        }
 
        top1++;
        arr[top1] = key;
    }
 
    // Function to insert a given element into the second stack
    public void pushSecond(int key)
    {
        // check if the array is full
        if (top1 + 1 == top2)
        {
            System.out.println("Stack Overflow");
            System.exit(-1);
        }
 
        top2--;
        arr[top2] = key;
    }
 
    // Function to pop an element from the first stack
    public int popFirst()
    {
        // if no elements are left in the array
        if (top1 < 0)
        {
            System.out.println("Stack Underflow");
            System.exit(-1);
        }
 
        int top = arr[top1];
        top1--;
        return top;
    }
 
    // Function to pop an element from the second stack
    public int popSecond()
    {
        // if no elements are left in the array
        if (top2 >= capacity)
        {
            System.out.println("Stack Underflow");
            System.exit(-1);
        }
 
        int top = arr[top2];
        top2++;
        return top;
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> list2 = Arrays.asList(6, 7, 8, 9, 10);
 
        Stack stack = new Stack(list1.size() + list2.size());
 
        for (int i: list1) {
            stack.pushFirst(i);
        }
 
        for (int j: list2) {
            stack.pushSecond(j);
        }
 
        System.out.println("Popping element from the first stack: " + stack.popFirst());
        System.out.println("Popping element from the second stack: " + stack.popSecond());
    }
}
