@ Design a stack that returns the minimum element in constant time

The first solution that appears in mind is to have a member variable in a stack to keep track of the minimum number. Unfortunately, this won’t work as we can’t get the next minimum number after the minimum one is popped.

 
The correct approach uses two stacks – the main stack to store the actual stack elements and an auxiliary stack to store the required elements needed to determine the minimum number in constant time. This implementation requires few changes in push and pop operations:

1. Push operation

The idea is to push the new element into the main stack and push it into the auxiliary stack only if the stack is empty or the new element is less than or equal to the current top element of the auxiliary stack.

2. Pop operation

For pop operation, remove the top element from the main stack and remove it from the auxiliary stack only if it is equal to the current minimum element, i.e., a top element of both the main stack and the auxiliary stack is the same. After the minimum number is popped, the next minimum number appears on the top of the auxiliary stack.

3. Min operation

The top of the auxiliary stack always returns the minimum number since we are pushing the minimum number into the auxiliary stack and removing the minimum number from the auxiliary stack only if it is removed from the main stack.

 
import java.util.Stack;
 
class MinStack
{
    private Stack<Integer> s;       // main stack to store elements
    private Stack<Integer> aux;     // auxiliary stack to store minimum elements
 
    // Constructor
    public MinStack()
    {
        s = new Stack<>();
        aux = new Stack<>();
    }
 
    // Inserts a given element on top of the stack
    public void push(int val)
    {
        // push the given element into the main stack
        s.push(val);
 
        // if the auxiliary stack is empty, push the given element into it
        if (aux.isEmpty()) {
            aux.push(val);
        }
        else {
            // push the given element into the auxiliary stack
            // if it is less than or equal to the current minimum
            if (aux.peek() >= val) {
                aux.push(val);
            }
        }
    }
 
    // Removes the top element from the stack and returns it
    public int pop()
    {
        if (isEmpty())
        {
            System.out.println("Stack underflow!!");
            System.exit(-1);
        }
 
        // remove the top element from the main stack
        int top = s.pop();
 
        // remove the top element from the auxiliary stack
        // only if it is minimum
        if (top == aux.peek()) {
            aux.pop();
        }
 
        // return the removed element
        return top;
    }
 
    // Returns the top element of the stack
    public int top() {
        return s.peek();
    }
 
    // Returns the total number of elements in the stack
    public int size() {
        return s.size();
    }
 
    // Returns true if the stack is empty; false otherwise
    public boolean isEmpty() {
        return s.isEmpty();
    }
 
    // Returns the minimum element from the stack in constant time
    public int getMin()
    {
        if (aux.isEmpty())
        {
            System.out.println("Stack underflow!!");
            System.exit(-1);
        }
 
        return aux.peek();
    }
}
 
class Main
{
    public static void main (String[] args)
    {
        MinStack s = new MinStack();
 
        s.push(6);
        System.out.println(s.getMin());    // prints 6
 
        s.push(7);
        System.out.println(s.getMin());    // prints 6
 
        s.push(8);
        System.out.println(s.getMin());    // prints 6
 
        s.push(5);
        System.out.println(s.getMin());    // prints 5
 
        s.push(3);
        System.out.println(s.getMin());    // prints 3
 
        System.out.println(s.pop());    // prints 3
        System.out.println(s.getMin());    // prints 5
 
        s.push(10);
        System.out.println(s.getMin());    // prints 5
 
        System.out.println(s.pop());    // prints 10
        System.out.println(s.getMin());    // prints 5
 
        System.out.println(s.pop());    // prints 5
        System.out.println(s.getMin());    // prints 6
    }
}
