Write an iterative version of the recursive Quicksort algorithm.

In the previous post, we have discussed the recursive implementation of the Quicksort algorithm. We have seen that the Quicksort recursion stack can be optimized using tail recursion to minimize the recursive depth. Tail recursion makes sure that at most O(log(n)) space is used by recursing first into the smaller side of the partition of size n, then using a tail call to recur into the other. Tail recursion should be recognized by the compiler and optimized to its iterative counterpart.

We have also talked about another recursive stack space optimization. The idea was that when the total number of elements in the subarray is below some threshold k (perhaps ten elements), switch to a non-recursive sorting algorithm such as insertion sort or stop processing the subarray and later perform insertion sort on it (in O(k.n) time), as each element will be at most k positions away from its final sorted position.

But despite these performance boosts, the algorithm remains recursive. How can we convert the algorithm into an iterative one? This post discusses its iterative implementation.

 
Instead of using recursion, the idea is to use a stack to store subarrayâ€™s starting and ending index for later processing. Note that the partitioning logic would remain the same.

----------------------------------
import java.util.Arrays;
import java.util.Stack;
 
// A simple pair class in Java
class Pair
{
    private final int x;
    private final int y;
 
    Pair(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
 
    public int getX() { return x; }
    public int getY() { return y; }
}
 
class Main
{
    public static void swap (int[] arr, int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
 
    public static int partition(int a[], int start, int end)
    {
        // Pick the rightmost element as a pivot from the array
        int pivot = a[end];
 
        // elements less than the pivot will go to the left of `pIndex`
        // elements more than the pivot will go to the right of `pIndex`
        // equal elements can go either way
        int pIndex = start;
 
        // each time we find an element less than or equal to the pivot,
        // `pIndex` is incremented, and that element would be placed
        // before the pivot.
        for (int i = start; i < end; i++)
        {
            if (a[i] <= pivot)
            {
                swap(a, i, pIndex);
                pIndex++;
            }
        }
 
        // swap `pIndex` with pivot
        swap (a, pIndex, end);
 
        // return `pIndex` (index of the pivot element)
        return pIndex;
    }
 
    // Iterative Quicksort routine
    public static void iterativeQuicksort(int[] a)
    {
        // create a stack for storing subarray start and end index
        Stack<Pair> stack = new Stack<>();
 
        // get the starting and ending index of the given array
        int start = 0;
        int end = a.length - 1;
 
        // push the start and end index of the array into the stack
        stack.push(new Pair(start, end));
 
        // loop till stack is empty
        while (!stack.empty())
        {
            // remove top pair from the list and get subarray starting
            // and ending indices
            start = stack.peek().getX();
            end = stack.peek().getY();
            stack.pop();
 
            // rearrange elements across pivot
            int pivot = partition(a, start, end);
 
            // push subarray indices containing elements that are
            // less than the current pivot to stack
            if (pivot - 1 > start) {
                stack.push(new Pair(start, pivot - 1));
            }
 
            // push subarray indices containing elements that are
            // more than the current pivot to stack
            if (pivot + 1 < end) {
                stack.push(new Pair(pivot + 1, end));
            }
        }
    }
 
    // Iterative Implementation of Quicksort
    public static void main(String[] args)
    {
        int a[] = { 9, -3, 5, 2, 6, 8, -6, 1, 3 };
 
        iterativeQuicksort(a);
 
        // print the sorted array
        System.out.println(Arrays.toString(a));
    }
}

Output:

[-6, -3, 1, 2, 3, 5, 6, 8, 9]

