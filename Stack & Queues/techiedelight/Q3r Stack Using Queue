This post will implement a stack using the queue data structure. In other words, design a stack that supports push and pop operations using standard enqueue and dequeue operations of the queue.

A stack is a Last–In, First–Out (LIFO) data structure in which elements are inserted and removed from one end of the stack known as the top of the stack. It has two major operations: The push operation, which adds an element into the stack, and the pop operation, which removes the most recently added element from the stack, but not yet removed.

There are several ways to implement a stack using one or two queues by tweaking their enqueue and dequeue operations.

@1 Using Two Queues
The idea is to implement the queue’s enqueue operation such that the last entered item always ends up at the queue’s front. To achieve this, we need an additional queue.

- To push an item into the stack, first move all elements from the first queue to the second queue, then enqueue the new item into the first queue, and finally move all elements back to the first queue. This ensures that the new item lies in front of the queue and hence would be the first one to be removed.
- To pop an item from the stack, return the front item from the first queue.

import java.util.ArrayDeque;
import java.util.Queue;
 
// Implement stack using two queues
class Stack<T>
{
    Queue<T> q1, q2;
 
    // Constructor
    public Stack()
    {
        q1 = new ArrayDeque<>();
        q2 = new ArrayDeque<>();
    }
 
    // Insert an item into the stack
    void add(T data)
    {
        // Move all elements from the first queue to the second queue
        while (!q1.isEmpty())
        {
            q2.add(q1.peek());
            q1.poll();
        }
 
        // Push the given item into the first queue
        q1.add(data);
 
        // Move all elements back to the first queue from the second queue
        while (!q2.isEmpty())
        {
            q1.add(q2.peek());
            q2.poll();
        }
    }
 
    // Remove the top item from the stack
    public T poll()
    {
        // if the first queue is empty
        if (q1.isEmpty())
        {
            System.out.println("Underflow!!");
            System.exit(0);
        }
 
        // return the front item from the first queue
        T front = q1.peek();
        q1.poll();
 
        return front;
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        int[] keys = { 1, 2, 3, 4, 5 };
 
        // insert the above keys into the stack
        Stack<Integer> s = new Stack<Integer>();
        for (int key: keys) {
            s.add(key);
        }
 
        for (int i = 0; i <= keys.length; i++) {
            System.out.println(s.poll());
        }
    }
}

// Note that the elements are exchanged between the queue twice for every push operation. This can impact performance if push operations are frequent. Here’s an alternative approach that affects the pop operation’s time complexity instead of the push operation.

- To push an item into the stack, enqueue the item to the first queue.
- To pop an item from the stack, move all elements from the first queue to the second queue except the last element, and then return the last element after moving all elements back to the first queue.

import java.util.ArrayDeque;
import java.util.Queue;
 
// Implement stack using two queues
class Stack<T>
{
    Queue<T> q1, q2;
 
    // Constructor
    public Stack()
    {
        q1 = new ArrayDeque<>();
        q2 = new ArrayDeque<>();
    }
 
    // Insert an item into the stack
    void add(T data)
    {
        // Push the given item into the first queue
        q1.add(data);
    }
 
    // Remove the top item from the stack
    public T poll()
    {
        // if the first queue is empty
        if (q1.isEmpty())
        {
            System.out.println("Stack Underflow!!");
            System.exit(0);
        }
 
        // Move all elements except last from the first queue to the second queue
        T front = null;
        while (!q1.isEmpty())
        {
            if (q1.size() == 1) {
                front = q1.peek();
            }
            else {
                q2.add(q1.peek());
            }
 
            q1.poll();
        }
 
        // Return the last element after moving all elements back to
        // the first queue
        while (!q2.isEmpty())
        {
            q1.add(q2.peek());
            q2.poll();
        }
 
        return front;
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        int[] keys = { 1, 2, 3, 4, 5 };
 
        // insert the above keys into the stack
        Stack<Integer> s = new Stack<Integer>();
        for (int key: keys) {
            s.add(key);
        }
 
        for (int i = 0; i <= keys.length; i++) {
            System.out.println(s.poll());
        }
    }
}

@2 Using one queue with call stack
We can also use an implicit stack (call stack) along with a queue to construct a stack,

import java.util.ArrayDeque;
import java.util.Queue;
 
// Implement stack using a single queue and recursion
class Stack<T>
{
    Queue<T> q;
 
    // Constructor
    public Stack() {
        q = new ArrayDeque<>();
    }
 
    // Insert an item into the stack
    public void add(T data) {
        q.add(data);
    }
 
    // Utility function to reverse contents of a queue
    private void reverseQueue()
    {
        // base case
        if (q.isEmpty()) {
            return;
        }
 
        // hold the front element in the call stack and enqueue
        // it again after the recursive call is over
 
        T front = q.peek();
        q.poll();
 
        reverseQueue();
 
        q.add(front);
    }
 
    // Remove the top item from the stack
    public T poll()
    {
        // if the queue is empty
        if (q.isEmpty())
        {
            System.out.println("Underflow!!");
            System.exit(0);
        }
 
        // reverse the queue
        reverseQueue();
 
        // dequeue front element from the reversed queue
        T front = q.peek();
        q.poll();
 
        // revert the queue to the original state
        reverseQueue();
 
        return front;
    }
}
 
class Main
{
    public static void main(String[] args)
    {
        int[] keys = { 1, 2, 3, 4, 5 };
 
        // insert the above keys into the stack
        Stack<Integer> s = new Stack<Integer>();
        for (int key: keys) {
            s.add(key);
        }
 
        for (int i = 0; i <= keys.length; i++) {
            System.out.println(s.poll());
        }
    }
}

Output:

5
4
3
2
1
Underflow!!
