Question 3 (5 marks)
Imagine you are a concert organizer responsible for managing a ticketing system for a popular band,
Coldplay. As the concert approaches, ticket sales are in full swing, and you want to keep track of the
popularity of different ticket categories. As such, you are given an array of ticket sales data, where each
element represents the number of tickets sold for a particular category at a specific time. To gain insights
into the ticket trends, you decide to use a “sliding window” approach.
Using a sliding window of a certain size, you want to determine the maximum number of tickets sold
within each window. This information will help you identify peak periods of ticket sales and adjust your
event planning and marketing strategies accordingly. By applying a Priority Queue-based solution, you
can efficiently process the ticket sales data and extract the maximum number of tickets sold within each
sliding window. This knowledge will empower you to make data-driven decisions and optimize your
ticketing system for a successful and well-attended concert.
In that case, assuming you are given an integer array, arr, of size n, where a sliding window of size k
starting from index 0. In each iteration, the sliding window moves to the right by one position till n-k.
Write a program to return an array representing the maximum number in all sliding windows.
Note:
● The first element of the resultant array is max(arr[0...k]), then the second element is
max(arr[1...k+1]) and so on.
● The size of the resultant array will be n-k+1.
● You are expected to solve this question based on Priority Queue.
Sample Output 1:
Input arr[]: [4, 3, 8, 9, 0, 1], k = 3
Output: [8, 9, 9, 9]
Explanation: The window size is 3 and the maximum at different iterations
are as follows:
max(4, 3, 8) = 8
max(3, 8, 9) = 9
max(8, 9, 0) = 9
max(9, 0, 1) = 9
Hence, we get arr = [8, 9, 9, 9] as output.
Sample Output 2:
Input arr[]: [9, 8, 6, 4, 3, 1], k = 4
Output: [9, 8, 6]
Explanation: The window size is 4 and the maximum at different iterations
are as follows:
max(9, 8, 6, 4) = 9
max(8, 6, 4, 3) = 8
max(6, 4, 3, 1) = 6
Hence, we get arr = [9, 8, 6] as output.
Sample Output 3:
Input arr[]: [1, 2, 3, 4, 10, 6, 9, 8, 7, 5], k = 3
Output: [3, 4, 10, 10, 10, 9, 9, 8]
Explanation: The window size is 3 and the maximum at different iterations
are as follows:
max(1, 2, 3) = 3
max(2, 3, 4) = 4
max(3, 4, 10) = 10
max(4, 10, 6) = 10
max(10, 6, 9) = 10
max(6, 9, 8) = 9
max(9, 8, 7) = 9
max(8, 7, 5) = 8
Hence, we get arr = [3, 4, 10, 10, 10, 9, 9, 8] as output.
