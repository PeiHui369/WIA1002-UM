
The Triwizard Tournament is a magical contest held between the three largest wizarding schools of Europe. Harry Potter has passed the first two tashs. The most dangerous final task, the Triwizard Maze is /he final obstacle he must face. Pro/essor Dumbledore has demanded you to help the poor Harry, not using your magic wand, bul your computer skills.

You will need to develop a program to track Harryâ€™s movement in the maze. The program first read the Marauders Map, which is a text file named "ma ze . txt", and display it.

1	0	1	1	0
l	1	1	0	1
0	1	0	1	C
1	1	0	1	0
0	1	1	1	0

1 denotes a path, 0 means it is a dead end, and C is the of the Triwizard Cup.

Harry will use a simple algorithm to find the Triwizard Cup hidden in the maze, try and error. He'll enter the maze at location (0,0) and start to explore all possible. If Harry meets a dead end, he will retract back to the previous block of the maze.

If Harry managed to find the cup, your program should show the location of the cup, as well as the path to it, as below.

The Triwizard Maze
1	0	1	1	0
l	1	1	0	1
0	1	0	1	C
1	1	0	1	0
0	1	1	1	0
Hurray! ! !  Harry   found  the  Triwizard Cup  at	(2,4)
This   is    the  path  Harry has  taken:	(0,0) > (1,0)  >  (l,l)  >  (2,1)  >  (3,1)  > (4,1) > (4,2) > (4,3) > (3,3) > (2,3) > (2,4)

Otherwise, the program should warn us.	
The Triwizard Maze:
1 0 1 1 0
1 1 1 0 1
0 1 0 0 C
1 1 0 1 0
0 1 1 l 1
Oh no!!! Harry couldn't find the Triwizard Cup!
Someone quickly gets Professor Dumbledore.

Your task.
a)	This is a typical backtracking problem, where you can use a stack to keep all of the possible coordinates (row, column) and directions (i.e. up, left, down and right), as a node. and push it onto the stack. Implement a generic stack class. No marks will be awarded if you use /he ADT Stack in the Java Collection Framework.

(5 marks)

b)	Write the program as described above using the stack that you have implemented in above. You do not need to worry about whether it is a shortest path, if there exist more than one.
=======================================================================================================================================
a) Here's an implementation of a generic stack class:

```java
public class Stack<T> {
    private Node<T> top;

    public void push(T data) {
        Node<T> newNode = new Node<>(data);
        if (isEmpty()) {
            top = newNode;
        } else {
            newNode.next = top;
            top = newNode;
        }
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        T data = top.data;
        top = top.next;
        return data;
    }

    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return top.data;
    }

    public boolean isEmpty() {
        return top == null;
    }

    private static class Node<T> {
        private T data;
        private Node<T> next;

        public Node(T data) {
            this.data = data;
        }
    }
}
```

b) Here's the program that solves the Triwizard Maze problem using the stack class:

```java
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class TriwizardMaze {
    private static final int PATH = 1;
    private static final int DEAD_END = 0;
    private static final char CUP = 'C';

    private static final int[][] DIRECTIONS = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}}; // up, left, down, right
    private static final String[] DIRECTION_NAMES = {"up", "left", "down", "right"};

    public static void main(String[] args) {
        int[][] maze = readMazeFromFile("maze.txt");
        int startRow = 0;
        int startCol = 0;

        System.out.println("The Triwizard Maze:");
        printMaze(maze);

        boolean[][] visited = new boolean[maze.length][maze[0].length];
        Stack<int[]> stack = new Stack<>();

        stack.push(new int[]{startRow, startCol});
        visited[startRow][startCol] = true;

        while (!stack.isEmpty()) {
            int[] current = stack.peek();
            int row = current[0];
            int col = current[1];

            if (maze[row][col] == DEAD_END) {
                stack.pop();
                continue;
            }

            if (maze[row][col] == CUP) {
                System.out.println("Hurray!!! Harry found the Triwizard Cup at (" + row + "," + col + ")");
                System.out.print("This is the path Harry has taken: ");
                printPath(stack);
                return;
            }

            boolean moved = false;
            for (int i = 0; i < DIRECTIONS.length; i++) {
                int newRow = row + DIRECTIONS[i][0];
                int newCol = col + DIRECTIONS[i][1];

                if (isValidMove(newRow, newCol, maze.length, maze[0].length) && !visited[newRow][newCol]) {
                    stack.push(new int[]{newRow, newCol});
                    visited[newRow][newCol] = true;
                    moved = true;
                    break;
                }
            }

            if (!moved) {
                maze[row][col] = DEAD_END;
                stack.pop();
            }
        }

        System.out.println("Oh no!!! Harry couldn't find the Triwizard Cup!");
        System.out.println("Someone quickly gets Professor Dumbledore.");
    }

    private static int[][] readMazeFromFile(String filename) {
        try {
            File file = new File(filename);
            Scanner scanner = new Scanner(file);



            int rows = 0;
            int cols = 0;

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] elements = line.split("\\s+");
                cols = elements.length;
                rows++;
            }

            int[][] maze = new int[rows][cols];
            scanner = new Scanner(file);

            for (int i = 0; i < rows; i++) {
                String line = scanner.nextLine();
                String[] elements = line.split("\\s+");
                for (int j = 0; j < cols; j++) {
                    maze[i][j] = Integer.parseInt(elements[j]);
                }
            }

            return maze;
        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + filename);
            return null;
        }
    }

    private static void printMaze(int[][] maze) {
        for (int[] row : maze) {
            for (int element : row) {
                System.out.print(element + " ");
            }
            System.out.println();
        }
    }

    private static boolean isValidMove(int row, int col, int numRows, int numCols) {
        return row >= 0 && row < numRows && col >= 0 && col < numCols;
    }

    private static void printPath(Stack<int[]> stack) {
        while (!stack.isEmpty()) {
            int[] location = stack.pop();
            System.out.print("(" + location[0] + "," + location[1] + ") ");
            if (!stack.isEmpty()) {
                System.out.print("> ");
            }
        }
        System.out.println();
    }
}
```

Make sure to place the "maze.txt" file in the same directory as the Java file. The program reads the maze from the file, explores the maze using backtracking with a stack, and prints the result accordingly.
