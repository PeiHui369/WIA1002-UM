
In this question, you are going to write a program that creates two linked-lists and then combine these two lists into one new linked-list.

Write a Java class Node with two attributes and a constructor. The first attribute is an attribute of generic type and the second attribute is a pointer to another Node. The constructor receives one parameter of generic type.

(1 markah/can)
 
Java class file eye nk nz s I has Node developed in part (a) as attribute. Develop this c/ass file with the following attributes, constructor and methods.
i)	Declare 3 attributes named hea d, ta z1 and s zze.
ii)	A default constructor that set the head, ta11 and size lo appropriate values.
iii)	A getSize method that returns the size of the linked-list
iv) An addFirst method that add a node to the first position of the linked-list and
return nothing.
v) An addLast method that add a node to the last position of the linked-list and return nothing.
vi)	A removeFirst method that remove the first node in the linked-list, and return the element slored in the node.
vii)	Override the toString method so that the size of the I1st, follows by element in each node will be printed in sequence. For example, if the linked-list has 3 nodes storing strings “Hello”, “World” and “!" respectively, a call to this to toString method prints:

[size=3] >> Hello >> World >> !

(7 markah/marks)
===================================================================================================================

Here's the Java implementation of the Node class with the specified attributes, constructor, and methods:

```java
public class Node<T> {
    private T data;
    private Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }

    public Node<T> getNext() {
        return next;
    }

    public void setNext(Node<T> next) {
        this.next = next;
    }
}
```

And here's the implementation of the LinkedList class that uses the Node class and includes the required attributes, constructor, and methods:

```java
public class LinkedList<T> {
    private Node<T> head;
    private Node<T> tail;
    private int size;

    public LinkedList() {
        head = null;
        tail = null;
        size = 0;
    }

    public int getSize() {
        return size;
    }

    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.setNext(head);
            head = newNode;
        }
        size++;
    }

    public void addLast(T data) {
        Node<T> newNode = new Node<>(data);
        if (tail == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.setNext(newNode);
            tail = newNode;
        }
        size++;
    }

    public T removeFirst() {
        if (head == null) {
            throw new IllegalStateException("LinkedList is empty");
        }
        T removedData = head.getData();
        head = head.getNext();
        if (head == null) {
            tail = null;
        }
        size--;
        return removedData;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[size=").append(size).append("] ");
        Node<T> currentNode = head;
        while (currentNode != null) {
            sb.append(">> ").append(currentNode.getData());
            currentNode = currentNode.getNext();
        }
        return sb.toString();
    }
}
```

You can create a new instance of the LinkedList class, add elements using the `addFirst()` or `addLast()` methods, remove elements using the `removeFirst()` method, and get the size of the list using the `getSize()` method. The `toString()` method provides a formatted string representation of the linked list.
