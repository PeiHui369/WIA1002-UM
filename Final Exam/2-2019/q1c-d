
in the third file, develop a program tial declares three MyLinkedList to store Integers, namely list1,list2 and newList. The list1 is a list with 5 numbers in incremental order. "2", "10", “38", "41”and “31“, whereas list2 with 7 numbers in the same incremental order. ’5", “12’, ’18", “21", "35", “41" and “56".
Print out	list1,	list2 and newList which will be generated in part (d) of this 
question.
Example of the output fs as Figure 1 below.

(size=5) >> 2 >> 10 >> 38 >> 41 >> 51
(size=7) >> 5 >> 12 >> 18 >> 21 >> 35 >> 41 >> 56
The newList is:
[size=12] >> 2 >> 5 >> 10 >> 12 >> 18 >> 21 >> 35 >> 38 >> 41 >>
41 >> 51  >> 56
(2 markah/marks)

In the file you developed in part (c), create a method combine that make use of methods in MyLinkedList class to integrate two lists. If both the input lists have integers sorted in ascending order, the new list generated is a list with all the integers in both lists in ascending order as well.
(3 markah/marks)

=========================================================================================================================
Here's the implementation of the program that declares three MyLinkedList objects, populates them with integers, combines the lists, and prints the results:

```java
public class Main {
    public static void main(String[] args) {
        MyLinkedList<Integer> list1 = new MyLinkedList<>();
        list1.addLast(2);
        list1.addLast(10);
        list1.addLast(38);
        list1.addLast(41);
        list1.addLast(51);

        MyLinkedList<Integer> list2 = new MyLinkedList<>();
        list2.addLast(5);
        list2.addLast(12);
        list2.addLast(18);
        list2.addLast(21);
        list2.addLast(35);
        list2.addLast(41);
        list2.addLast(56);

        MyLinkedList<Integer> newList = combine(list1, list2);

        System.out.println("list1: " + list1);
        System.out.println("list2: " + list2);
        System.out.println("newList: " + newList);
    }

    public static MyLinkedList<Integer> combine(MyLinkedList<Integer> list1, MyLinkedList<Integer> list2) {
        MyLinkedList<Integer> newList = new MyLinkedList<>();

        Node<Integer> node1 = list1.getHead();
        Node<Integer> node2 = list2.getHead();

        while (node1 != null && node2 != null) {
            if (node1.getData() <= node2.getData()) {
                newList.addLast(node1.getData());
                node1 = node1.getNext();
            } else {
                newList.addLast(node2.getData());
                node2 = node2.getNext();
            }
        }

        while (node1 != null) {
            newList.addLast(node1.getData());
            node1 = node1.getNext();
        }

        while (node2 != null) {
            newList.addLast(node2.getData());
            node2 = node2.getNext();
        }

        return newList;
    }
}
```

Make sure to also have the `MyLinkedList` class implementation from the previous answer. The `combine()` method takes two MyLinkedList objects, `list1` and `list2`, and creates a new MyLinkedList object called `newList` by iterating over the two input lists and adding elements in ascending order. The resulting `newList` is then printed along with `list1` and `list2`.
