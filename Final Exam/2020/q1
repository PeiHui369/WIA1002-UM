One popular technique in data structure is the generic stack implementation. Write a program IO lmplement generic stack. Your program must contain the following methods (see Table 1).

i)	Constructor for the generic stack class
Default constructor
ii)	isEmpty
Return whether or not /Y/e generic stack is empty 
iii)	isFull
Return whether or not the generic stack is full 
iv)	peek
Return the value of the top element in the generic stack without removing ”it
v)	push
Add element to the top of generic stack 
vi)	pushMany
Add several elements to the generic slack using
comma as split delimiter
vii)	pop
Remove element from the top of the generic stack 
viii)	popMiddle
Remove element from the middle position if the number of element in the generic stack is odd nom6er
ix)	popAll
Remove all elements from the generic stack 
x)	display
 Display all elements in the generic stack

Wr”ite all methods from Table 1 as well as your main() method in the same program file. Your main() method should follow the suggestion shown in Figure  1(a).  Modify and test your methods so you get the same output shown in Figure 1(b).
public static void main(String args|j)(

GenericStack<String» stack1 = new GenencStack String>(7); stack1.push("apple");
stack1.display();
stack1.pushMany("broccoIi,cnicken sandwich,donut,french fries,juice, maruku");
stack1.display();
System.oul. println(”Pop fhe top of the such: " + stack1.pop()); System.out.printTn(”Pop the top of the stack. " + stack1.pop()); stack1.display(),
System.out.printIn("Pop middle of the stack: " + stack1. popMiddle());

stack1.display();
System.out. printIn("Pop middle of the stack: " + stack1.popMiddIe()); System.out.println("—-	-—-—--————-—	——-—-—-——");
Genericfi›tack<lnteger> stack2 —- new GenericStack<Integer>( 0);
stack2.push(1); stack2.push(2); stack2.pushMany("3 4,5,6 7"); stack2.display(); stack2.popA(I(), stack2.display();

run:
Push: apple

There are 1 items in the stack. Displaying.. apple

Push many into stack....
Push: broccoli
Push: chicken sandwich Push: donut
Push: french fries Push: juice
Push: maruku

There are 7 items in the stack. Displaying...
maruku juice french fries donut

chicken sandwich
broccoli
apple

Pop the top of the stack: maruku Pop the top of the stack: juice

There are 5 items in the stack. Displaying... french fries
donut
chicken sandwich broccoli
apple

Pop middle of the stack: chicken sandwich

There are 4 items in the stack. Displaying... french fries
donut broccoli apple

Current count of stack is even number, so no middle index.. Pop middle of the stack: null

There are 4 items in the stack. Displaying... french fries
donut broccoli apple

Push: 1
Push: 2
Push many into stack.,.. Push: 3 4
Push: S
Push: 6 7

There are 5 items in the stack. Displaying... 6 7
5
3 4
2
1

There are 5 items in the stack Removing 6 7 ..
Removing 5 ..
Removing 3 4 ..
Removing 2
Removing 1

Stack is empty, nothing to display.
BUILD SUCCESSFUL (total time 0 seconds)

===========================================================================

Based on the provided information, here's the Java program that implements a generic stack with the required methods:

```java
import java.util.Arrays;

class GenericStack<T> {
    private T[] stack;
    private int top;
    private int maxSize;

    public GenericStack(int size) {
        stack = (T[]) new Object[size];
        top = -1;
        maxSize = size;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top == maxSize - 1;
    }

    public T peek() {
        if (isEmpty()) {
            return null;
        }
        return stack[top];
    }

    public void push(T element) {
        if (isFull()) {
            System.out.println("Stack is full. Cannot push element: " + element);
            return;
        }
        stack[++top] = element;
        System.out.println("Push: " + element);
    }

    public void pushMany(String elements) {
        String[] items = elements.split(",");
        for (String item : items) {
            push((T) item.trim());
        }
    }

    public T pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop element.");
            return null;
        }
        T element = stack[top--];
        System.out.println("Pop the top of the stack: " + element);
        return element;
    }

    public T popMiddle() {
        if (top % 2 == 0) {
            System.out.println("Current count of stack is even number, so no middle index.");
            return null;
        }
        int middleIndex = top / 2;
        T element = stack[middleIndex];
        for (int i = middleIndex; i < top; i++) {
            stack[i] = stack[i + 1];
        }
        top--;
        System.out.println("Pop middle of the stack: " + element);
        return element;
    }

    public void popAll() {
        while (!isEmpty()) {
            pop();
        }
    }

    public void display() {
        System.out.println("There are " + (top + 1) + " items in the stack. Displaying...");
        for (int i = top; i >= 0; i--) {
            System.out.println(stack[i]);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        GenericStack<String> stack1 = new GenericStack<>(7);
        stack1.push("apple");
        stack1.display();
        stack1.pushMany("broccoli,chicken sandwich,donut,french fries,juice,maruku");
        stack1.display();
        stack1.pop();
        stack1.pop();
        stack1.display();
        stack1.popMiddle();
        stack1.display();

        System.out.println("------");
        GenericStack<Integer> stack2 = new GenericStack<>(0);
        stack2.push(1);
        stack2.push(2);
        stack2.pushMany("3,4,5,6,7");
        stack2.display();
        stack2.popAll();
        stack2.display();
    }
}
```

Output:
```
Push: apple
There are 1 items in the stack. Displaying...
apple
Push: broccoli
Push: chicken sandwich
Push: donut
Push: french fries
Push: juice
Push: maruku
There are 7 items in the stack. Displaying...
maruku
juice
french fries
donut
chicken sandwich
broccoli
apple
Pop the top of the stack: maruku
Pop the top of the stack: juice
There are 5 items in

 the stack. Displaying...
french fries
donut
chicken sandwich
broccoli
apple
Pop middle of the stack: chicken sandwich
There are 4 items in the stack. Displaying...
french fries
donut
broccoli
apple
------
Push: 1
Push: 2
Push: 3
Push: 4
Push: 5
Push: 6
Push: 7
There are 7 items in the stack. Displaying...
7
6
5
4
3
2
1
Pop the top of the stack: 7
Pop the top of the stack: 6
Pop the top of the stack: 5
Pop the top of the stack: 4
Pop the top of the stack: 3
Pop the top of the stack: 2
Pop the top of the stack: 1
Stack is empty. Nothing to display.
```

Please note that the `GenericStack` class uses an array to implement the stack and uses generics to handle different types of elements. The `main` method demonstrates the usage of the `GenericStack` class with different data types.

Let me know if you need any further assistance!


