
HashUap is a structure that stores data in the form of Key and value pairs. Write
a program to implement  HashMap. Your program must contain the following  methods
/see Table 4).

Table 4. List of method names and their specification

i)	Constructor for the
HashMap class	
Default constructor which accepts Key and value pair parameters
ii) get	
Return the entry mapped to key in the HashMap

Add new entry if Key is not yet mapped into the HashMap. Otherwise, update entry mapped to Key if the HashMap already contains the Key


Write all methods in Table 4 as well as your main() method in the same  program  file.  Your main() method should follow the suggestion shown in Figure 4(a). Modify and test your methods so you gel //ie same output shown in Figure 4(b).


public static void main(Strings args) (

MyHashMap myHashMap = new MyHashMap();

System.out.printIn("New directory entry: "); myHashMap.put("BruceW', "011-8998990");
myHashMap. put("DeanW", "017-2274000");
myHashMap. put(“TonyS", "019-4550800");
myHashMap.putt"LaraC", "014-6402009"); System.out. println(");

System.out. println("Get directory: "); Entry e1 = myHashMap.get("DeanW');
System.out.printIn("DeanW: " + e1.getVaIue()); Entry e2 = myHashMap.gett"BruceW'}; System.out.printIn("BruceW: " + e2.getValue()); System.out.println( );

System.out.println("Update directory: "); myHashMap.put("BruceW", "011-5677900");
myHashMap. put("JeanG", "019-9001123");

// Get directory:
Entry e3	myHashMap.get("BruceW"); System.out.printIn("BruceW: " + e3.getVaIue()); Entry e4 — myHashMap.get("JeanG"): System.out. println(”JeanG: " + e4.getVaIue());


Figure 4(a).  Main() method
run:
New directory entry:

Get directory. DeanW: 017-2274000
BruceW: 011-8998990

Update directory:
BruceW: 011-5677900
JeanG: 019-9001123

BUILD SUCCESSFUL (total time: 0 seconds)
==============================================================================================================================================

Based on your provided program, it seems you want to implement a linked list to manage a list of books with their sales figures. Here's a modified version of the code that includes the required methods and main() method:

```java
class Node {
    String bookName;
    int sales;
    Node next;

    public Node(String bookName, int sales) {
        this.bookName = bookName;
        this.sales = sales;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public LinkedList() {
        this.head = null;
    }

    public void createNode(String bookName, int sales) {
        Node newNode = new Node(bookName, sales);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    public void addAfter(String prevBookName, String bookName, int sales) {
        Node newNode = new Node(bookName, sales);
        Node temp = head;
        while (temp != null) {
            if (temp.bookName.equals(prevBookName)) {
                newNode.next = temp.next;
                temp.next = newNode;
                break;
            }
            temp = temp.next;
        }
    }

    public void removeNode(String bookName) {
        if (head != null) {
            if (head.bookName.equals(bookName)) {
                head = head.next;
            } else {
                Node prev = null;
                Node current = head;
                while (current != null) {
                    if (current.bookName.equals(bookName)) {
                        prev.next = current.next;
                        break;
                    }
                    prev = current;
                    current = current.next;
                }
            }
        }
    }

    public void display() {
        if (head == null) {
            System.out.println("The linked list is empty.");
        } else {
            Node temp = head;
            while (temp != null) {
                System.out.println(temp.bookName + ": " + temp.sales + " Sold");
                temp = temp.next;
            }
        }
    }

    public int totalSold() {
        int total = 0;
        Node temp = head;
        while (temp != null) {
            total += temp.sales;
            temp = temp.next;
        }
        return total;
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList myLL = new LinkedList();

        myLL.createNode("Lord of The Rings", 500_000_000);
        myLL.createNode("Tale of the Body Thief", 1_000_000);
        myLL.createNode("Memnoch the Devil", 100_000_000);
        myLL.createNode("Heart of a Samurai", 10_000_000);
        myLL.display();

        myLL.addAfter("Memnoch the Devil", "White Crane", 10_000_000);
        myLL.addAfter("White Crane", "Memoirs of a Geisha", 90_000_000);
        myLL.removeNode("Harry Potter");
        myLL.removeNode("Heart of a Samurai");
        myLL.display();

        System.out.println("Total sales: " + myLL.totalSold());
    }
}
```

The program creates a LinkedList class that stores book names and their sales figures as nodes. It includes methods to create a node, add a node after a specific node, remove a node, display the linked list, and calculate the total sales. The main() method demonstrates the usage of these methods by creating a linked list of books and performing various operations on it.

Please note that I assumed the sales

 figures are represented as integers. You can modify the code as per your needs and update the sales figure representation accordingly.



