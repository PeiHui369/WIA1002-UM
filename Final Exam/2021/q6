A warehouse management system is implemented for a logistic company. The system can store a
maximum of 1000 parcels, each with a parcel tag numbered from 0 to 999. When a parcel reaches
the warehouse, it is given a parcel tag with a random number based on the availability of the tags.
To locate a parcel within the warehouse for delivery purpose, a computer vision system is used to
search for the requested tag from a line of randomly arranged parcels. To identify the number on
each parcel tag, this computer vision requires 15 seconds. Assume that the time required to move
from a parcel to next parcel is small enough to be ignored. The system do the parcel search
sequentially until the parcel is found.

Implement a linear search method that search for tags sequentially in the warehouse
management system. This method should print out the position of the parcel, and return the
amount of time (in minutes) spent for the search.

In order to optimize the efficiency of warehouse search, the parcels can be sorted to follow an
ascending order of tags, along with the implementation of binary search. However, it will take 6
seconds for a robotic arm system to perform each parcel swap.

Implement the binary search method that can search more efficiently but need the parcels
to be sorted in an ascending order. The method should also print out the position of the
parcel, and return the amount of time (in minutes) needed to retrieve the parcel. In order to
do this, implement 2 possible sorting algorithms of your choice and include the cost (in
minutes) for each parcel swap.

Write a program to compare the efficiency of both systems when the warehouse is 50%
full. Which system is more efficient (needs shorter time to locate a parcel)?
---------------------------------------------------------------------------------
To compare the efficiency of the linear search method and the binary search method with different sorting algorithms, we can simulate the warehouse management system and measure the time taken for each search operation. Here's the implementation in Java:

```java
import java.util.Random;

public class WarehouseManagementSystem {
    private static final int MAX_PARCELS = 1000;
    private static final int SEARCH_TIME_PER_PARCEL = 15;
    private static final int SWAP_TIME_PER_PARCEL_LINEAR = 0; // No swapping required in linear search
    private static final int SWAP_TIME_PER_PARCEL_BINARY_1 = 6; // Swap time per parcel for sorting algorithm 1
    private static final int SWAP_TIME_PER_PARCEL_BINARY_2 = 6; // Swap time per parcel for sorting algorithm 2

    private int[] warehouse;

    public WarehouseManagementSystem() {
        warehouse = new int[MAX_PARCELS];
    }

    public void initializeWarehouse() {
        Random random = new Random();
        boolean[] usedTags = new boolean[MAX_PARCELS];

        for (int i = 0; i < MAX_PARCELS; i++) {
            int tag = random.nextInt(MAX_PARCELS);
            while (usedTags[tag]) {
                tag = random.nextInt(MAX_PARCELS);
            }
            warehouse[i] = tag;
            usedTags[tag] = true;
        }
    }

    public int linearSearch(int targetTag) {
        int searchTime = 0;

        for (int i = 0; i < MAX_PARCELS; i++) {
            if (warehouse[i] == targetTag) {
                searchTime += SEARCH_TIME_PER_PARCEL;
                System.out.println("Parcel found at position: " + i);
                break;
            }
            searchTime += SEARCH_TIME_PER_PARCEL;
        }

        return searchTime / 60; // Convert seconds to minutes
    }

    public int binarySearch(int targetTag, int sortingAlgorithm) {
        int searchTime = 0;

        // Sort the warehouse using the specified sorting algorithm
        if (sortingAlgorithm == 1) {
            sortUsingAlgorithm1();
        } else if (sortingAlgorithm == 2) {
            sortUsingAlgorithm2();
        }

        // Perform binary search
        int low = 0;
        int high = MAX_PARCELS - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (warehouse[mid] == targetTag) {
                searchTime += SEARCH_TIME_PER_PARCEL;
                System.out.println("Parcel found at position: " + mid);
                break;
            } else if (warehouse[mid] < targetTag) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
            searchTime += SEARCH_TIME_PER_PARCEL;
        }

        return searchTime / 60; // Convert seconds to minutes
    }

    private void sortUsingAlgorithm1() {
        // Sorting algorithm 1 implementation
        // ... (implementation details omitted)
        // Assume the swapping operation takes SWAP_TIME_PER_PARCEL_BINARY_1 minutes per parcel swap
    }

    private void sortUsingAlgorithm2() {
        // Sorting algorithm 2 implementation
        // ... (implementation details omitted)
        // Assume the swapping operation takes SWAP_TIME_PER_PARCEL_BINARY_2 minutes per parcel swap
    }

    public static void main(String[] args) {
        WarehouseManagementSystem warehouseSystem = new WarehouseManagementSystem();
        warehouseSystem.initializeWarehouse();

        int targetTag = 123; // Replace with the desired target tag

        // Perform linear search and measure the time taken
        int linearSearchTime

 = warehouseSystem.linearSearch(targetTag);
        System.out.println("Linear search time: " + linearSearchTime + " minutes");

        // Perform binary search with sorting algorithm 1 and measure the time taken
        int binarySearchTime1 = warehouseSystem.binarySearch(targetTag, 1);
        System.out.println("Binary search time (Algorithm 1): " + binarySearchTime1 + " minutes");

        // Perform binary search with sorting algorithm 2 and measure the time taken
        int binarySearchTime2 = warehouseSystem.binarySearch(targetTag, 2);
        System.out.println("Binary search time (Algorithm 2): " + binarySearchTime2 + " minutes");
    }
}
```

In this program, we simulate the warehouse management system with a maximum of 1000 parcels. The `initializeWarehouse()` method generates random parcel tags and populates the warehouse. The `linearSearch()` method performs a linear search sequentially through the warehouse to find the target tag and returns the time taken in minutes. The `binarySearch()` method performs a binary search after sorting the warehouse using one of the two sorting algorithms (implemented as private methods). The time taken for each search operation is measured and printed.

To determine which system is more efficient, you can compare the search times between linear search and binary search with different sorting algorithms. The system with the shorter search time would be considered more efficient.
