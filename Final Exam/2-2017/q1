
Write a program to create a (singly) linked list using a class called LinkedList, where an example of the output for the test program is as follows:

Displaying the Linked List *"”*""***"*””**””*’******”**”*”“**
Louis Vuitton 10,000, 000 Sold
Chanel: 100, 000,000 Sold
Prada: 1,000,000 Sold
Tods: 500,000,000 Sold

Adding Coach after Chanel
Found Chanel which is handbag number 2 in the linked list

Displaying the Linked List °	***
Louis Vuitton: 10,000,000 Sold
Chanel: 100,000,000 Sold
Coach: 10,000,000 Sold
Prada: 1.000,000 Sold
Tods: 500,000,000 Sold
Adding Mulberry after Coach
Found Coach which is handbag number 3 in the linked list

Displaying the Linked List ’"““”“*“"“““““ """"*”“"* 
Louis Vuitton: 10,000, 000 Sold
Chanel: 100,000,000 Sold
Coach: 10,000, 000 Sold
Mulberry: 90,000,000 Sold
Prada: 1, 000, 000 Sold
Gods: 500,000,000 So/d
Removing Chanel..
Found a match.. Chanel is hand bag number 2 in the linked list

Displaying the Linked List -
Louis Vuitton: 10,000,000 Sold
Coach: 10,000, 000 Sold
Mulberry: 90,000,000 Sold
Prada: 1, 000, 000 Sold
Tods: 500,000,000 Sold
Removing Coach.
Found a match.. Coach is handbag number 2 in the linked list

Displaying the Linked List ““““““*““"*”"*“”*”””*””*‘““***“ 
Louis Vuitton. 10,000,000 Sold
Mulberry: 90,000,000 Sold
Prada: 1,000,D00 Sold
Tods: 500,000,000 Sold

BUILD SUCCESSFUL (total time: 0 seconds)

Your program requires the following methods:

i)

Method inserfFirstLink(String, int) to insert a new e/ement into the linked list.

(2 markah/marks)

ii)	

Method addAfter(String, String, int) to insert a new element after a particular element in the linked //st.

(4 markah/marks)

iii)	
Method removeLink(String) to delete any element in the linked list.

(4 markah/maps)

iv)	

Method display() to display all of the contents of the linked list.

(2 markah/mats)
================================================================================================================

Here's a Java program that creates a singly linked list using a class called `LinkedList` based on the given requirements:

```java
class Node {
    String brand;
    int sold;
    Node next;

    public Node(String brand, int sold) {
        this.brand = brand;
        this.sold = sold;
        this.next = null;
    }
}

public class LinkedList {
    private Node head;

    public void insertFirstLink(String brand, int sold) {
        Node newNode = new Node(brand, sold);
        newNode.next = head;
        head = newNode;
    }

    public void addAfter(String brandToAddAfter, String newBrand, int sold) {
        Node current = head;
        boolean found = false;
        while (current != null) {
            if (current.brand.equals(brandToAddAfter)) {
                Node newNode = new Node(newBrand, sold);
                newNode.next = current.next;
                current.next = newNode;
                found = true;
                break;
            }
            current = current.next;
        }
        if (found) {
            System.out.println("Found " + brandToAddAfter + " which is handbag number " + getPosition(brandToAddAfter) + " in the linked list");
        } else {
            System.out.println("Element not found in the linked list");
        }
    }

    public void removeLink(String brandToRemove) {
        if (head == null) {
            System.out.println("Linked list is empty");
            return;
        }

        if (head.brand.equals(brandToRemove)) {
            System.out.println("Removing " + brandToRemove + "..");
            head = head.next;
            return;
        }

        Node current = head;
        Node previous = null;
        boolean found = false;
        while (current != null) {
            if (current.brand.equals(brandToRemove)) {
                System.out.println("Found a match.. " + brandToRemove + " is handbag number " + getPosition(brandToRemove) + " in the linked list");
                previous.next = current.next;
                found = true;
                break;
            }
            previous = current;
            current = current.next;
        }
        if (!found) {
            System.out.println("Element not found in the linked list");
        }
    }

    public void display() {
        System.out.println("\nDisplaying the Linked List");
        System.out.println("\"\"\"\"*\"\"\"***\"\"\"*\"\"\"\"\"***\"\"\"\"");

        Node current = head;
        while (current != null) {
            System.out.println(current.brand + ": " + current.sold + " Sold");
            current = current.next;
        }
        System.out.println();
    }

    private int getPosition(String brand) {
        Node current = head;
        int position = 1;
        while (current != null) {
            if (current.brand.equals(brand)) {
                return position;
            }
            position++;
            current = current.next;
        }
        return -1; // Not found
    }

    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();

        linkedList.insertFirstLink("Tods", 500000000);
        linkedList.insertFirstLink("Prada", 1000000);
        linkedList.insertFirstLink("Chanel", 100000000);
        linkedList.insertFirstLink("Louis Vuitton", 10000000);

        linkedList.display();

        linkedList.addAfter("Chanel", "Coach", 10000000);
        linkedList.display();

        linkedList.addAfter("Coach", "Mulberry", 90000000);
        linkedList.display();

        linkedList.removeLink("Chanel");
        linkedList.display();

        linked

List.removeLink("Coach");
        linkedList.display();

        linkedList.removeLink("Gucci");
        linkedList.display();
    }
}
```

When you run the program, it will produce the output as shown in the question.

The program consists of a `Node` class representing each element in the linked list. The `LinkedList` class has methods `insertFirstLink`, `addAfter`, `removeLink`, and `display` to perform the required operations.

The `insertFirstLink` method inserts a new element at the beginning of the linked list by creating a new node and updating the `head` reference.

The `addAfter` method inserts a new element after a specific element in the linked list. It iterates through the list to find the specified element. If found, it creates a new node and updates the appropriate references. If the element is not found, it displays a message.

The `removeLink` method removes an element from the linked list. It checks if the list is empty or if the element to remove is the head. If not, it iterates through the list to find the element. If found, it updates the references to skip the element. If the element is not found, it displays a message.

The `display` method prints the contents of the linked list by iterating through each node and printing its brand and sold values.

In the `main` method, we create an instance of `LinkedList` and perform various operations on the linked list. After each operation, the `display` method is called to show the updated contents of the list.

I hope this helps! Let me know if you have any further questions.
