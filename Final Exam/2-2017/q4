
Write a program to accept numbers and encode them to return their corresponding word by using queue.

Your program shall demonstrate the following.

Implement a Queue<E> class. Ensure that the following methods and constructors are implemented.




i)	public Queue(E[] items)

ii)	public Queue()

k) public void enqueue(E e)

iv)	public E dequeue()

V	public E getElement(int i)

v)	public int getsize()

ii) public boolean isEmpzy() Viii) public String tostring()
(8 markah/mar/rs)

The program uses the Queue<E> class implemented in Question 4(a). Fallowing are further hints la guide the program development.


A list of alphabets (i.e., a - z) is given as an array as follows. Stora this array of alphabets in the queue implemented in Question 4(a). There are 26 characters in tolal.

alphabet = (’a’,’b’,’c’,.	,’y’,’z’}

ii)	
The index (see example output) represents the index location of the alphabets and not given as a separate array.

iii)	The program interacts with the user by asking the frequency of input numbers to be provided

iv)	
Once   the   User   enters   all   the   numbers,	the   program	will display their corresponding alphabets.

(9 markah/mar/Is)

Following are examples of the output. The bolded texts are the user input.

Contoh Output 1:
Example Output 1:
Queue: |a, b, c, d, e, f, g, h, i, j, k, I, m, n, a, p, q, r, s, t, u, v, w, x, y, z]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1D, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
26]

How many times will you enter a number: 0 (Please enter your number(s) between 0-26.) The entered numbers are §
The deciphered values are -Cannot decipher. No value was entered.-
Queue: [a, b, c, d, e, f, g, h, i, j, k, I, m, n, o, p, q, r, s, t, u, v, w, x, y, z]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
26]

How many times will you enter a number: 13 (Please enter your number(s) between 0-26.) Enter number 1 » 3
Enter number 2 >» 0
Enter number 3 » 19
Enter number 4 >» 0
Enter number 5 >» 18
Enter number 6 >» 19
Enter number 7 »> 17
Enter number 8 >> 20
Enter number 9 »> 2
Enter number 10 >» 19
Enter number 11 >> 20 Enter number 12 » 1z Enter number 13 » 4
The entered numbers are {3, 0, 19, D, 18, 19, t7, 20, 2, 19, 20, 17, 4] The deciphered values are data structure
========================================================================================================================

Here's a Java program that uses the `Queue<E>` class to accept numbers and encode them into their corresponding words:

```java
import java.util.Scanner;

class Queue<E> {
    private E[] items;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    public Queue(E[] items) {
        this.items = items;
        this.capacity = items.length;
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    public Queue() {
        this(10); // Default capacity is 10
    }

    public Queue(int capacity) {
        this.items = (E[]) new Object[capacity];
        this.capacity = capacity;
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    public void enqueue(E e) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue element: " + e);
            return;
        }

        rear = (rear + 1) % capacity;
        items[rear] = e;
        size++;
    }

    public E dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue element.");
            return null;
        }

        E item = items[front];
        front = (front + 1) % capacity;
        size--;
        return item;
    }

    public E getElement(int i) {
        if (isEmpty() || i < 0 || i >= size) {
            System.out.println("Invalid index or empty queue.");
            return null;
        }

        int index = (front + i) % capacity;
        return items[index];
    }

    public int getSize() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Queue: [");
        for (int i = 0; i < size; i++) {
            sb.append(items[(front + i) % capacity]);
            if (i != size - 1) {
                sb.append(", ");
            }
        }
        sb.append("]");
        return sb.toString();
    }
}

public class NumberEncoder {
    private static final String[] ALPHABET = {
        "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
        "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
    };

    public static void main(String[] args) {
        Queue<String> alphabetQueue = new Queue<>(ALPHABET);
        System.out.println("Queue: " + alphabetQueue);

        Scanner scanner = new Scanner(System.in);
        System.out.print("How many times will you enter a number: ");
        int numTimes = scanner.nextInt();

        if (numTimes <= 0) {
            System.out.println("Cannot decipher. No value was entered.");
        } else {
            System.out.println("Enter the numbers between 0 and 26:");

            for (int i = 1; i <= numTimes; i++) {
                System.out.print("Enter number " + i + ": ");
                int number = scanner.nextInt();

                if (number >= 0 && number < ALPHABET.length) {
                    alphabetQueue.enqueue(ALPHABET[number]);
                }
            }

            System.out

.println("The entered numbers are: " + alphabetQueue);
            System.out.print("The deciphered values are: ");

            for (int i = 0; i < alphabetQueue.getSize(); i++) {
                System.out.print(alphabetQueue.getElement(i));
            }

            System.out.println();
        }

        scanner.close();
    }
}
```

In this program, we define the `Queue<E>` class to represent a generic queue. It provides methods to enqueue, dequeue, access elements by index, get the size, check if the queue is empty or full, and convert the queue to a string.

The `NumberEncoder` class is the main class that uses the `Queue<E>` class to accept numbers from the user and encode them into corresponding words. It initializes a queue with the alphabet array and asks the user for the number of times they want to enter a number. It then prompts the user to enter the numbers and enqueues the corresponding alphabet values into the queue. Finally, it displays the entered numbers and the deciphered values.

I hope this helps! Let me know if you have any further questions.
