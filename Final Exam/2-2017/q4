
Write a program to accept numbers and encode them to return their corresponding word by using queue.

Your program shall demonstrate the following.

Implement a Queue<E> class. Ensure that the following methods and constructors are implemented.




i)	public Queue(E[] items)

ii)	public Queue()

k) public void enqueue(E e)

iv)	public E dequeue()

V	public E getElement(int i)

v)	public int getsize()

ii) public boolean isEmpzy() Viii) public String tostring()
(8 markah/mar/rs)

The program uses the Queue<E> class implemented in Question 4(a). Fallowing are further hints la guide the program development.


A list of alphabets (i.e., a - z) is given as an array as follows. Stora this array of alphabets in the queue implemented in Question 4(a). There are 26 characters in tolal.

alphabet = (’a’,’b’,’c’,.	,’y’,’z’}

ii)	
The index (see example output) represents the index location of the alphabets and not given as a separate array.

iii)	The program interacts with the user by asking the frequency of input numbers to be provided

iv)	
Once   the   User   enters   all   the   numbers,	the   program	will display their corresponding alphabets.

(9 markah/mar/Is)

Following are examples of the output. The bolded texts are the user input.

Contoh Output 1:
Example Output 1:
Queue: |a, b, c, d, e, f, g, h, i, j, k, I, m, n, a, p, q, r, s, t, u, v, w, x, y, z]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1D, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
26]

How many times will you enter a number: 0 (Please enter your number(s) between 0-26.) The entered numbers are §
The deciphered values are -Cannot decipher. No value was entered.-


Example Output 2.
Queue: [a, b, c, d, e, f, g, h, i, j, k, I, m, n, o, p, q, r, s, t, u, v, w, x, y, z]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
26]

How many times will you enter a number: 13 (Please enter your number(s) between 0-26.) Enter number 1 » 3
Enter number 2 >» 0
Enter number 3 » 19
Enter number 4 >» 0
Enter number 5 >» 18
Enter number 6 >» 19
Enter number 7 »> 17
Enter number 8 >> 20
Enter number 9 »> 2
Enter number 10 >» 19
Enter number 11 >> 20 Enter number 12 » 1z Enter number 13 » 4
The entered numbers are {3, 0, 19, D, 18, 19, t7, 20, 2, 19, 20, 17, 4] The deciphered values are data structure
========================================================================================================================

Here's an example implementation in Java that fulfills the requirements:

```java
import java.util.Scanner;

class Queue<E> {
    private E[] items;
    private int front;
    private int rear;
    private int size;

    public Queue(E[] items) {
        this.items = items;
        this.front = 0;
        this.rear = items.length - 1;
        this.size = items.length;
    }

    public Queue() {
        this.items = null;
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    public void enqueue(E e) {
        rear = (rear + 1) % items.length;
        items[rear] = e;
        size++;
    }

    public E dequeue() {
        E removedItem = items[front];
        front = (front + 1) % items.length;
        size--;
        return removedItem;
    }

    public E getElement(int i) {
        return items[i];
    }

    public int getSize() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Queue: [");
        for (int i = 0; i < size; i++) {
            sb.append(items[(front + i) % items.length]);
            if (i < size - 1) {
                sb.append(", ");
            }
        }
        sb.append("]");
        return sb.toString();
    }
}

public class NumberEncoder {
    public static void main(String[] args) {
        Character[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

        Queue<Character> queue = new Queue<>(alphabet);
        Integer[] numbers = new Integer[27];

        System.out.println(queue);
        System.out.println("Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]");

        Scanner scanner = new Scanner(System.in);
        System.out.print("How many times will you enter a number: ");
        int count = scanner.nextInt();

        if (count == 0) {
            System.out.println("The entered numbers are {}. The deciphered values are -Cannot decipher. No value was entered.-");
        } else {
            System.out.println("Please enter your number(s) between 0-26.");
            for (int i = 1; i <= count; i++) {
                System.out.print("Enter number " + i + ": ");
                numbers[i - 1] = scanner.nextInt();
            }

            System.out.print("The entered numbers are {");
            for (int i = 0; i < count; i++) {
                System.out.print(numbers[i]);
                if (i < count - 1) {
                    System.out.print(", ");
                }
            }
            System.out.println("}");

            System.out.print("The deciphered values are ");
            for (int i = 0; i < count; i++) {
                int index = numbers[i];
                if (index < 0 ||

 index > 26) {
                    System.out.print("Invalid number ");
                } else {
                    System.out.print(queue.getElement(index));
                }
            }
        }

        scanner.close();
    }
}
```

When you run the `NumberEncoder` program, it displays the queue of alphabets and their indices. Then, it prompts you to enter the number of times you want to enter a number. If the count is 0, it prints a message indicating that no value was entered. Otherwise, it asks you to enter the numbers between 0 and 26. After entering the numbers, it prints the entered numbers and their corresponding deciphered values based on the alphabet queue.
