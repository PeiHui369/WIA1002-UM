4.	Tulis   satu   aturcara	yang	menerima   nombor   dan   mengekodkannya	untuk mengembalikan perkataan sepadan dengan menggunakan baris-gilir.

Write a program to accept numbers and ancode them fo return their corresponding word by using queue.

Program anda harus menunjukkan perkara berikut:

Your program shall demonstrate the following.

a)	Laksanakan sebuah kelas Queue<E». Pastikan metod-metod dan konstruktor-konstruktor berikut dilaksanakan.

Implement a Queue<E> class. Ensure that the following methods and constructors are implemented.


6/8
 
WIA1002


i)	public Queue(E[] items)

ii)	public Queue()

k) public void enqueue(E e)

iv)	public E dequeue()

V	public E getElement(int i)

v)	public int getsize()

ii) public boolean isEmpzy() Viii) public String tostring()
(8 markah/mar/rs)

b)	Aturcara tersebut  menggunakan  kelas  Queue<E  yang  dilaksanakan  di dalam Soalan 4(a). Berikut adalah maklumat lanjut bagi membantu pembangunan aturcara tersebut:

The program uses the Queue<E> class implemented in Question 4(a). Fallowing are further hints la guide the program development.

i› Senarai huruf (i.e., a - z) diberikan sebagai satu tatasusun seperti berikut. Simpan tatasusun huruf ini dalam baris-gilir  yang  telah  dilaksanakan dalam Soalan 4(a). Terdapat sejumlah 26 aksara.

A list of alphabets (i.e., a - z) is given as an array as follows. Stora this array of alphabets in the queue implemented in Question 4(a). There are 26 characters in tolal.

alphabet = (’a’,’b’,’c’,.	,’y’,’z’}

ii)	Indeks (lihat contoh output) mewakili lokasi indeks bagi huruf dan tidak diberikan sebagai tatasusun berasingan.

The index (see example output) represents the index location of the alphabets ond not glven as a separate array.

iii)	Program ini berinteraksi dengan pengguna melalui pertanyaan mengenai frekuensi input nombor yang akan diberikan.

Tile program /nferac/s w”ith the user by asking the frequency of input numbers to be provided.






7/8
 
WIA1002

iv)	Setelah	pengguna	memasukkan	semua  nombor,	program ini akan memaparkan huruf yang sepadan.

Once   the   User   enters   all   the   numbers,	the   program	will display their corresponding alphabets.

(9 markah/mar/Is)

Berikut adalah contoh output. Teks yang berhuruf tebal adalah input daripada pengguna.

Following are examples of the output. The bolded texts are the user input.

Contoh Output 1:
Example Output 1:
Queue: |a, b, c, d, e, f, g, h, i, j, k, I, m, n, a, p, q, r, s, t, u, v, w, x, y, z]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1D, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
26]

How many times will you enter a number: 0 (Please enter your number(s) between 0-26.) The entered numbers are §
The deciphered values are -Cannot decipher. No value was entered.-
Queue: [a, b, c, d, e, f, g, h, i, j, k, I, m, n, o, p, q, r, s, t, u, v, w, x, y, z]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
26]

How many times will you enter a number: 13 (Please enter your number(s) between 0-26.) Enter number 1 » 3
Enter number 2 >» 0
Enter number 3 » 19
Enter number 4 >» 0
Enter number 5 >» 18
Enter number 6 >» 19
Enter number 7 »> 17
Enter number 8 >> 20
Enter nMmber 9 »> 2
Enter number 10 >» 19
Enter number 11 >> 20 Enter number 12 » 1z Enter number 13 » 4
The entered numbers are {3, 0, 19, D, 18, 19, t7, 20, 2, 19, 20, 17, 4] The deciphered values ara datastructura
========================================================================================================================

Here's the code for the requested methods in a generic binary search tree class:

```java
public class BinarySearchTree<E extends Comparable<E>> {

    private Node<E> root;

    public BinarySearchTree() {
        root = null;
    }

    public boolean add(Node<E> node, E item) {
        if (root == null) {
            root = new Node<>(item);
            return true;
        }

        Node<E> current = node;
        while (current != null) {
            int comparison = item.compareTo(current.data);
            if (comparison < 0) {
                if (current.left == null) {
                    current.left = new Node<>(item);
                    return true;
                }
                current = current.left;
            } else if (comparison > 0) {
                if (current.right == null) {
                    current.right = new Node<>(item);
                    return true;
                }
                current = current.right;
            } else {
                // Item already exists in the tree
                return false;
            }
        }

        return false;
    }

    public void printTreeInOrder() {
        if (root == null) {
            System.out.println("Tree is empty.");
            return;
        }

        Node<E> current = root;
        Stack<Node<E>> stack = new Stack<>();
        while (current != null || !stack.isEmpty()) {
            while (current != null) {
                stack.push(current);
                current = current.left;
            }

            current = stack.pop();
            System.out.print(current.data + " ");
            current = current.right;
        }

        System.out.println();
    }

    public boolean contains(E item) {
        Node<E> current = root;
        while (current != null) {
            int comparison = item.compareTo(current.data);
            if (comparison < 0) {
                current = current.left;
            } else if (comparison > 0) {
                current = current.right;
            } else {
                // Item found in the tree
                return true;
            }
        }

        return false;
    }

    private static class Node<E> {
        private E data;
        private Node<E> left;
        private Node<E> right;

        public Node(E data) {
            this.data = data;
            left = null;
            right = null;
        }
    }
}
```

Note: The code assumes you have a `Stack` implementation available, either from the standard Java library or a custom implementation.

I hope this helps! Let me know if you have any further questions.
