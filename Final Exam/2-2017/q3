
Write a code for the following methods to be implemented in a generic binary search tree class type E.


Method public boolean add{/\/ode<P» node, E item) to add new item type E into the binary search tree. The method should return a boolean value, true if the insertion is successful, and false if it is a duplicated 'item.

(3 markah/marms)
 

Method public void printTreelnOrder() to print all of the tree items in ’in order iteratively (non-recursive).

(4 markah/marks)

iii)	
Method public boolean contains(E item) to check if the binary search tree contains a specified item. The method should return boolean ya/oe: true "if the item is found, otherwise return la/se.

(3 markah/mats)

=============================================================================================================================
Here's a Java implementation of a generic binary search tree class that includes the requested methods: `addNode`, `printTreeInOrder`, and `contains`.

```java
class BinarySearchTree<E extends Comparable<E>> {
    class Node {
        E data;
        Node left;
        Node right;

        public Node(E item) {
            data = item;
            left = right = null;
        }
    }

    Node root;

    public BinarySearchTree() {
        root = null;
    }

    public boolean addNode(Node node, E item) {
        if (root == null) {
            root = new Node(item);
            return true;
        }

        if (item.compareTo(node.data) < 0) {
            if (node.left == null) {
                node.left = new Node(item);
                return true;
            } else {
                return addNode(node.left, item);
            }
        } else if (item.compareTo(node.data) > 0) {
            if (node.right == null) {
                node.right = new Node(item);
                return true;
            } else {
                return addNode(node.right, item);
            }
        } else {
            return false; // Duplicate item
        }
    }

    public void printTreeInOrder() {
        if (root == null) {
            System.out.println("The tree is empty.");
        } else {
            printTreeInOrder(root);
        }
    }

    private void printTreeInOrder(Node node) {
        if (node != null) {
            printTreeInOrder(node.left);
            System.out.println(node.data);
            printTreeInOrder(node.right);
        }
    }

    public boolean contains(E item) {
        return contains(root, item);
    }

    private boolean contains(Node node, E item) {
        if (node == null) {
            return false;
        }

        if (item.compareTo(node.data) < 0) {
            return contains(node.left, item);
        } else if (item.compareTo(node.data) > 0) {
            return contains(node.right, item);
        } else {
            return true; // Item found
        }
    }
}

public class TestBinarySearchTree {
    public static void main(String[] args) {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.addNode(tree.root, 50);
        tree.addNode(tree.root, 30);
        tree.addNode(tree.root, 20);
        tree.addNode(tree.root, 40);
        tree.addNode(tree.root, 70);
        tree.addNode(tree.root, 60);
        tree.addNode(tree.root, 80);

        System.out.println("Printing tree in order:");
        tree.printTreeInOrder();

        System.out.println("\nDoes the tree contain 40? " + tree.contains(40));
        System.out.println("Does the tree contain 90? " + tree.contains(90));
    }
}
```

In this implementation, the `BinarySearchTree` class represents the binary search tree. It uses a nested `Node` class to represent the nodes in the tree. The class includes a constructor, `addNode` method to add items to the tree, `printTreeInOrder` method to print the items in the tree in order, and `contains` method to check if the tree contains a specified item.

The `TestBinarySearchTree` test program creates an instance of `BinarySearchTree` with integer values, adds several items to the tree, and then prints the tree in order. It also demonstrates the usage of the `contains` method by checking if the tree contains specific values.

I hope this helps! Let me know if you have any further questions.
