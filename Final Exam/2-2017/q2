2.	Bayangkan satu longgokan buku di atas meja anda. Setiap buku begitu besar dan berat dan anda hanya boleh keluarkan buku yang berada di atas longgokan itu. Anda tidak boleh mengeluarkan buku dari bawah satu sama lain. Begitu juga, anda boleh menambah buku Iain dengan meletakkannya di atas bahagian atas longgokan. Anda tidak boleh menambah buku di bawah satu sama Iain dan hanya boleh mengalih keluar buku bahagian atas longgokan itu.

Imagine a pile of books on your des/r. Each book ls so large and heavy and you call only remove the top one from the pile. You cannol remove a book from under another one. Likewise, you can add another book to the pile only by placing it on the top of the p//e. You cannot add a book beneath one another and can only remove the pile’s top book.

Mengambil kira semua maklumat yang diberikan di atas:

Considering all of the given information above:

a)	Rekabentuk satu antaramuka tindanan, Stacklnterface <E> yang boleh anda gunakan untuk menentukan metod-metod biasa bagi apa-apa objek tindanan yang melaksanakan antaramuka ini. Antaramuka  ini  harus  menentukan atribut dan metod biasa yang berikut:
•	Satu atribut yang merupakan satu ArrayList untuk menyimpan elemen- elemen dalam tindanan ini.
•	Satu konstruktor yang mencipta tindanan kosong.
•	Satu metod yang mengembalikan  bilangan elemen dalam tindanan ini.
•	Satu metod yang mengembalikan  elemen teratas dalam tindanan ini.
•	Satu metod yang mengembalikan dan membuang elemen teratas dalam tindanan ini.
•	Satu metod yang menambah elemen baru ke atas tindanan ini.
•	Satu metod yang mengembalikan benar jika tindanan adalah kosong.

Design a stack interface, Slacklnterface<E> lhat you can use to specify common methods for any stack object that implements this interface. The i’nterface should specify the following common attribute and methods.
•	An attribute that ls an ArrayList lo store the elements in this stack.
•	A constructor that creates ao empty stack.
•	A method that returns the number of elements in this stack.
•	A method that returns the top element in this stack.
•	A method that returns and removes the top element in this stack.
•	A method that adds a new element to the top of this stack.
•	A method that returns true if the slack is empty.

(2 markah/marks










4/8
 

b)	Jika anda mewakili buku-buku dengan tajuk mereka, rekabentuk satu kelas generik tindanan, GenericStack <E» yang melaksanakan Stacklntedace<E>, anda boleh menggunakannya untuk menjejak buku-buku dalam longgokan di atas meja anda. Laksanakan metod-metod dengan menggunakan ArrayList. Kelas ini perlu menggantikan metod Java IoString untuk mengembalikan senarai elemen dalam tindanan ini.

If you mpresent books by their titles, design a slack generic c/ass, GenericStack<E> that implement the Slacklntedace<E>, you cart use it to track the books in the pile on your desk. Implement the methods using ArrayList. This class should override the Java hosting method to return the list of elements in this stack.

(7 markah/mar/rs

c)	Tulis satu program ujian, TestPileStack untuk menunjukkan  pelaksanaan anda. Contoh output untuk program ujian ini adalah seperti berikut:
Create a new stack: an empty pile of books isEmpty() returns true
Push 3 books to the pile:
Enter book title 1: The Hobbit
Enter book title 2: The Lord of the Rings
Enter book title 3: The Da Vinci Cade

The new books that you added are: {The Hobbit, The Lord of the Rings, The Da Vinci Code]

The pile should not be empty: isEmpty() returns false
The pile has 3 books.
Get the top book and remove the top book:

The Da Vinci Gode is at the top of the plle. The Da Vinci Code is removed from the pile.

The Lard of the Rings is at the top of the pile. The Lord of the Rings Is removed from the pl!e.

The Hobbit is at the top of the pile. The Hobbit is removed from the pile.

The pile should be empty: isEmpty() returns true

Write a test program, TestPileStack that demonstrates your implementation. An example of lhe output for the test program is as follows:
=============================================================================================================================
a) Here's the design of the `StackInterface<E>` interface:

```java
import java.util.ArrayList;

public interface StackInterface<E> {
    ArrayList<E> stack = new ArrayList<>();

    StackInterface() {
    }

    int size();

    E top();

    E pop();

    void push(E element);

    boolean isEmpty();
}
```

b) Here's the implementation of the generic stack class `GenericStack<E>` that implements the `StackInterface<E>` using `ArrayList`:

```java
import java.util.ArrayList;

public class GenericStack<E> implements StackInterface<E> {

    @Override
    public int size() {
        return stack.size();
    }

    @Override
    public E top() {
        if (!isEmpty()) {
            return stack.get(size() - 1);
        }
        return null;
    }

    @Override
    public E pop() {
        if (!isEmpty()) {
            return stack.remove(size() - 1);
        }
        return null;
    }

    @Override
    public void push(E element) {
        stack.add(element);
    }

    @Override
    public boolean isEmpty() {
        return stack.isEmpty();
    }

    @Override
    public String toString() {
        return stack.toString();
    }
}
```

c) Here's the test program `TestPileStack` to demonstrate the implementation:

```java
import java.util.Scanner;

public class TestPileStack {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Create a new stack: an empty pile of books");
        StackInterface<String> pile = new GenericStack<>();

        System.out.println("isEmpty() returns " + pile.isEmpty());

        System.out.println("Push 3 books to the pile:");
        for (int i = 1; i <= 3; i++) {
            System.out.print("Enter book title " + i + ": ");
            String title = scanner.nextLine();
            pile.push(title);
        }

        System.out.println("\nThe new books that you added are: " + pile);

        System.out.println("The pile should not be empty: isEmpty() returns " + pile.isEmpty());
        System.out.println("The pile has " + pile.size() + " books.");

        System.out.println("\nGet the top book and remove the top book:");
        while (!pile.isEmpty()) {
            String topBook = pile.top();
            System.out.println(topBook + " is at the top of the pile.");
            System.out.println(topBook + " is removed from the pile.");
            pile.pop();
        }

        System.out.println("\nThe pile should be empty: isEmpty() returns " + pile.isEmpty());

        scanner.close();
    }
}
```

Example output for the test program:

```
Create a new stack: an empty pile of books
isEmpty() returns true
Push 3 books to the pile:
Enter book title 1: The Hobbit
Enter book title 2: The Lord of the Rings
Enter book title 3: The Da Vinci Code

The new books that you added are: [The Hobbit, The Lord of the Rings, The Da Vinci Code]
The pile should not be empty: isEmpty() returns false
The pile has 3 books.

Get the top book and remove the top book:
The Da Vinci Code is at the top of the pile.
The Da Vinci Code is removed from the pile.
The Lord of the Rings is at the top of the pile.
The Lord of the Rings is removed from the pile.
The Hobbit is at the top of the pile.
The Hobbit is removed from the pile.

The pile should be empty: isEmpty() returns true
```

I hope this helps! Let me know if

 you have any further questions.
