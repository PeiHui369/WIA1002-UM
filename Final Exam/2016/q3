

Imagine that you have a set of random poker cards in your left hand. You may organize the cards in decreasing or increasing order. To do the comparison, you pick up the first random cards and you insert it in your right hand of organized cards by assuming that the first card is already sorted. You keep on picking the subsequent random cards and organize them into its correct position in your right hand until all cards are sorted.



Given the following list of integers.

82	54	71	86	43	99



For Question 3(a, b and c), write yoUr answer in a text file as MatrixNumber_Q3.txt)


State the name of this type of sorting.

(1 markah/mark)



Show by listing the sequence of sorting for the numbers given above. Sort the numbers in increasing order.

(2 markah/marks)



(1 markah/mark)
 


The given values are stored as arrays. Write a program to sort these values from largest to smallest using the type of sorting you named in Question 3(a). Given is the method signature.

puh11c  static  void   the Sort  ( int	[	) num)

(5 markah/marks)



In your test program, display the following.â€˜



Display the given values before sorting.



List of sequence for sorting [Question 3(b)).


Number of repetition needed for sorting [Question 3(c)).

(5 markah/marks)
================================================================================================================

Sure! Here's an example implementation in Java that sorts the given values in decreasing order using the insertion sort algorithm:

```java
import java.util.Arrays;

public class CardSortingProgram {
    public static void main(String[] args) {
        int[] nums = {82, 54, 71, 86, 43, 99};

        System.out.println("Given values before sorting: ");
        displayArray(nums);

        sort(nums);

        System.out.println("\nList of sequence for sorting:");
        displayArray(nums);

        int numRepetitions = getNumRepetitions(nums);
        System.out.println("\nNumber of repetitions needed for sorting: " + numRepetitions);
    }

    public static void sort(int[] nums) {
        for (int i = 1; i < nums.length; i++) {
            int key = nums[i];
            int j = i - 1;

            while (j >= 0 && nums[j] < key) {
                nums[j + 1] = nums[j];
                j--;
            }

            nums[j + 1] = key;
        }
    }

    public static void displayArray(int[] nums) {
        for (int num : nums) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static int getNumRepetitions(int[] nums) {
        int[] sortedNums = Arrays.copyOf(nums, nums.length);
        sort(sortedNums);

        int numRepetitions = 0;
        while (!Arrays.equals(nums, sortedNums)) {
            sort(nums);
            numRepetitions++;
        }

        return numRepetitions;
    }
}
```

You can run this Java program to see the output, which includes the given values before sorting, the list of sequences for sorting, and the number of repetitions needed for sorting. The program uses the insertion sort algorithm to sort the values in decreasing order.
