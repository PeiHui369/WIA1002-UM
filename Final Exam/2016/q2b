
The program’ uses the Queue<E> class implemented in Question 2(a). Following are further hints to guide the program development:

    
A list of alphabets (i.e., a-z) is given as an array as follows. Store this array of alphabets in the queue implemented in Question 2(a). There are 26 characters in total (i.e., alphabet and an underscore symbol)

alphabet = {’a’,’b’,’c’,...,’y’,’z’,’_’}

The index (see example output) represents the index location of the alphabets and not given as a separate array.


The program interacts with the user by asking the frequency of input numbers to be provided.


Once the user enters all the numbers, the program will display their corresponding alphabets.

Following are examples of the output. The bolded texts are the user input.
Example Output 1:
Queue: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, _)
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, ]

How many times will you enter a number: O (Please enter your number(s) between 0-26.) The entered numbers are []
The deciphered values are -Cannot decipher. No value was
entered.-

Example Output 2:
Queue: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q,
r, s, t, u, v, w, x, y, z, _]
Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, ]

How many times will you enter a number: 14 (Please enter your number(s) between 0-26.) 
Enter number 1 >> 3
Enter number 2 >> 0
Enter number 3 >> 19
Enter number 4 >> 0
Enter number 5 >> 26
Enter number 6 >> 18
Enter number 7 >> 19
Enter number 8 >> 17
Enter number 9 >> 20
Enter number 10 >> 2
Enter number 11 >> 19
Enter number 12 >> 20
Enter number 13 >> 17
Enter number 14 >> 4
The entered numbers are [3, 0, 19, 0, 26, 18, 19, 17, 20, 2,
19, 20, 17, 4]
The deciphered values are data structure


No marks will be given for any implementation without using Queue<E» class in Question 2(a).

(10 markahlmarks)
=========================================================================================================================================

Sure! Here's an example implementation in Java that uses the `Queue<E>` interface to store and decipher alphabets based on user input:

```java
import java.util.*;

public class AlphabetDecipherProgram {
    public static void main(String[] args) {
        Character[] alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '_'};

        Queue<Character> alphabetQueue = new LinkedList<>(Arrays.asList(alphabets));

        System.out.println("Queue: " + alphabetQueue);
        System.out.println("Index: " + generateIndexList(alphabets.length));

        Scanner scanner = new Scanner(System.in);
        System.out.print("\nHow many times will you enter a number: ");
        int numInputs = scanner.nextInt();
        scanner.nextLine();

        List<Integer> numbers = new ArrayList<>();

        for (int i = 1; i <= numInputs; i++) {
            System.out.print("Enter number " + i + " >> ");
            int number = scanner.nextInt();
            scanner.nextLine();
            numbers.add(number);
        }

        System.out.println("The entered numbers are " + numbers);
        String decipheredValues = decipherNumbers(numbers, alphabetQueue);
        System.out.println("The deciphered values are " + decipheredValues);
    }

    private static String decipherNumbers(List<Integer> numbers, Queue<Character> alphabetQueue) {
        StringBuilder decipheredValues = new StringBuilder();

        for (int number : numbers) {
            if (number < 0 || number >= alphabetQueue.size()) {
                decipheredValues.append('-');
            } else {
                Character character = getElementAt(alphabetQueue, number);
                if (character != null) {
                    decipheredValues.append(character);
                }
            }
        }

        return decipheredValues.toString();
    }

    private static Character getElementAt(Queue<Character> queue, int index) {
        if (index < 0 || index >= queue.size()) {
            return null;
        }

        int currentIndex = 0;
        for (Character element : queue) {
            if (currentIndex == index) {
                return element;
            }
            currentIndex++;
        }

        return null;
    }

    private static List<Integer> generateIndexList(int length) {
        List<Integer> indexList = new ArrayList<>();
        for (int i = 0; i < length; i++) {
            indexList.add(i);
        }
        return indexList;
    }
}
```

You can run this Java program and interact with it in the console to decipher the alphabets based on the user's input.
