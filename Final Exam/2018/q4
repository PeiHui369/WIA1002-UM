One popular technique in deta structure is linked list Write a program using linked list. Your program must contain the following methods (see Table 3).

Constructor for the linked list class
Default constructor for the linked list class
Constructor for the node class
Default constructor for the node class
isEmpty
Return whether or not the stack is empty
add
Add element to the top of stack
addAfter
Remove element from the top of the stack
remove
Remove all elements from the stack
display
Display all elements in stack

Test the methods by programming your main() method similar to the example in Figure 5.
public static void main(String[] args) {

LList list = new LList () ;

list.add("Computing Mathematics 1", 3) ;
list.add("Principles of AI", 3) ;
list.add("Programming 1", 5) ;
list.add("Data Structure", 5) ;
list.display() ;
list.addAfter("Programming 1", "Software Architecture", 4) ;
list.addAfter("Software Architecture", "Networking", 4) ;

list.remove("Networking", 4);
list.display() ;

list.remove("Principles of AI", 3)
list.display()  ;


run:
Displaying the Linked List *****************************************************************************

Data Structure: 5 hours
Programming 1: 5 hours
Principles of AI: 3 hours
Computing Mathematics 1: 3 hours

Adding Software Architecture after Programming 1
Found Programming 1 which is book number 2 in the linked list

Displaying the Linked List *****************************************************************************

Data Structure: 5 hours
Programming 1: 5 hours
Principles of AI: 3 hours
Computing Mathematics 1: 3 hours

Adding Networking after Software Architecture
Found Software Architecture which is book number 3 in the linked list

Add a method totalCreditHours() to count the total credit hours collected. See Figure 6 for program and output example

public static void main(String[] args){

LLiat list = new LList();
list.add("Computing Mathematics 1", 3) ;
list.add("Principles of AI", 3) ;
list.add("Programming 1", 5) ;
list.add("Data Structure", 5) ;
//list.display() ;
list.addAfter("Programming 1", "Software Architecture", 4) ;
list.addAfter("Software Architecture", "Networking", 4) ;
//list.display();
list.totalCreditHours();
list.remove("Networking", 4);
//list.display();
list.remove("Principles of AI", 3);
//list.display();
list.totalCreditHours();

run:
Total credit hours taken: 16

Adding Software Architecture after Programming 1
Found Programming 1 which is book number 2 in the linked list

Adding Networking e after Software Architecture
Found Networking which is book number 3 in the linked list
Total cedit hours taken: 24

Removing Networking..
Found a match.. Networking is book number 4 in the linked list

Removing Principles of AI..
Found a match.. Principles of AI is book number 4 in the linked list
Total credit hours taken: 17
BUILD SUCCESSFUL (total time: 0 seconds)

============================================================================================================================================
Here's the Java implementation of the LinkedList class and the Node class, including the additional method `totalCreditHours`:

```java
// Node class
class Node {
    public String data;
    public int creditHours;
    public Node next;

    public Node(String data, int creditHours) {
        this.data = data;
        this.creditHours = creditHours;
        this.next = null;
    }
}

// LinkedList class
class LList {
    private Node head;

    public LList() {
        head = null;
    }

    public boolean isEmpty() {
        return (head == null);
    }

    public void add(String data, int creditHours) {
        Node newNode = new Node(data, creditHours);
        if (isEmpty()) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void addAfter(String targetData, String newData, int creditHours) {
        Node current = head;
        while (current != null) {
            if (current.data.equals(targetData)) {
                Node newNode = new Node(newData, creditHours);
                newNode.next = current.next;
                current.next = newNode;
                System.out.println("Found " + targetData + " which is book number " + creditHours + " in the linked list");
                return;
            }
            current = current.next;
        }
        System.out.println("Cannot find " + targetData + " in the linked list.");
    }

    public void remove(String data, int creditHours) {
        if (isEmpty()) {
            System.out.println("The linked list is empty.");
            return;
        }
        if (head.data.equals(data) && head.creditHours == creditHours) {
            System.out.println("Removing " + data + "..");
            head = head.next;
            return;
        }
        Node current = head;
        Node previous = null;
        while (current != null) {
            if (current.data.equals(data) && current.creditHours == creditHours) {
                System.out.println("Removing " + data + "..");
                previous.next = current.next;
                return;
            }
            previous = current;
            current = current.next;
        }
        System.out.println("Cannot find " + data + " in the linked list.");
    }

    public void display() {
        System.out.println("Displaying the Linked List ******************************");
        Node current = head;
        while (current != null) {
            System.out.println(current.data + ": " + current.creditHours + " hours");
            current = current.next;
        }
        System.out.println();
    }

    public void totalCreditHours() {
        int totalHours = 0;
        Node current = head;
        while (current != null) {
            totalHours += current.creditHours;
            current = current.next;
        }
        System.out.println("Total credit hours taken: " + totalHours);
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LList list = new LList();

        list.add("Computing Mathematics 1", 3);
        list.add("Principles of AI", 3);
        list.add("Programming 1", 5);
        list.add("Data Structure", 5);

        list.display();

        list.addAfter("Programming 1", "Software Architecture", 4);
        list.addAfter("Software Architecture", "Networking", 4);

        list.remove("Networking", 4);
        list.display();

        list.remove("Principles of AI", 3);
        list.display();

        list.totalCreditHours();
    }
}
``

`

This program defines a `LList` class representing a linked list. It has methods for the constructor, isEmpty, add, addAfter, remove, display, and totalCreditHours. The `totalCreditHours` method calculates the total credit hours by traversing the linked list and adding up the credit hours of each node.

In the `main` method, you can test the functionality of the `LList` class by performing various operations such as adding nodes, removing nodes, displaying the linked list, and calculating the total credit hours.

Hope this helps! Let me know if you have any further questions.
