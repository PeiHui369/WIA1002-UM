
One popular technique in data structure is stack. Write a program using sta<a sour
program must contain the following method 

Constructor for Stack
Default constructor
isEmpty
Return whether or not the stack is empty
peek
Return the value of the first element in the stack
without removing it
 push
Add element to the top of stack
pop
Remove element frorn the top of the stack 
popAll
Remove all elements from the stack
display
Display all elements in the stack
displayInReverse
Display all elements in the stack in reversed order
Test the methods by programming your main ( ) method similar to the example in Figure 3.

public static void main (String args[]){

StackTest stack1 = new StackTest (4) ;
stack1.push ("one");
stack1.push ("two");
stack1.push ("three");
stack1.push ("four");
stack1.displayReverse() ;
stack1.popAll() ;
stack1.displayReverse();

run :
Push item into stack: one
Push item into stack: two
Push item into stack: three
Push item into stack: four
Display stack in reverse
four
three
two
one
Pop all item in stack:
Removing four ..
Removing three ..
Removing two ..
Removing one ..
DIsplay stack in reverse:
null
null
null
null
BUILD SUCCESSFUL (total time: 0 seconds)

With some modification, change your stack program into Generic form so that the following can be implemented (see Figure 4).
public static void main (String args[]){

StackWithGeneric<String> stack1 = new StackWithGeneric<String>(4);
stack1.push ("one");
stack1.push ("two");
stack1.push ("three");
stack1.push ("four");
System.out.printIn(stack1.peek()) ;
stack1.display();
stack1.displayReverse() ;
stack1.popAll() ;

StackWithGeneric<Integer> stack2 = new StackWithGeneric<Integer>(4);
stack2.push(100) ;
stack2.push(200) ;
stack2.push(300) ;
stack2.push(400) ;
System.out.printIn(stack2.peek()) ;
stack2.display();
stack2.displayReverse() ;
stack2.popAll() ;

run:
Push item into stack: one
Push item into stack: two
Push item into stack: three
Push item into stack: four
four
Display stack:
one
two
three
four
Display stack in reverse:
four
three
two
one
Pop all item in stack:
Removing four ..
Removing three ..
Removing two ..
Removing one ..
Push item into stack: 100
Push item into stack: 200
Push item into stack: 300
Push item into stack: 400
400
Display stack:
100
200
300
400
Display stack in reverse:
400
300
200
100
Pop all item in stack:
Removing 400 ..
Removing 300 ..
Removing 200 ..
Removing 100 ..
BUILD SUCCESSFUL (total time: 0 seconds)

============================================================================================================================================
Here's the Java implementation of the Stack class and the StackWithGeneric class:

```java
// Stack class (non-generic)
class StackTest {
    private int maxSize;
    private String[] stackArray;
    private int top;

    public StackTest(int size) {
        maxSize = size;
        stackArray = new String[maxSize];
        top = -1;
    }

    public boolean isEmpty() {
        return (top == -1);
    }

    public String peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
            return null;
        }
        return stackArray[top];
    }

    public void push(String data) {
        if (top == maxSize - 1) {
            System.out.println("Stack is full. Cannot push " + data);
            return;
        }
        top++;
        stackArray[top] = data;
        System.out.println("Push item into stack: " + data);
    }

    public String pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return null;
        }
        String data = stackArray[top];
        stackArray[top] = null;
        top--;
        System.out.println("Removing " + data + " ..");
        return data;
    }

    public void popAll() {
        while (!isEmpty()) {
            pop();
        }
    }

    public void display() {
        for (int i = 0; i <= top; i++) {
            System.out.println(stackArray[i]);
        }
    }

    public void displayReverse() {
        for (int i = top; i >= 0; i--) {
            System.out.println(stackArray[i]);
        }
    }
}

// StackWithGeneric class (generic)
class StackWithGeneric<T> {
    private int maxSize;
    private T[] stackArray;
    private int top;

    public StackWithGeneric(int size) {
        maxSize = size;
        stackArray = (T[]) new Object[maxSize];
        top = -1;
    }

    public boolean isEmpty() {
        return (top == -1);
    }

    public T peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
            return null;
        }
        return stackArray[top];
    }

    public void push(T data) {
        if (top == maxSize - 1) {
            System.out.println("Stack is full. Cannot push " + data);
            return;
        }
        top++;
        stackArray[top] = data;
        System.out.println("Push item into stack: " + data);
    }

    public T pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return null;
        }
        T data = stackArray[top];
        stackArray[top] = null;
        top--;
        System.out.println("Removing " + data + " ..");
        return data;
    }

    public void popAll() {
        while (!isEmpty()) {
            pop();
        }
    }

    public void display() {
        for (int i = 0; i <= top; i++) {
            System.out.println(stackArray[i]);
        }
    }

    public void displayReverse() {
        for (int i = top; i >= 0; i--) {
            System.out.println(stackArray[i]);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // StackTest (non-generic)
        StackTest stack1 = new StackTest(4);
        stack1.push("one");
        stack1.push("two");
        stack1.push("three");
        stack1.push("four");
        System.out.println(stack1.peek());
        stack1.display

();
        stack1.displayReverse();
        stack1.popAll();

        // StackWithGeneric (generic)
        StackWithGeneric<String> stack2 = new StackWithGeneric<>(4);
        stack2.push("one");
        stack2.push("two");
        stack2.push("three");
        stack2.push("four");
        System.out.println(stack2.peek());
        stack2.display();
        stack2.displayReverse();
        stack2.popAll();

        StackWithGeneric<Integer> stack3 = new StackWithGeneric<>(4);
        stack3.push(100);
        stack3.push(200);
        stack3.push(300);
        stack3.push(400);
        System.out.println(stack3.peek());
        stack3.display();
        stack3.displayReverse();
        stack3.popAll();
    }
}
```

In this implementation, the `StackTest` class represents a non-generic stack, while the `StackWithGeneric` class is a generic stack implementation.

The `StackTest` class has methods for the constructor, isEmpty, peek, push, pop, popAll, display, and displayReverse. These methods operate on an array-based stack of strings.

The `StackWithGeneric` class is similar to `StackTest`, but it is a generic class that can work with any type `T`. It uses an array of type `T` to store the stack elements.

In the `main` method, you can test the functionality of both the non-generic `StackTest` and generic `StackWithGeneric` classes by performing various push, pop, and display operations on stacks of strings and integers.

Hope this helps! Let me know if you have any further questions.
