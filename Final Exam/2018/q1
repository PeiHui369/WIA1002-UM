
The Towers of Hanoi problem is a classical problem used to illustrate the power of recursion. Explanation of the problem goes as follows.
There are three poles and 64 discs of different sizes. Initially, all the discs are placed on the first pole with the largest disc at the bottom and the smallest one at the top. You need to move all the discs from the first pole to the third pole, with the smallest disc at the top and the largest at the bottom. You can move only one disc at a time and at any point of time, larger disc cannot be placed over a smaller one. The second pole can be used as an intermediate pole to help you in transferring the discs.

Pole 1	Pole 2	Pole3


for a puzzle with 2 discs (disc 1 and disc 2), the puzzle can be solved with the following steps (algorithm).

Step 1: Move disc 1 from pole 1 to pole 2
Step 2: Move disc 2 from pole 1 to pole 3
Step 3: Move disc 3 from pole 1 to pole 3
 

Write a program to solve the Tower of Hanoi using recursion.

===========================================================================================================================================================

Here's the Java implementation of the Tower of Hanoi problem using recursion:

```java
public class TowerOfHanoi {
    public static void moveDiscs(int n, String source, String destination, String auxiliary) {
        if (n == 1) {
            System.out.println("Move disc 1 from " + source + " to " + destination);
            return;
        }

        moveDiscs(n - 1, source, auxiliary, destination);
        System.out.println("Move disc " + n + " from " + source + " to " + destination);
        moveDiscs(n - 1, auxiliary, destination, source);
    }

    public static void main(String[] args) {
        int numOfDiscs = 3;
        moveDiscs(numOfDiscs, "Pole 1", "Pole 3", "Pole 2");
    }
}
```

In this program, the `moveDiscs` method is used to solve the Tower of Hanoi problem recursively. It takes four parameters:
- `n`: The number of discs to be moved.
- `source`: The pole from which the discs are currently placed.
- `destination`: The pole to which the discs should be moved.
- `auxiliary`: The auxiliary pole that can be used for temporary storage during the movement of discs.

The base case is when there is only one disc (n == 1), in which case we simply move the disc from the source pole to the destination pole. Otherwise, we recursively move (n - 1) discs from the source pole to the auxiliary pole, then move the remaining disc from the source pole to the destination pole, and finally recursively move the (n - 1) discs from the auxiliary pole to the destination pole.

In the `main` method, you can specify the number of discs (`numOfDiscs`) to solve the Tower of Hanoi problem. The program will output the sequence of moves required to solve the problem.

I hope this helps! Let me know if you have any further questions.
