
Queue supports the insert and the remove operations based on the Ffistñn First-out pa/icy. Write a program to create a class named Queue. The class should consist of methods as specified in Ta6/e 1.

constructor for Queue class	
isEmpty  
return whether or not the queue is empty
Peek
return the value of the first element in the queue
enqueue 
Add element to the bottom of the queue
 Queue	
remove element from top of the queue
vJ display	
Display all elements in the queue 

Test the methods by programming your mains method similar to the example in
Figure 1

public static void -ain{Strlng{} args) {
Queue q=new Queue(5);
q.enqueue ("hello");
q.enqueue("all");
q.enqueue("who");
q.enqueue("wants");
q.enqueue("ice cream");
q. dequeue () ;
q. dequeue () ;
q.enqueue ("1000") ;
q.enqueue ("2000") ;
q.peek () ;
}

run:
Data hello inserted
Data all inserted
Data who inserted
Data wants inserted
Data ice cream inserted
Data hello has been removed
Data all has been removed
Data 1000 inserted
Data 2000 inserted
Peek(): who
BUILD SUCCESSFUL (total time : 0 seconds)

Modify the method display() to display each index and element in boxes as shown in
the example in Figure 2.
public static void main(String [ ] args)  {
Queue q=new Queue(5);
q.enqueue ("hello");
q.enqueue("all");
q.enqueue("who");
q.enqueue("wants");
q.enqueue("ice cream");
q. dequeue () ;
q. dequeue () ;
q.enqueue ("1000") ;
q.enqueue ("2000") ;
q.peek () ;

q.display () ;
}

run:
Data hello inserted
Data all inserted
Data who inserted
Data wants inserted
Data ice cream inserted
Data hello has been removed
Data all has been removed
Data 1000 inserted
Data 2000 inserted
Peek(): who
-------------------------------------------------------------------------
|  0  |  1  |  2  |  3  |  4  |
-------------------------------------------------------------------------
|  who  |  wants  |  ice cream  |  1000  |  2000  |
-------------------------------------------------------------------------

“ No marks will be given /br any implementation using the ex/sling Queue c/ess or sny other Col/ecUon c/asses ava//abfe from tña Java API Library.
=============================================================================================================================================================
Here's the Java implementation of the Queue class with the specified methods:

```java
public class Queue {
    private int maxSize;
    private String[] queueArray;
    private int front;
    private int rear;
    private int nItems;

    public Queue(int size) {
        maxSize = size;
        queueArray = new String[maxSize];
        front = 0;
        rear = -1;
        nItems = 0;
    }

    public boolean isEmpty() {
        return (nItems == 0);
    }

    public boolean isFull() {
        return (nItems == maxSize);
    }

    public String peek() {
        return queueArray[front];
    }

    public void enqueue(String data) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue " + data);
            return;
        }
        rear++;
        if (rear == maxSize)
            rear = 0;
        queueArray[rear] = data;
        nItems++;
        System.out.println("Data " + data + " inserted");
    }

    public String dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return null;
        }
        String data = queueArray[front];
        front++;
        if (front == maxSize)
            front = 0;
        nItems--;
        System.out.println("Data " + data + " has been removed");
        return data;
    }

    public void display() {
        System.out.println("-----------------------------------------");
        System.out.print("|");
        for (int i = 0; i < maxSize; i++) {
            System.out.print("  " + i + "  |");
        }
        System.out.println("\n-----------------------------------------");
        System.out.print("|");
        int index = front;
        for (int i = 0; i < nItems; i++) {
            System.out.printf("  %-8s|", queueArray[index]);
            index++;
            if (index == maxSize)
                index = 0;
        }
        System.out.println("\n-----------------------------------------");
    }

    public static void main(String[] args) {
        Queue q = new Queue(5);
        q.enqueue("hello");
        q.enqueue("all");
        q.enqueue("who");
        q.enqueue("wants");
        q.enqueue("ice cream");
        q.dequeue();
        q.dequeue();
        q.enqueue("1000");
        q.enqueue("2000");
        q.peek();
        q.display();
    }
}
```

In this implementation, the `Queue` class has a fixed size (`maxSize`) and an array `queueArray` to store the elements. The `front` and `rear` variables keep track of the positions in the array, and `nItems` keeps track of the number of items in the queue.

The `isEmpty` and `isFull` methods check if the queue is empty or full, respectively. The `peek` method returns the value of the first element in the queue.

The `enqueue` method adds an element to the rear of the queue, and the `dequeue` method removes an element from the front of the queue. If the queue is full, the `enqueue` method displays an error message, and if the queue is empty, the `dequeue` method displays an error message.

The `display` method prints the elements of the queue in a formatted table.

In the `main` method, you can test the functionality of the `Queue` class by enqueueing, dequeueing, peeking, and displaying the elements of the queue.

Hope this helps! Let me know if you have any further questions.
