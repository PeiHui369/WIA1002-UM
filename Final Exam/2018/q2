
Queue supports the insert and the remove operations based on the Ffistñn First-out pa/icy. Write a program to create a class named Queue. The class should consist of methods as specified in Ta6/e 1.

constructor for Queue class	
Default constructor
isEmpty  
return whether or not the queue is empty
Peek
return the value of the first element in the queue
enqueue 
Add element to the bottom of the queue
dequeue	
remove element from top of the queue
vJ display	
Display all elements in the queue 

Test the methods by programming your mains method similar to the example in
Figure 1

public static void -ain{Strlng{} args) {
Queue q=new Queue(5);
q.enqueue ("hello");
q.enqueue("all");
q.enqueue("who");
q.enqueue("wants");
q.enqueue("ice cream");
q. dequeue () ;
q. dequeue () ;
q.enqueue ("1000") ;
q.enqueue ("2000") ;
q.peek () ;
}

run:
Data hello inserted
Data all inserted
Data who inserted
Data wants inserted
Data ice cream inserted
Data hello has been removed
Data all has been removed
Data 1000 inserted
Data 2000 inserted
Peek(): who
BUILD SUCCESSFUL (total time : 0 seconds)

Modify the method display() to display each index and element in boxes as shown in
the example in Figure 2.
public static void main(String [ ] args)  {
Queue q=new Queue(5);
q.enqueue ("hello");
q.enqueue("all");
q.enqueue("who");
q.enqueue("wants");
q.enqueue("ice cream");
q. dequeue () ;
q. dequeue () ;
q.enqueue ("1000") ;
q.enqueue ("2000") ;
q.peek () ;

q.display () ;
}

run:
Data hello inserted
Data all inserted
Data who inserted
Data wants inserted
Data ice cream inserted
Data hello has been removed
Data all has been removed
Data 1000 inserted
Data 2000 inserted
Peek(): who
-------------------------------------------------------------------------
|  0  |  1  |  2  |  3  |  4  |
-------------------------------------------------------------------------
|  who  |  wants  |  ice cream  |  1000  |  2000  |
-------------------------------------------------------------------------

“ No marks will be given /br any implementation using the ex/sling Queue c/ess or sny other Col/ecUon c/asses ava//abfe from tña Java API Library.
=============================================================================================================================================================
Certainly! Here's an example implementation in Java that fulfills the requirements:

```java
public class Queue {
    private String[] elements;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    public Queue(int capacity) {
        this.capacity = capacity;
        this.elements = new String[capacity];
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public String peek() {
        if (isEmpty()) {
            return null;
        }
        return elements[front];
    }

    public void enqueue(String data) {
        if (size == capacity) {
            System.out.println("Queue is full. Cannot enqueue " + data);
            return;
        }
        rear = (rear + 1) % capacity;
        elements[rear] = data;
        size++;
        System.out.println("Data " + data + " inserted");
    }

    public void dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return;
        }
        String removedItem = elements[front];
        front = (front + 1) % capacity;
        size--;
        System.out.println("Data " + removedItem + " has been removed");
    }

    public void display() {
        System.out.println("-----------------------------------------");
        System.out.print("|");
        for (int i = 0; i < capacity; i++) {
            System.out.print("  " + i + "  |");
        }
        System.out.println("\n-----------------------------------------");
        System.out.print("|");
        for (int i = 0; i < capacity; i++) {
            System.out.print("  " + elements[i] + "  |");
        }
        System.out.println("\n-----------------------------------------");
    }

    public static void main(String[] args) {
        Queue q = new Queue(5);
        q.enqueue("hello");
        q.enqueue("all");
        q.enqueue("who");
        q.enqueue("wants");
        q.enqueue("ice cream");
        q.dequeue();
        q.dequeue();
        q.enqueue("1000");
        q.enqueue("2000");
        q.peek();
        q.display();
    }
}
```

When you run the `Queue` program, it demonstrates the usage of the queue methods. It enqueues elements, dequeues elements, peeks at the first element, and displays the contents of the queue. The display is presented with each index and element in boxes.
