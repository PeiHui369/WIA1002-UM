
Write a program to create a (singly) linked list using a class called LinkedLisñ where your main() method is as shown in Figure 1. Your output is as shown on Figure 2.

public static voi main(String a[]) (
 SinglyLinkedListFinals sl = new SinglyLinkedListFinals () ;

 sl.add(10) ;
 sl.add(20) ;
 sl.add(30) ;
 sl.add(40) ;
 sl.add(50) ;
 sl.addAfter (11, 10) ;
 sl.addAfter (21, 20) ;
 sl.addAfter (31, 30) ;
 sl.addAfter (41, 40) ;
 sl.addAfter (51, 50) ;
 sl.traverse() ;
 sl.deleteFront () ;
 sl.deleteFront () ;
 sl.traverse () ;
 sl.deleteAfter (40) ;
 sl.deleteAfter (40) ;
 sl.deleteAfter (31) ;
 sl.deleteAfter (40) ;
 sl.traverse () ;

)

run:
Adding: 10
Adding: 20
Adding: 30
Adding: 40
Adding: 50
Adding 11 after 10
Adding 21 after 20
Adding 31 after 30
Adding 41 after 40
Adding 51 after 50

Showing content of my linked list:
10 11 20 21 30 31 40 41 50 51

Testing deleteAfter:
After 40 is 41. Deleting 41

Testing deleteAfter:
After 40 is 50. Deleting 50

Testing deleteAfter:
After 31 is 40. Deleting 40

Testing deleteAfter:
Element (40) not found...

Showing content of my linked list:
20 21 30 31 51
BUILD SUCCESSFUL (total time: 0 seconds)

Showing consent of my linked liss:

Your program requires the following methods:

i)

Method add(int) to insert a new element info the linked list
(3 markah/marks)

ii)

Method addAfter(int, int} Io insert a new element after a particular element in the linked list.

Method deleteFront() to delete the first element in the linked list.

Method delteAfter(int x) to delete an element after element with value x in the linked list
(3 markah/marks)

Method traverse() to display all of the contents of the linked list.

(3 markah/marks)

* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas LinkedList atau mana-mana kelas Collection yang sedia ada didapati daripada Jaya API Library.

“ No marks wi// be given for any implementation using the existing LinkedList class or any other Collection classes available from the Java API Library.

===================================================================================================================

Here's a Java program that creates a singly linked list using the `LinkedList` class:

```java
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class SinglyLinkedListFinals {
    private Node head;

    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        System.out.println("Adding: " + data);
    }

    public void addAfter(int data, int after) {
        Node newNode = new Node(data);
        Node current = head;
        boolean found = false;
        while (current != null) {
            if (current.data == after) {
                newNode.next = current.next;
                current.next = newNode;
                found = true;
                break;
            }
            current = current.next;
        }
        if (found) {
            System.out.println("Adding " + data + " after " + after);
        } else {
            System.out.println("Element (" + after + ") not found...");
        }
    }

    public void deleteFront() {
        if (head != null) {
            System.out.println("Deleting front element: " + head.data);
            head = head.next;
        } else {
            System.out.println("Linked list is empty.");
        }
    }

    public void deleteAfter(int x) {
        Node current = head;
        boolean found = false;
        while (current != null) {
            if (current.data == x && current.next != null) {
                System.out.println("After " + x + " is " + current.next.data + ". Deleting " + current.next.data);
                current.next = current.next.next;
                found = true;
                break;
            }
            current = current.next;
        }
        if (!found) {
            System.out.println("Element (" + x + ") not found...");
        }
    }

    public void traverse() {
        System.out.println("\nShowing content of my linked list:");
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println("\n");
    }

    public static void main(String[] args) {
        SinglyLinkedListFinals sl = new SinglyLinkedListFinals();

        sl.add(10);
        sl.add(20);
        sl.add(30);
        sl.add(40);
        sl.add(50);

        sl.addAfter(11, 10);
        sl.addAfter(21, 20);
        sl.addAfter(31, 30);
        sl.addAfter(41, 40);
        sl.addAfter(51, 50);

        sl.traverse();

        sl.deleteFront();
        sl.deleteFront();

        sl.traverse();

        sl.deleteAfter(40);
        sl.deleteAfter(40);
        sl.deleteAfter(31);
        sl.deleteAfter(40);

        sl.traverse();
    }
}
```

In this program, we define two classes: `Node` and `SinglyLinkedListFinals`. 

The `Node` class represents a single node in the linked list. It has two properties: `data` to store the data value of the node, and `next` to store the reference to the next node in the linked list.

The `SinglyLinkedListFinals` class represents the linked list itself. It has a `head` node as the starting point of the list.

The `add` method is

 used to insert a new element at the end of the linked list. It creates a new `Node` with the given data, and if the list is empty, it sets the new node as the head. Otherwise, it iterates through the list to find the last node and attaches the new node to it.

The `addAfter` method is used to insert a new element after a particular element in the linked list. It creates a new `Node` with the given data and searches for the specified element in the list. If found, it inserts the new node after the specified element by updating the `next` references. If the specified element is not found, it displays an appropriate message.

The `deleteFront` method deletes the first element in the linked list by updating the `head` reference to the next node.

The `deleteAfter` method deletes an element after the element with the specified value in the linked list. It searches for the specified element and if found, it updates the `next` reference of the previous node to skip the node to be deleted. If the specified element is not found, it displays an appropriate message.

The `traverse` method displays the contents of the linked list by iterating through each node and printing its data.

In the `main` method, we create an instance of `SinglyLinkedListFinals` and perform various operations on the linked list. After each operation, the `traverse` method is called to show the updated contents of the list.

When you run the program, it will produce the desired output as shown in the question.

I hope this helps! Let me know if you have any further questions.
