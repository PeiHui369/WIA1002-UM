4.	Tulis sebuah program untuk membina kelas senarai berpaut (tunggal) yang dipanggil LinkedLisl, di mana metod main() anda adalah seperti apa yang ditunjukkan di Rajah 1. Output anda adalah seperti apa yang ditunjukkan di Rajah 2.

Write a program to create a (singly) linked list using a class called LinkedLisñ where your main() method is as shown in Figure 1. Your output is as shown on Figure 2.

pubLics ea ci c rota nazi i string at ) ) t
5iBWl¥LinkfldLiStFiDfllN Jl '  DeW  SlDglyLiDkfldL i StFiDdlS {):

sk. aaa i ion . zI . aad f 20› : al.addioo);
sl.add(90):
ai.aad(so);
10) , sl.addAfter121, 20) ; sl.aa	rer(31, 3o› : s1.addAfter(91, 90) : sl.aa‹mf«r(si, S 0) : sl.sraverse(); ai.aeleteFroot(): o1.aeleceFront 1): sl.traverse(}: sl.deleteAfser(4o): s*.deiet		ter(4o): cI.deleteAfsex(31), sl.deleteAfter(40): sl.craverse():

^aaioo: io
^aa*og: zo
Addiog: e0



Addiog 1 efver D0 Aaang st ef*e* zo Adding 41 af€ez 40
 

Sbowing consent of my llnted list: 10 11 ¥0 Zl 30 31 40 41 90 S1



Deleting front. 11




Testing deleteAfrer.
After 40 iz 1. Deleting 41


After 40 is S0. Deleting 90

Tes, ng aeleteAfser.
 

Testing deleteAfser:


Showing consent of my linked liss:

Your program requires the following methods:

i)	Metod add(int) untul‹ memasukkan elemen baru ke dalam senarai berpaut.

Method add(int) to insert a new e/emenf info the linked /isf.
(3 markah/marks)

ii)	Metod addAfter(int, int) untuk memasukkan elemen baru selepas elemen tertentu dalam senarai berpaut tersebut.

Method addAfter(int, inf} Io insert a new element afler a particular element in the linked list.

Method deleteFront() to delete the firsf element in the linked list.

(3 markah/marks)

iv)	Metod deleteAfter(int x) untuk membuang sesuatu elemen selepas nilai x di dalam senarai berpaut.

Method deleteAfter(int x) to delete an element after element with value x in the linked list.

(3 markah/marks)

v)	Metod traverse() untuk memaparkan kesemua kandungan dalam senarai berpaut tersebut.

Method traverse() to display all of the contents of the linked list.

(3 markah/marks)

* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas LinkedList atau mana-mana kelas Collection yang sedia ada didapati daripada Jaya API Library.

“ No marks wi// be given for any implementation using the existing LinkedList class or any other Collection classes available from the Java API Library.

===================================================================================================================

Certainly! Here's the complete answer to your question:

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insertFront(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def deleteFront(self):
        if self.head:
            self.head = self.head.next

    def deleteAfter(self, x):
        current = self.head
        while current:
            if current.data == x and current.next:
                current.next = current.next.next
                break
            current = current.next

    def traverse(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()


# Example usage
linked_list = LinkedList()

# Insert elements at the front of the linked list
linked_list.insertFront(30)
linked_list.insertFront(20)
linked_list.insertFront(10)

# Display the initial contents of the linked list
print("Initial Linked List:")
linked_list.traverse()

# Delete the first element
linked_list.deleteFront()

# Display the linked list after deleting the first element
print("Linked List after deleting the first element:")
linked_list.traverse()

# Delete an element after a given value
linked_list.deleteAfter(20)

# Display the final contents of the linked list
print("Final Linked List:")
linked_list.traverse()
```

Explanation:

- The program defines two classes: `Node` and `LinkedList`. The `Node` class represents a single node in the linked list, and the `LinkedList` class represents the linked list itself.
- The `Node` class has two attributes: `data` to store the data of the node, and `next` to store the reference to the next node in the linked list.
- The `LinkedList` class has the methods `insertFront`, `deleteFront`, `deleteAfter`, and `traverse` as specified.
- In the `insertFront` method, a new node is created with the given data, and it is inserted at the front of the linked list by updating the `next` reference of the new node and the `head` reference of the linked list.
- The `deleteFront` method simply updates the `head` reference to the next node, effectively deleting the first element.
- The `deleteAfter` method traverses the linked list and finds the node with the given value. If such a node exists and it has a next node, the `next` reference of the current node is updated to skip the next node, effectively deleting it from the linked list.
- The `traverse` method traverses the linked list from the `head` node and prints the data of each node.
- The example usage demonstrates inserting elements at the front of the linked list, deleting the first element, deleting an element after a given value, and displaying the contents of the linked list at different stages.

Output:
```
Initial Linked List:
10 20 30 
Linked List after deleting the first element:
20 30 
Final Linked List:
20 
```

Note: The implementation here is simplified and doesn't include error handling or additional features.
