Queue supports the insert and the remove operations based on the First-in First-out


Write a program to create a class named Queue<ltem>. The class should consist of methods as specified in Table 2:
Constructor for Queue class
Default constructor

isEmpty
Return whether or not the queue is empty

size
Return the size of the queue

peek
Return the value or ihe first element in the queue

enqueue
Add element to the bottom of the queue

dequeue
Remove element from the top of the queue

tostring
Print the element in the queue

Create a method called ChangeOrder(int k) that accepts a parameter of integer k. This method will remove k-1 element from the top of a queue and add its corresponding value to the bottom of the same queue. The k-th element will be added at the bottom of the queue but will not be removed from the queue. For example.‚Äù
Say input: 10,20,30,40,50,60,70,80,90
and value of k=4
Thus the output: 40,50,60,70,80,90,10,20,30

Create a test program to fill the queue with the following values [10, 20, 30, 40, 50, 60, 70, 80, 90]. Call the ChangeOrder method to illustrate your implementation. Print all of the values.
===================================================================================
Here's an example implementation in Java of the `Queue` class with the specified methods, including the `ChangeOrder` method:

```java
import java.util.LinkedList;

public class Queue<Item> {
    private LinkedList<Item> queue;

    public Queue() {
        queue = new LinkedList<>();
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public int size() {
        return queue.size();
    }

    public Item peek() {
        return queue.peek();
    }

    public void enqueue(Item item) {
        queue.addLast(item);
    }

    public Item dequeue() {
        return queue.poll();
    }

    public void changeOrder(int k) {
        if (k < 1 || k > queue.size()) {
            throw new IllegalArgumentException("Invalid value of k");
        }

        for (int i = 0; i < k - 1; i++) {
            Item item = queue.poll();
            queue.addLast(item);
        }
    }

    public String toString() {
        return queue.toString();
    }
}
```

And here's a test program that demonstrates the usage of the `Queue` class and the `ChangeOrder` method:

```java
public class QueueTest {
    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.enqueue(40);
        queue.enqueue(50);
        queue.enqueue(60);
        queue.enqueue(70);
        queue.enqueue(80);
        queue.enqueue(90);

        System.out.println("Before change order: " + queue);

        int k = 4;
        queue.changeOrder(k);

        System.out.println("After change order (k = " + k + "): " + queue);
    }
}
```

When you run the `QueueTest` program, it will fill the queue with the values [10, 20, 30, 40, 50, 60, 70, 80, 90], then call the `changeOrder` method with `k = 4`. Finally, it will print all the values in the queue before and after the change in order.
