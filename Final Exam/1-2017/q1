
 
The Towers of Hanoi problem is a classical problem used recursion. Explanation of the problem goes as follows.
 
to illustrate the power of
 

Terdapat tiga tiang dengan 64 cakera yang berlainan saiz. Asalnya, semua cakera-cakera tersebut telah diletakkan pada tiang pertama dengan cakera terbesar berada paling bawah dan yang terkecil berada paling atas. Anda perlu menggerakkan kesemua cakera-cakera yang terletak di tiang pertama ke tiang ketiga, dengan cakera terbesar berada paling bawah dan yang terkecil berada paling atas. Anda hanya boleh menggerakkan hanya satu cakera pada satu-satu masa dan cakera yang lebih besar tidak boleh diletakkan di atas cakera yang lebih kecil. Tiang kedua boleh digunakan sebagai tiang pengantara untuk membantu anda memindahkan cakera-cakera tersebut.

There are three poles and 64 discs of different sizes. Initially, all the discs are placed on the first pole with the largest disc at the bottom and the smallest one at the top. You need to move all the discs from the first pole to the third pole, with f//e smallest disc at the top and the largest at the bottom. You can move only one disc at a time and at any point of time, a larger disc cannot be placed over a smaller one. The second pole can be used as an intermediate pole to help you in transferring the discs.

Pole 1	Pole 2	Pole 3

For a puzzle with 2 discs (disc 1 and disc 2), the puzzle can be solved with the following steps (algorithm).

Step 1. Move disc 1 from pole 1 fo pole 2
Slep 2: Move disc 2 from pole 1 to pole 3
Step 3.â€™ Move disc 3 from pole 1 to pole 3

Assume that you are given 3 discs (disc 1, disc 2, disc and disc 3), devise an algorithm to solve the Towers of Hanoi problem, in which you are using recursion in your answers.

(3 markah/marks)

Based on the algorithm that you wrote in (a), write a program to solve Towers of Hanoi using recursion.

(7 markah/marks}

===================================================================================================================================================================

Sure! Here's the Java code to solve the Towers of Hanoi problem using recursion:

```java
public class TowersOfHanoi {
    public static void solve(int discs, String source, String auxiliary, String destination) {
        if (discs == 1) {
            System.out.println("Move disc 1 from " + source + " to " + destination);
            return;
        }
        
        solve(discs - 1, source, destination, auxiliary);
        System.out.println("Move disc " + discs + " from " + source + " to " + destination);
        solve(discs - 1, auxiliary, source, destination);
    }
    
    public static void main(String[] args) {
        int totalDiscs = 3;
        String sourcePole = "Pole 1";
        String auxiliaryPole = "Pole 2";
        String destinationPole = "Pole 3";
        
        solve(totalDiscs, sourcePole, auxiliaryPole, destinationPole);
    }
}
```

In the `solve` method, we pass the number of discs, the source pole, auxiliary pole, and destination pole as parameters. The base case is when there's only one disc, in which case we directly move it from the source pole to the destination pole.

For more than one disc, we first recursively move `discs - 1` discs from the source pole to the auxiliary pole using the destination pole as the temporary pole. Then we move the largest disc (disc `discs`) from the source pole to the destination pole. Finally, we recursively move the remaining `discs - 1` discs from the auxiliary pole to the destination pole using the source pole as the temporary pole.

In the `main` method, we specify the total number of discs (in this case, 3) and the names of the three poles. The `solve` method is called with these parameters to solve the Towers of Hanoi problem.

When you run the program, it will print the sequence of moves required to solve the problem.

I hope this helps! Let me know if you have any further questions.
