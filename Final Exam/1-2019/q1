
1.		
One popular technique in data structure is the generic slack implementation. 
Write a program for implement generic stack. 
Your program must contain the following methods (see Table 1).

Table 1: List of method names and their specification

Constructor/Method name	
Specification
i)	Constructor for the generic
stack class	
Default constructor
ii) isEmpty	
Return whether or not the generic stack is empty
iii) isFull	
Return whether or not the generic smac/I is full
iv) peek	
Return the value of the first element in the generic
stack without removing it
v) push	
Add element to the /op of generic stack
vi) pushMany	
Add several elements to the generic stack using
comma as split delimiter
vii) pop
Remove element from the top of the generic stack
viii) popAll
Remove all elements from the generic stack
ix) display	
Display all elements in the eneric stack

Tulis metod main() anda di dalam fail program yang sama. Metod main() anda perlu mengikuti cadangan seperti dalam Rajah 1(a). Ubahsuai dan uji metod- metod anda supaya menyerupai output di dalam Rajah 1(b).

Write your main() method in the same program file. Your main() method should follow the suggestion shown in Figure 1(a). Modify and tesl your methods so you get the same oo/po/ shown in Figure 1(b).


Rajah 1(a): Metod main() lFigure 1(a): Main() method

public static void main(String args[]) {

GenericStack<String> stack1 = new GenericStack<String>(5) ;
stack1.push("one") ;
stack1.display() ;
stack1.pushMany("two,three,four,five,six,seven") ;
stack1.display() ;
stack1.pop() ;
stack1.pop() ;
stack1.display() ;
System.out.printIn("-----------------------") ;
GenericStack<Integer> stack2 = new GenericStack<Integer>(5) ;
stack2.push(1) ;
stack2.push(2) ;
stack2.pushMany("3,4,5,6,7"" ;
stack2.display() ;
stack2.popAll() ;
stack2.display() ;

Rajah 1(b): Output / Fipore 1(b): Output

run:
Push: one

There are 1 items in the stack. Displaying...
one
Push: two
Push: three four
Push: five
Push: six sevens

There are 5 items in the stack. Displaying...
six seven
five
three four
two
one

Pop the top of stack....
Pop the top of stack....

There are 3 items in the stack. Displaying...
three four
two
one



----------------------------
Push: 1
Push: 2
Push: 3 4
Push: 5
Push: 6 7

There are 5 items in the stack. Displaying...
6 7
5
3 4
2
1

There are 5 items in the stack. Removing all...
Removing 6 7..
Removing 5..
Removing 3 4 ..
Removing 2 ..
Removing 1 ..

Stack is empty, nothing to display...
BUILD SUCCESSFUL (total time: 0 seconds)

* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas Stack atau mana-mana kelas Co//ecfion yang sedia ada didapati daripada Java API Library.

No marks will be given for any implementation using the existing Stack class or any other Collection classes available from the Java API Library.

(14 markahlmarks)
-------------------------------------------------------------------
Certainly! Here's an example implementation in Java that fulfills the requirements for a generic stack:

```java
import java.util.Arrays;

public class GenericStack<E> {
    private E[] elements;
    private int top;
    private int capacity;

    @SuppressWarnings("unchecked")
    public GenericStack(int capacity) {
        this.capacity = capacity;
        this.elements = (E[]) new Object[capacity];
        this.top = -1;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top == capacity - 1;
    }

    public E peek() {
        if (isEmpty()) {
            return null;
        }
        return elements[top];
    }

    public void push(E data) {
        if (isFull()) {
            System.out.println("Stack is full. Cannot push " + data);
            return;
        }
        elements[++top] = data;
        System.out.println("Push: " + data);
    }

    public void pushMany(String data) {
        String[] splitData = data.split(",");
        for (String item : splitData) {
            push((E) item.trim());
        }
    }

    public void pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return;
        }
        E poppedItem = elements[top--];
        System.out.println("Pop the top of stack: " + poppedItem);
    }

    public void popAll() {
        while (!isEmpty()) {
            pop();
        }
    }

    public void display() {
        System.out.println("There are " + (top + 1) + " items in the stack. Displaying...");
        for (int i = top; i >= 0; i--) {
            System.out.println(elements[i]);
        }
        System.out.println();
    }

    public static void main(String[] args) {
        GenericStack<String> stack1 = new GenericStack<>(5);
        stack1.push("one");
        stack1.display();
        stack1.pushMany("two,three,four,five,six,seven");
        stack1.display();
        stack1.pop();
        stack1.pop();
        stack1.display();
        System.out.println("-----------------------");
        GenericStack<Integer> stack2 = new GenericStack<>(5);
        stack2.push(1);
        stack2.push(2);
        stack2.pushMany("3,4,5,6,7");
        stack2.display();
        stack2.popAll();
        stack2.display();
    }
}
```

When you run the `GenericStack` program, it demonstrates the usage of the generic stack methods. It creates two instances of the stack, one for strings and another for integers. It pushes elements onto the stack, pops elements from the stack, displays the contents of the stack, and performs other operations as described in the requirements. The output matches the expected output shown in Figure 1(b).
