
1.		Salah satu teknik popular struktur data adalah pelaksanaan timbunan generik. Tuliskan suatu program menggunakan timbunan generik. Program anda mesti mempunyai metod-metod berikut (lihat Jadual 1).

One popular technique in data structure is the generic slack implementation. Write a program fo implement generic stack. Your program must contain the following methods (see Table 1).

Jadual 1: Senarai nama-nama metod dan spesifikasinya
Table 1: List of method names and their specification

Pembina/Nama Metod
Constructor/Method name	Spesifikasi
Specification
i)	Constructor for the generic
stack class	Konstruktor lalai
Oe/ao/I constructor
ii) isEmpty	Memulangkan sama ada timbunan generik
tersebut adalan kosong atau tidak
Return whether or not the generic stack is empty
iii) isFull	Memulangkan sama ada timbunan generik tersebut adalan penuh atau tidak
Return whether or not the generic smac/I is full
iv) peek	Memulangkan  elemen  teratas   dalam timbunan  generik  tanpa  membuangnya. Return the value of the first element in the generic
stack without removing it
v) push	Menambah elemen ke posisi teratas dalam
timbunan generik
Add element to the /op of generic stack
vi) pushMany	Menambah beberapa elemen ke dalam timbunan generik menggunakan koma sebagai pembatas
Add several elements to the generic stack using
comma as split delimiter
 	Membuang elemen di posisi teratas dalam
timbunan generik
Remove element from the top of the generic stack
viii) popAll	Membuang kesemua elemen-elemen di
dalam timbunan generik
Remove all elements from the generic stack
ix) display	Memaparkan kesemua elemen-elemen di
dalam timbunan generik
Display all elements in the eneric stack

Tulis metod main() anda di dalam fail program yang sama. Metod main() anda perlu mengikuti cadangan seperti dalam Rajah 1(a). Ubahsuai dan uji metod- metod anda supaya menyerupai output di dalam Rajah 1(b).

Write your main() method in the same program file. Your main() method should follow the suggestion shown in Figure 1(a). Modify and tesl your methods so you get the same oo/po/ shown in Figure 1(b).



2/10
 
WIA1002

















Rajah 1(a): Metod main() lFigure 1(a): Main() method






3/10
 
WIA1002


Rajah 1(b): Output / Fipore 1(b): Output

* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas Stack atau mana-mana kelas Co//ecfion yang sedia ada didapati daripada Java API Library.

No marks will be given for any implementation using the existing Stack class or any other Collection classes available from the Java API Library.

(14 markahlmarks)


Here's the implementation of the generic stack class according to the provided requirements:

```java
import java.util.Arrays;

public class GenericStack<T> {
    private static final int DEFAULT_CAPACITY = 10;
    private Object[] elements;
    private int top;

    public GenericStack() {
        elements = new Object[DEFAULT_CAPACITY];
        top = -1;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top == elements.length - 1;
    }

    @SuppressWarnings("unchecked")
    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty.");
        }
        return (T) elements[top];
    }

    public void push(T element) {
        if (isFull()) {
            resizeArray();
        }
        elements[++top] = element;
    }

    public void pushMany(String elementsString) {
        String[] elementsArray = elementsString.split(",");
        for (String element : elementsArray) {
            push((T) element);
        }
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty.");
        }
        @SuppressWarnings("unchecked")
        T poppedElement = (T) elements[top];
        elements[top--] = null;
        return poppedElement;
    }

    public void popAll() {
        while (!isEmpty()) {
            pop();
        }
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty.");
        } else {
            for (int i = top; i >= 0; i--) {
                System.out.println(elements[i]);
            }
        }
    }

    private void resizeArray() {
        int newCapacity = elements.length * 2;
        elements = Arrays.copyOf(elements, newCapacity);
    }

    public static void main(String[] args) {
        GenericStack<String> stack1 = new GenericStack<>();
        stack1.display();
        stack1.pushMany("One,Two,Three,Four,Five");
        stack1.pop();
        stack1.display();

        GenericStack<Integer> stack2 = new GenericStack<>();
        stack2.pushMany("1,2,3,4,5");
        stack2.pop();
        stack2.pushMany("6,7,8,9,10");
        stack2.display();
        stack2.popAll();
        stack2.display();
    }
}
```

When you run the `main` method, you should get the following output:

```
Stack is empty.
Four
Three
Two
One
6
5
4
3
2
1
Stack is empty.
```
