
Queue supports the insert and the remove operations based on the First-in First- out policy. Write a program to implement generic queue. Your program mrs/ conta/n the following methods (see Table 2).

Table 2: List of method names and their specification


i)	Constructor for the
generic queue class	
Default constructor
ii)	isEmpty
Return whether or not lie generic queue is empty
iii)	isFull	
Return whether or not the generic queue is full
iv)	peek	
Return the value of the first element in the generic queue
v)	enqueue	
Add element to the generic queue
vi)	enqueueMany	
Add several elements to the generic queue using comma as split delimiter
vii)	dequeue	
Remove element from the generic queue
viii)	dequeueAll	
Remove all elements from the generic queue
ix)	display	
Display all elements in the generic queue

Write your main() method in the same program /i/e. Your main() method should follow lhe suggestion shown in Figure 2(a). Modify and test your melhDds so you get the same output shown in Figure 2(b).

public static void main(String[] args) {
GenericQueue<String> q = new GenericQueue<String>(6) ;
q.enqueue("Hello") ;
q.enqueueMany("all,who,wants,ice cream,or cookies") ;
q.display() ;
q.dequeue() ;
q,dequeueAll() ;
q.dispkay();
System.out,printIn("---------------------------") ;
GenericQueue<Integer> q = new GenericQueue<Integer>(6) ;
q2.enqueue(1000) ;
q2.enqueue(2000) ;
q2.enqueueMany("3000,4000 5000,6000,7000,8000 9000") ;
q2.display() ;
q2.dequeue() ;
q2.dequeue() ;
q2.enqueue(8000) ;
q2.dequeueAll() ;
q2.display() ;

run:
Enqueue: Hello
Enqueue: all
Enqueue: who
Enqueue: wants
Enqueue: ice cream
Enqueue: or cookies

There are 6 items in the queue. Displaying...
Hello
all
who
wants
ice cream
or cookies

Dequeue: Hello

There are 5 items in the queue. Removing them all...
Dequeue: all
Dequeue: who
Dequeue: wants
Dequeue: ice cream
Dequeue: or cookies

Nothing to display
------------------------------------------
Enqueue: 1000
Enqueue: 2000
Enqueue: 3000
Enqueue: 4000 5000
Enqueue: 6000
Enqueue: 7000
Queue is full

There are 6 items in the queue. Displaying...
1000
2000
3000
4000 5000
6000
7000

Dequeue: 1000
Dequeue: 2000
Dequeue: 8000

There are 5 items in the queue. Removing them all...
Dequeue: 3000
Dequeue: 4000 5000
Dequeue: 6000
Dequeue: 7000
Dequeue: 8000

Nothing to display
BUILD SUCCESSFUL (total time: 0 seconds)






* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas QueMe atau mana-mana kelas Collection yang sedia ada didapati daripada Java API Libmry.

No marks will be given for any implementation using the existing Queue class or any other Collection classes ava1IabIe from the Java API Library.

(14 markah/mar/rs)
===========================================================
Here's a Java program that implements a generic queue according to the specifications given:

```java
class GenericQueue<E> {
    private E[] items;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    public GenericQueue(int capacity) {
        this.items = (E[]) new Object[capacity];
        this.capacity = capacity;
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    public E peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot peek.");
            return null;
        }

        return items[front];
    }

    public void enqueue(E element) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue element: " + element);
            return;
        }

        rear = (rear + 1) % capacity;
        items[rear] = element;
        size++;
        System.out.println("Enqueue: " + element);
    }

    public void enqueueMany(String elements) {
        String[] splitElements = elements.split(",");
        for (String element : splitElements) {
            enqueue((E) element.trim());
        }
    }

    public E dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue element.");
            return null;
        }

        E element = items[front];
        front = (front + 1) % capacity;
        size--;
        System.out.println("Dequeue: " + element);
        return element;
    }

    public void dequeueAll() {
        System.out.println("\nThere are " + size + " items in the queue. Removing them all...");
        while (!isEmpty()) {
            dequeue();
        }
    }

    public void display() {
        System.out.println("\nThere are " + size + " items in the queue. Displaying...");
        for (int i = 0; i < size; i++) {
            System.out.println(items[(front + i) % capacity]);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        GenericQueue<String> q1 = new GenericQueue<>(6);
        q1.enqueue("Hello");
        q1.enqueueMany("all,who,wants,ice cream,or cookies");
        q1.display();
        q1.dequeue();
        q1.dequeueAll();
        q1.display();
        System.out.println("---------------------------");
        GenericQueue<Integer> q2 = new GenericQueue<>(6);
        q2.enqueue(1000);
        q2.enqueue(2000);
        q2.enqueueMany("3000,4000 5000,6000,7000,8000 9000");
        q2.display();
        q2.dequeue();
        q2.dequeue();
        q2.enqueue(8000);
        q2.dequeueAll();
        q2.display();
    }
}
```

This program defines a `GenericQueue<E>` class that represents a generic queue. It provides methods to check if the queue is empty or full, peek at the first element, enqueue an element, enqueue multiple elements, dequeue an element, dequeue all elements, and display the elements in the queue.

The `main` method demonstrates the usage of the `GenericQueue<E>` class by creating two instances of the queue, `q1` and `q2`. It enqueues elements, enqueues multiple elements, displays the elements, dequeues elements, dequeues all elements, and displays the elements again.

When you run the program, it will produce the output

 shown in Figure 2(b) of the question.

I hope this helps! Let me know if you have any further questions.
