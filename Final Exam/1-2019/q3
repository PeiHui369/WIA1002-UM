
One popular technique in data structure is linked list. Write a program using linked list. Your program must contain I/te following methods {see Table 3).


Table 3: List of method names and their specification

i)	Constructor for the linked
list class	
Default constructor far the linked list class
ii) Constructor for the node
class	
Default constructor for the node class
iii) isEmpty	
Return whether or not the linked list is empty
iv) add	
Add element to the linked list
v) addAfter	
Add new element after existing element in the linked list
vi) remove	
Remove a particular element from the linked list
vii) display	
Display all elements in the linked list
viii) totalCreditHours()	
Count the total credit hours collected

Write your main() method in the same program file. Your main() method should follow the suggestion shown in Figure 3(a). Modify and test your methods so you get the same output shown in Figure 3(
public static void main(String[] args) {

LinkedList list = new LinkedList() ;
list.add("Computing Mathematics", 3);
list.add("Network Architecture", 3);
list.add("Final Year Project", 5);
list.add("Data Structure", 5);
list.display();
list.totalCreditHours() ;
list.addAfter("Final Year Project", "Software Modelling", 4) ;
list.addAfter("Software Modelling", "Intelligent Robot", 3) ;
list.addAfter("Computing Mathematics", "Gamification", 4) ;
list.totalCreditHours() ;
list.remove("Network Architecture", 3) ;
list.remove("Software Modelling", 4) ;
list.display() ;
list.totalCreditHours() ;

run:
displaying the Linked List ----------------------------------------

Data Structure: 5 hours
Final Year Project: 5 hours
Network Architecture: 3 hours
Computing Mathematics: 3 hours
Total Credit Hours: 16
Adding Software Modelling after Final Year Project
Adding Intelligent Robot after Software Modelling
Adding Gamification after Computing Mathematics
Total Credit Hours: 27
Removing Network Architecture..
Removing Software Modelling..
Displaying the Linked List-------------------------------

Data Structure: 5 hours 
Final Year Project: 5 hours
Intelligent Robot: 3 hours
Computing Mathematics: 3 hours
Gamification: 4 hours

Total credit hours: 20
BUILD SUCCESSFUL (total time: 0 seconds)


* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas Linked List atau mana-mana kelas Collection yang sedia ada  didapati  daripada Java API Library.

' No marks will be given for any implementation using the existing Linked List c/ass or
any other Collection classes ava//ab/e from the Java API Library.

======================================================================================================================

Sure! Here's a Java program that implements a linked list according to the specifications given:

```java
class Node {
    String course;
    int creditHours;
    Node next;

    public Node(String course, int creditHours) {
        this.course = course;
        this.creditHours = creditHours;
        this.next = null;
    }
}

class LinkedList {
    private Node head;

    public LinkedList() {
        this.head = null;
    }

    public boolean isEmpty() {
        return head == null;
    }

    public void add(String course, int creditHours) {
        Node newNode = new Node(course, creditHours);
        if (isEmpty()) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void addAfter(String existingCourse, String newCourse, int creditHours) {
        Node current = head;
        while (current != null) {
            if (current.course.equals(existingCourse)) {
                Node newNode = new Node(newCourse, creditHours);
                newNode.next = current.next;
                current.next = newNode;
                break;
            }
            current = current.next;
        }
    }

    public void remove(String course, int creditHours) {
        if (head == null) {
            return;
        }
        if (head.course.equals(course) && head.creditHours == creditHours) {
            head = head.next;
            return;
        }
        Node current = head;
        Node previous = null;
        while (current != null) {
            if (current.course.equals(course) && current.creditHours == creditHours) {
                previous.next = current.next;
                break;
            }
            previous = current;
            current = current.next;
        }
    }

    public void display() {
        System.out.println("Displaying the Linked List ------------------------------");
        Node current = head;
        while (current != null) {
            System.out.println(current.course + ": " + current.creditHours + " hours");
            current = current.next;
        }
        System.out.println();
    }

    public void totalCreditHours() {
        int totalHours = 0;
        Node current = head;
        while (current != null) {
            totalHours += current.creditHours;
            current = current.next;
        }
        System.out.println("Total credit hours: " + totalHours);
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.add("Computing Mathematics", 3);
        list.add("Network Architecture", 3);
        list.add("Final Year Project", 5);
        list.add("Data Structure", 5);
        list.display();
        list.totalCreditHours();
        list.addAfter("Final Year Project", "Software Modelling", 4);
        list.addAfter("Software Modelling", "Intelligent Robot", 3);
        list.addAfter("Computing Mathematics", "Gamification", 4);
        list.totalCreditHours();
        list.remove("Network Architecture", 3);
        list.remove("Software Modelling", 4);
        list.display();
        list.totalCreditHours();
    }
}
```

This program defines a `Node` class that represents a node in the linked list. Each node contains information about a course and its credit hours, as well as a reference to the next node.

The `LinkedList` class represents the linked list and provides methods to add elements, add elements after an existing element, remove elements, display the list, and calculate the total credit hours.

The `main` method demonstrates the usage of the linked list by creating an instance of

 the `LinkedList` class, adding elements, performing operations, and displaying the results.

I hope this helps! Let me know if you have any further questions.
