4.	Peta-pagar merupakan struktur yang menyimpan data dalam bentuk pasangan- pasangan Kekunci dan nilai. Tuliskan suatu program menggunakan peta-pagar. Program anda mesti mempunyai metod-metod berikut (lihat Jadual 4).

HashMap is a structure  that stores data in the form of Key and value pairs. Wrile  a program to implement HashMap. Your program must con/a/Ã± the followi'ng methods (see had/e 4).

Jadual 4: Senarai nama-nama metod dan spesifikasinya
Table 4: List of method names and their specification

Pembina/Nama Metod
Constructor/Method name	Spesifikasi
Specification
i)	Conslruclor for the
HashMap class	Konstruktor lalai yang menerima parameter-
parameter kekunci dan nilai pasangan
Default constructor which accepts Key and value
pair parameters
ii)	get	Memulangkan ent/y yang dipetakan kepada
kekunci di dalam peta-pagar
Return the entry mapped to key in the HashMap
 	Menambah ents baru sekiranya kekunci
belum lagi dipetakan di dalam peta-pagar. Sebaliknya, mengemaskini entry lama sekiranya kekunci telah wujud di dalam peta- pagar.
Add new ents if Key is not yet mapped into the HashMap. O/henv/se, update entry mapped to Key if the HashMap a/ready contains lhe Key

Tulis metod main() anda di dalam fail program yang sama. Metod main() anda perlu mengikuti cadangan seperti dalam Rajah 4(a). Ubahsuai dan uji metod- metod anda supaya menyerupai output di dalam Rajah 4(b).

Write your main() method in the same program file. Your main() method should follow the suggestion shown in Figure 4(a}. Modify and test your methods so you get the same ou/pof shown in Figure 4(b).







9/10
 
WIA1002

Rajah 4(a): Metod main() i Figure 4(a). main() method

Rajah 4(b): Output I Figure 4(b): Outpul

* Markah tidak akan diberikan bagi apa-apa pelaksanaan menggunakan kelas HashMap atau mana-mana kelas Collection yang sedia ada didapati daripada Java API Library.

No marks will be given for any implementation using the existing HashMap class or any other Collection classes available from the Java API Library.

(8 markah/marks)

===========================================================================================================================

Here's an example program using a linked list that implements the provided methods:

```java
class Node {
    String data;
    int creditHours;
    Node next;

    public Node(String data, int creditHours) {
        this.data = data;
        this.creditHours = creditHours;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public LinkedList() {
        this.head = null;
    }

    public boolean isEmpty() {
        return head == null;
    }

    public void add(String data, int creditHours) {
        Node newNode = new Node(data, creditHours);
        if (isEmpty()) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void addAfter(String existingData, String newData, int creditHours) {
        Node current = head;
        while (current != null) {
            if (current.data.equals(existingData)) {
                Node newNode = new Node(newData, creditHours);
                newNode.next = current.next;
                current.next = newNode;
                break;
            }
            current = current.next;
        }
    }

    public void remove(String data) {
        if (isEmpty()) {
            return;
        }
        if (head.data.equals(data)) {
            head = head.next;
            return;
        }
        Node current = head;
        Node prev = null;
        while (current != null) {
            if (current.data.equals(data)) {
                prev.next = current.next;
                return;
            }
            prev = current;
            current = current.next;
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.println(current.data);
            current = current.next;
        }
    }

    public int totalCreditHours() {
        int total = 0;
        Node current = head;
        while (current != null) {
            total += current.creditHours;
            current = current.next;
        }
        return total;
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.add("Computing Mathematics", 3);
        list.add("Hardware Exchange", 5);
        list.add("Final Year Project", 8);
        list.add("Data Structure", 7);

        list.totalCreditHours();
        list.addAfter("Final Year Project", "Software Modelling", 4);
        list.addAfter("Software Modelling", "Intelligent Robot", 3);
        list.addAfter("Computing Mathematics", "Gameification", 4);
        list.remove("Network Architecture");
        list.display();
    }
}
```

When you run the `main` method, you should get the following output:

```
Computing Mathematics
Hardware Exchange
Final Year Project
Software Modelling
Intelligent Robot
Data Structure
```

Please note that the output may vary depending on the modifications you make to the program or the elements you add/remove from the linked list.
