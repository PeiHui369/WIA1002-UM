
From the perspective of a programmer, one of the most challenging tasks is to match the left-bracket to the corresponding right-bracket. Some of the commonly used brackets in writing a program are listed in Table 1

Table 1: Brackets that are commonly in use

Left	Right    Name
[	  ]     Bracket
{         }     Curly Bracket
(	  )     Round Bracket
<	  >     Angled Bracket
		


Devise an algorithm to check whether an input of type string consists of matched
brackets. The algorithm outputs "YES - all matched!" when all left-brackets are
matched by their coresponding right-brackets of the same type. If there exists some
brackets that not matched, the algorithm should output "Not all brackets are
matched". If there is no bracket in the input string, output "There is no bracket in tne
input". Summarize your algorithm in the form of pseudo-code.
(5 markah/marks)

Translate your psuedo-code into a program, which accepts the input string through a
text file caled- BracMatch. txt. The file consists of several lines of texts. An example
of the content of the BracMatch txt file is as follows.

(x,y;z)
(area<un[der{the}curv]e>nothing)
(DS-{is[my>]}
])
datastructure

================================================================================================================================================

Apologies for the confusion. Here's the corrected Java program that implements the algorithm to check whether an input string consists of matched brackets:

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Stack;

public class BracketMatcher {
    public static void main(String[] args) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("BracMatch.txt"));
            String line;

            while ((line = reader.readLine()) != null) {
                String result = checkBracketMatch(line);
                System.out.println(result);
            }

            reader.close();
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
    }

    public static String checkBracketMatch(String inputString) {
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < inputString.length(); i++) {
            char character = inputString.charAt(i);

            if (isLeftBracket(character)) {
                stack.push(character);
            } else if (isRightBracket(character)) {
                if (stack.isEmpty()) {
                    return "Not all brackets are matched";
                } else {
                    char top = stack.peek();
                    if (isMatchingBracket(top, character)) {
                        stack.pop();
                    } else {
                        return "Not all brackets are matched";
                    }
                }
            }
        }

        if (stack.isEmpty()) {
            return "YES - all matched!";
        } else {
            return "Not all brackets are matched";
        }
    }

    public static boolean isLeftBracket(char bracket) {
        return bracket == '(' || bracket == '[' || bracket == '{' || bracket == '<';
    }

    public static boolean isRightBracket(char bracket) {
        return bracket == ')' || bracket == ']' || bracket == '}' || bracket == '>';
    }

    public static boolean isMatchingBracket(char left, char right) {
        return (left == '(' && right == ')') ||
                (left == '[' && right == ']') ||
                (left == '{' && right == '}') ||
                (left == '<' && right == '>');
    }
}
```

Please make sure to create a text file named `BracMatch.txt` and populate it with the desired input strings. Each input string should be on a separate line. Then, run the Java program to read the file and check if the brackets are matched for each line. The program will print the corresponding output for each input string.

I apologize for the earlier mistake and appreciate your understanding. Let me know if you have any further questions.
