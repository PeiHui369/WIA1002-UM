2.	Dari perspektif seorang pengaturcare, sslah satu tugas yang paling mencabar adalah untuk memadankan kurungan kiri dengan kurungan kanan. Kurungam kurungan yang lazimnya digunakan dalam menulis program tercenarai dalam Jadual 1.

Ifiom tfie perspeoflve of a programmer, one of he most chelleztging fasks is to match tfie let-breoket to tfie fionespoadlng fights. flame of he commonly used brackets in smiling a program are //sfed in Cab/e f.
Jadual 1: Kurungan-kurungan yang lazimnya digunakan
rad/e 1: Brackets that eve commonly In uae

Kiri /Loft	Kanan /R"/g/if	Nama /Name
		

 	
 	curty brenkeWcurly breaes

 	
 	round Aracket/parenihesis
		

a)	Rangka satu algoritma untuk memertkaa sama ada input )enls sling yang dibekalkan tardirt daripada kurungan-kurungan yang telah dlpadankan. Algorttma itu akan memberi output EA — semua kurungan Blah dlpadankanl” apabila semua kurungan kiri dipadankan oleh.kurungan kanan mengikut jenis yang berpadanan. Sekiranya ada kurungan yang tidak disopadankan, algorttma itu akan memberikan output "Not a// branhets are male/›e‹f’. Jika 8dak ada kurungan dalam input jenis strinp, output "There is no 6‹acaef In ffie inpuf’. Ringkaskan algorftma arda dengan menggunakan format kod-pseudo.
 
\MA1D02

Oevise an otgofitfim to fihefik eihe‹ an input of type stfing consists a/ me/ched brackets 7he algorithm outputs “YES - all matched!“ when all /e/t-dzac/refs are matched 6y /f›eircorresprrid/og @/if-0rackefs of fho same /ype. If thefe exists some brackets that n‹:›t matched, the atgofithm should output "Not all dzackets ara matched*. ff there is no bracket in tha input slfing. output “The/e is no bracket in the input“. Summarize your aigofithm in tho forn› of peeudo•cod8.

(5 markah/marks)

b)	Te/jemahkan kod-pseudo anda ke dalam 9ebuah program yang menerima input beijenis s/ring melalui teks fail yang bemama - 8racUatch.lxl. Fail tersebut mengandungi beberapa barisan teks. Contoh maklumat yang tarkandune di dalam fail BracMelch.txt adalah seperti berikut:
Translate yourpsuedo-code into a program, wfiiinh dCOO§ls fhe i•R*i s•*•e thigh a text file called - BfiecMefch. txt. The flla flannels ol' severa/ lines of' fexts. An exarrip/e of he conlant of //ie BrecMatsfi. lxl lima ie es follows:

(axa•uc/der{Mejcurv]e•nothng]
{D	sf lJ

================================================================================================================================================

a) Pseudo-code for matching brackets algorithm:

```
function checkBracketMatching(inputString):
    stack = empty stack

    for each character in inputString:
        if character is a left bracket:
            push character to stack
        else if character is a right bracket:
            if stack is empty or top of stack is not the corresponding left bracket:
                return "Not all brackets are matched"
            else:
                pop the top of stack

    if stack is not empty:
        return "Not all brackets are matched"
    else if inputString does not contain any brackets:
        return "There is no bracket in the input"
    else:
        return "All brackets are matched"
```

b) Here's the implementation of the program in Python that reads input from a text file named "BracketMatch.txt":

```python
def check_bracket_matching(input_string):
    stack = []

    for char in input_string:
        if char in ['(', '[', '{']:
            stack.append(char)
        elif char in [')', ']', '}']:
            if len(stack) == 0 or not is_matching(stack[-1], char):
                return "Not all brackets are matched"
            else:
                stack.pop()

    if len(stack) > 0:
        return "Not all brackets are matched"
    elif all(char not in ['(', ')', '[', ']', '{', '}'] for char in input_string):
        return "There is no bracket in the input"
    else:
        return "All brackets are matched"


def is_matching(left, right):
    if left == '(' and right == ')':
        return True
    elif left == '[' and right == ']':
        return True
    elif left == '{' and right == '}':
        return True
    else:
        return False


# Read input from file
with open("BracketMatch.txt", "r") as file:
    lines = file.readlines()

for line in lines:
    input_string = line.strip()
    result = check_bracket_matching(input_string)
    print(result)
```

Note: Make sure the "BracketMatch.txt" file is in the same directory as the Python program, and it contains the input strings on separate lines.

Example content of "BracketMatch.txt":
```
axa[uc/der{Mej(curv]e)noth}ing]
{D(sf lJ
```

Example output:
```
All brackets are matched
Not all brackets are matched
```

I hope this helps! Let me know if you have any further questions.
