Write a program to create a (singly) linked list using a class called LinkedList, where your
main) method is as shown in Figure 4. Your output is as shown on Figure 5. Your
program requires the following methods

Method ad(int) to insert a new element into the linked list.
(3 markah/marks)
Method addAfter(int, int)to insert a new element after a particular element in the
linked list.
(3 markah/marks)
Method deleteFront() to delete the first element in the linked list.
(3 markah/marks)
iv) 
Method deleteAfter(int x) to delete an element after element with value x in the linked
list.
(3 markah/marks)
v) 
Method traverse() to display al of the contents of the linked list
(3 markahlmarks) 

==========================================================================================================
Here's the Java implementation of a singly linked list using a `LinkedList` class with the required methods:

```java
public class LinkedList {
    private Node head;

    public LinkedList() {
        head = null;
    }

    // Method to insert a new element at the front of the linked list
    public void add(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Method to insert a new element after a particular element in the linked list
    public void addAfter(int key, int data) {
        Node newNode = new Node(data);
        Node current = head;

        while (current != null) {
            if (current.data == key) {
                newNode.next = current.next;
                current.next = newNode;
                return;
            }
            current = current.next;
        }

        System.out.println("Element " + key + " not found in the linked list.");
    }

    // Method to delete the first element in the linked list
    public void deleteFront() {
        if (head == null) {
            System.out.println("Linked list is empty. No element to delete.");
            return;
        }

        head = head.next;
    }

    // Method to delete an element after a particular element in the linked list
    public void deleteAfter(int key) {
        Node current = head;

        while (current != null) {
            if (current.data == key) {
                if (current.next == null) {
                    System.out.println("No element found after " + key + " to delete.");
                    return;
                }

                current.next = current.next.next;
                return;
            }
            current = current.next;
        }

        System.out.println("Element " + key + " not found in the linked list.");
    }

    // Method to traverse and display the contents of the linked list
    public void traverse() {
        if (head == null) {
            System.out.println("Linked list is empty.");
            return;
        }

        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Node class representing a node in the linked list
    private class Node {
        private int data;
        private Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Main method for testing the linked list
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();

        // Inserting elements into the linked list
        linkedList.add(10);
        linkedList.add(20);
        linkedList.add(30);

        // Displaying the linked list
        System.out.print("Linked List: ");
        linkedList.traverse();

        // Inserting element after a particular element
        linkedList.addAfter(20, 25);

        // Displaying the linked list after adding element
        System.out.print("Linked List after adding element: ");
        linkedList.traverse();

        // Deleting the first element
        linkedList.deleteFront();

        // Displaying the linked list after deleting first element
        System.out.print("Linked List after deleting first element: ");
        linkedList.traverse();

        // Deleting element after a particular element
        linkedList.deleteAfter(20);

        // Displaying the linked list after deleting element
        System.out.print("Linked List after deleting element: ");
        linkedList.traverse();
    }
}
```

When you run the program, it will create a `LinkedList` instance and perform the following operations:
- Insert elements 10, 20, and 30 into the linked list.


- Display the linked list.
- Insert an element with value 25 after the element with value 20.
- Display the linked list after inserting the element.
- Delete the first element from the linked list.
- Display the linked list after deleting the first element.
- Delete the element after the element with value 20.
- Display the linked list after deleting the element.

The program will output the results as shown in Figure 5.

I hope this helps! Let me know if you have any further questions.
