4.	Tulis cebuah program untuk membina kelas senarai berpaut (tunggal) yang dipanggll L.lnkedList, di mana matod mafng anda adalah seperti. apa yang ditunjukkan dl Rajah 4. Oogzut anda adalah seperti apa yang ditunjukkan di Rajah S. Program anda perlu mempunyai metod-metod berikut:

Wfife a program to aeote a (singly) linked list using a c/asa called LinkedList, where your malztg mettxxl is as shown in F”igura 4. Your a zzt is as sha 'n on Figure 5. Your program regal/res.fhe following methods:




6/9
 



 

i)	Metod add(intj
tersebut.
 
WIA1002

untuk memaaukkan  elemen baru ke dalam  senarai berpaut
 

Method edd(int) to insert a new element into f/ie linked list.
(3 markah/r»arxs)
 
ii)	Metod addA/teq'inf, int) untuk memssukkan tertentu dalam senarai berpaut tersebut..
 
elemen baru selepas elemen
 

 
Method addAfler(int, linked list.
 
int) to insert a j?gjiy oternent sger e parf/cu/sr element in the
(3 markah/warms)
 
iM) Metod de/e/eFront¿
berpaut tersebut.
 
untuk membuang elemen pertama di dalam ssnarai
 

 
/Idefhod de/efeFror/t{} fo delete the first element in I/ie llnkeo list..
 

(3 markah/marf‹s)
 
iv)	Nletod deleteAfler(int x) untuk membuang sesuatu elemen selepas nilai x di
dalam senarai berpaut.

Meth‹:x:I deIeteAffer(inl x) /o de/efe an Element 8fter element with value x in the linked list.
 

v)	Metod fraverse(j
berpaut tersebut.
 
(3 markah/mar/‹s) untuk memaparkan kesemua kandungan dalam senarai
 

Method traversed to diaptay all of the moments of the linked list.
(3ma1aCma%a)

 
” Markah tidak akan diberikan bagi apawpa LinhedList atau mana-mana kelas Coyect‹on Java API Library.
 
pelaksanaan menggunakan kelas yang sedia ada didapatl daripada
 

  using the existing. Lin/redUst c/ass or
any ather Co//ecfion c/asses ava//a6/e haul fhe Jsva API Library.

public otaoic void maio(5 ring •C1)(
T; krulios sl - new L*nkedL*st():

sl.addl10):
s I . add t 2 O );
sl.add(30);
*l.add{9O):
sl.add(SO): sl.addAfter (II, IO):


sl.addAfoert i. 9O): ol.addAz&er(sl, to): si.oraversmr ;
s1 .delm ceFront l):
i.	a•i•zoFrono{):
Jl.trovcKDC(}:
ol.delateA[oer(9O);

st . de1ec eAyc ez ( 3 1 ):
s1 . dc Ie c eAzc ez I t o } •

Adding - S 0
*^O	I  1   •  £c  •  z    1 0
Add1szq  31  aroe  x   z a




Shwvicg	-•==*• of ey i	tad list:




*-°	g fronc: 11


TO 21 30 Zl 4O 41 &u bi


 

hfrmr 40 i* 00. Dmlccing sD Tmnci-nJ dmlccoAfsnr:
After 31 is d0. I*elecing 40



Shcnaing =• ’	of oy linked  Liot: BDILD SNCWESSFUL (total time: 0 seoondc›
=================================================================================================================================
Here's the program to create a class named `LinkedList` and implement the required methods:

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def add(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def add_after(self, data, after_value):
        new_node = Node(data)
        if self.head is None:
            return
        current = self.head
        while current:
            if current.data == after_value:
                new_node.next = current.next
                current.next = new_node
                return
            current = current.next
        print(f"Element {after_value} not found in the linked list.")

    def delete_front(self):
        if self.head is None:
            return
        self.head = self.head.next

    def delete_after(self, after_value):
        if self.head is None:
            return
        current = self.head
        while current.next:
            if current.data == after_value:
                current.next = current.next.next
                return
            current = current.next
        print(f"Element {after_value} not found in the linked list.")

    def traverse(self):
        if self.head is None:
            print("Linked list is empty.")
            return
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()


# Test the implementation
linked_list = LinkedList()
linked_list.add(10)
linked_list.add(20)
linked_list.add(30)
linked_list.add(40)
linked_list.add(50)
linked_list.traverse()

linked_list.add_after(35, 30)
linked_list.traverse()

linked_list.delete_front()
linked_list.traverse()

linked_list.delete_after(20)
linked_list.traverse()
```

Output:
```
10 20 30 40 50 
10 20 30 35 40 50 
20 30 35 40 50 
20 35 40 50 
```

I hope this helps! Let me know if you have any further questions.
