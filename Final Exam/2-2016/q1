A week consists of seven days. A class called Oay should store the days from Monday through Sumtey. Des”ign and write a program for days of the week that should do this

Allows users to key in an input ol' he day based on numbers such as 1 for Monday
and 2 for Tuesday. (/.e.. 1 = Monday, 2 = Tuesday, ... , 7 -- Sunday).


Display the corresponding full name of the day of (i}.

Calculate and display the /b/lowing and previous days based on the number entered

Calculate and return the day by adding certain days to the current day as specified by (ii). for example, if the current day is Monday and we add four days, the day to be returned is Friday. Similarly, if the current day is Tuesday and we add 13 days, the day to be returned is Monday.

Considering all of the above given information:

Identify the program requirements by representing them using one UML. Class for the
Day class.
(3 markah/mets)

Write a program to implement the day class following the identified requirements.

(5 markah/marks)
 
WIA1002

Write a test program in the format given in the following output examples.
(2 markañ/maAe)

An example output of the program is as follow. 

The program creates a LinkedList class that stores book names and their sales figures as nodes. It includes methods to create a node, add a node after a specific node, remove a node, display the linked list, and calculate the total sales. The main() method demonstrates the usage of these methods by creating a linked list of books and performing various operations on it.

Please note that I assumed the sales

 figures are represented as integers. You can modify the code as per your needs and update the sales figure representation accordingly.
 Specify your day in number:
 1	for	Monday
2	for	Tuesday
3	for	Wednesday
A	for	Thursday
5	for	Friday
6	for	Saturday
7	for	Sunday

The name of the day is : Monday
The following day of Monday is : Tuesday
The   previous   dam  of  t4onday  is	: Sunday
how many days to add to the specified/current day (Monday)? :

The new day after the addition of 4 day(s) is : Friday


Specify your day in number :
1	for	Monday
2 for Tuesday
3	for Wednesday
4	for Thursday 
5 for Friday
6 for Saturday
7 for Sunday

The name of the day is : Sunday
The following day of Sunday is : Monday 
The previous day of Sunday is : Saturday
how many days to add to the specified/current day (Sunday)? :
The   new  day   after  the addition  of  7 day(s) is  : Sunday

Specify your day in number:
1	for Monday
2	for Tuesday
3	for Wednesday
4	for Thursday
5	for Friday
6	for Saturday 
7 for Sunday

The name	of the day is : Thursday
The following day of Thursday is : Friday
The previous day of Thursday is : Wednesday
How many days to add to the specified/current day (Thursday)?
:
23
The new day after the addition of 23 day(s} is : Saturday
========================================================================================
Certainly! Here's the updated response with the implementation in Java:

```java
public class Day {
    private int dayNumber;

    public Day() {
        this.dayNumber = 1; // Set default day as Monday
    }

    public void setDay(int dayNumber) {
        if (dayNumber >= 1 && dayNumber <= 7) {
            this.dayNumber = dayNumber;
        } else {
            System.out.println("Invalid day number. Setting default day as Monday.");
            this.dayNumber = 1;
        }
    }

    public int getDay() {
        return dayNumber;
    }

    public String getFullName() {
        String fullName;
        switch (dayNumber) {
            case 1:
                fullName = "Monday";
                break;
            case 2:
                fullName = "Tuesday";
                break;
            case 3:
                fullName = "Wednesday";
                break;
            case 4:
                fullName = "Thursday";
                break;
            case 5:
                fullName = "Friday";
                break;
            case 6:
                fullName = "Saturday";
                break;
            case 7:
                fullName = "Sunday";
                break;
            default:
                fullName = "Invalid day";
        }
        return fullName;
    }

    public String getNextDay() {
        int nextDayNumber = (dayNumber % 7) + 1;
        Day nextDay = new Day();
        nextDay.setDay(nextDayNumber);
        return nextDay.getFullName();
    }

    public String getPrevDay() {
        int prevDayNumber = ((dayNumber - 2) % 7) + 1;
        Day prevDay = new Day();
        prevDay.setDay(prevDayNumber);
        return prevDay.getFullName();
    }

    public String addDays(int numDays) {
        int newDayNumber = ((dayNumber - 1) + numDays) % 7 + 1;
        Day newDay = new Day();
        newDay.setDay(newDayNumber);
        return newDay.getFullName();
    }
}
```

And here's the test program:

```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Specify your day in number:");
        System.out.println("1 for Monday");
        System.out.println("2 for Tuesday");
        System.out.println("3 for Wednesday");
        System.out.println("4 for Thursday");
        System.out.println("5 for Friday");
        System.out.println("6 for Saturday");
        System.out.println("7 for Sunday");
        System.out.print("Enter your choice: ");

        int dayNumber = scanner.nextInt();

        Day day = new Day();
        day.setDay(dayNumber);

        System.out.println("The name of the day is: " + day.getFullName());
        System.out.println("The following day of " + day.getFullName() + " is: " + day.getNextDay());
        System.out.println("The previous day of " + day.getFullName() + " is: " + day.getPrevDay());

        System.out.print("How many days to add to the specified/current day (" + day.getFullName() + ")? ");
        int numDays = scanner.nextInt();

        String newDay = day.addDays(numDays);
        System.out.println("The new day after the addition of " + numDays + " day(s) is: " + newDay);
    }
}
```

You can copy and run this code in a Java IDE or compiler to test it out. Let me know if you have any more questions!

