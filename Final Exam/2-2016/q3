
Queue supports the insert and the remove operations based on file First-in First-out policy

Write a program to create a class named Queue<Item>. The class should consist of methods as specified in Table 2:


Table 2: List of method names and their specification

i)	Constructor for Queue
class
Default constructor

ii) isEmpty
Return whether or not the queue is empty

iii) size
Return the size of the queue

iv) peek
Return the value of the first element in the queue

v) enqueue
add element to the bottom of the queue

vi) dequeue 
remove element to the bottom of the queue

vii) toString
print the element in the queue 

(11 markah/mans)
	
Create a method called ChangeOrder(int k) that accepts a parameter of integer k.
This method will remove the k-1 element from the top of a queue and add its corresponding value to the bottom of the same queue. The k-th element will be
added at the bottom of the queue but will not be removed from the queue. For example, if k=4, then the output should be 40,50,60,70,80,90,10,20,30.
(2 markah/marks)

Create a test program to fill the queue with the following values [10,20,30,40,50,
60, 70, 80, 90]. Call the ChangeOrder method to illustrate your implementation. Print
all of the values

=========================================================================================================================================

Here's the Java implementation of the `Queue` class and the `ChangeOrder` method:

```java
import java.util.LinkedList;

public class Queue<Item> {
    private LinkedList<Item> queue;

    public Queue() {
        queue = new LinkedList<>();
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public int size() {
        return queue.size();
    }

    public Item peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return queue.getFirst();
    }

    public void enqueue(Item item) {
        queue.addLast(item);
    }

    public Item dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }
        return queue.removeFirst();
    }

    @Override
    public String toString() {
        return queue.toString();
    }

    public void changeOrder(int k) {
        if (k < 1 || k > size()) {
            throw new IllegalArgumentException("Invalid value of k");
        }

        for (int i = 0; i < k - 1; i++) {
            Item item = dequeue();
            enqueue(item);
        }
    }
}
```

And here's a test program that demonstrates the usage of the `Queue` class and the `ChangeOrder` method:

```java
public class QueueTest {
    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();

        // Fill the queue with values [10, 20, 30, 40, 50, 60, 70, 80, 90]
        for (int i = 10; i <= 90; i += 10) {
            queue.enqueue(i);
        }

        System.out.println("Original Queue: " + queue);

        int k = 4;
        queue.changeOrder(k);

        System.out.println("Queue after changing order for k = " + k + ": " + queue);
    }
}
```

When you run the `QueueTest` program, it will create a `Queue` instance, fill it with values [10, 20, 30, 40, 50, 60, 70, 80, 90], and then call the `changeOrder` method with `k = 4`. Finally, it will print the contents of the queue before and after the order change.

I hope this helps! Let me know if you have any further questions.
