Stack

# Common Method


-----------------------
# Additional
@ Balanced Bracket
public static String checkBracketMatch(String inputString) {
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < inputString.length(); i++) {
            char character = inputString.charAt(i);

            if (isLeftBracket(character)) {
                stack.push(character);
            } else if (isRightBracket(character)) {
                if (stack.isEmpty()) {
                    return "Not all brackets are matched";
                } else {
                    char top = stack.peek();
                    if (isMatchingBracket(top, character)) {
                        stack.pop();
                    } else {
                        return "Not all brackets are matched";
                    }
                }
            }
        }

        if (stack.isEmpty()) {
            return "YES - all matched!";
        } else {
            return "Not all brackets are matched";
        }
    }



===========================
# FileReader
 try {
            BufferedReader reader = new BufferedReader(new FileReader("BracMatch.txt"));
            String line;

            while ((line = reader.readLine()) != null) {
                String result = checkBracketMatch(line);
                System.out.println(result);
            }

            reader.close();
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }

##########################################################
Queue

# Array
class GenericQueue<E> {
//private IV
E[] items;
int front, rear, size, capacity;

public GenericQueue(int capacity) {             //(E[] items)
    this.items = (E[]) new Object[capacity];    //items;
    this.capacity = capacity;                   //none
    this.front = 0;                             //0
    this.rear = -1;                             //items.length-1;
    this.size = 0;                              //items.length
}


1. boolean isEmpty() {return size==0;}

2. boolean isFull() {return size == capacity;}

3. E peek() {
        if (isEmpty(){return null;}
      return items[front];
    }

4. void enqueue (E element) {
        if (isFull()) {return;}
      rear = (rear + 1) % capacity;
      items[rear] = element;
      size++;
    }

5. void enqueueMany (String elements) {
      String[] splitElements = elements.split(",");
      for (String element : splitElements) {
            enqueue((E)element.trim());
      }
    }

6. E dequeue() {
            if (isEmpty()) {return null;}
       E element = items[front];
       front = (front + 1)%capacity; //%items.length
       size--;
       return element;
    }

7. void dequeueAll() {
        while (!isEmpty()) {dequeue();}
    }

8. void display() {
        for (int i = 0; i<size; i++) {
            System.out.println (items[(front+i)%capacity]);
        }
    }

9. void changeOrder (int k) { //ele at k become first
            if (isEmpty() || k<0 || k>=size) {return;}
        int count = 0;
        while (count < k) {
            T temp = dequeue();
            enqueue(Temp);
            count++;
        }
    }

10. E getElement (int i) {return items[i];}

11. int getSize() {return size;}

}

# LinkedList
public class Queue<Item> {
    private LinkedList<Item> queue;

    public Queue() {queue = new LinkedList<>();}

1. boolean isEmpty() {return queue.isEmpty();}

2. int size() {return queue.size();}

3. Item peek() {
            if (isEmpty()) {throw new IllegalStateException("");}
        return queue.peek();}
   }

4. void enqueue (Item item) {queue.addLast(item);}

5. Item dequeue() {
            if (isEmpty()) {throw new IllegalStateException("");}
        return queue.poll(); //return queue.removeFirst();
    }

6. void changeOrder (int k) {
        if (k<1 || k>queue.size()) {throw new IllegalArgumentException("");}
        for (int i=0; i<k-1; i++) {
            Item item = queue.poll();
            queue.addLast(item);
        }
    }

7. String toString() {return queue.toString;}
}

##########################################################
Sorting


============================================================
# Additional
public static int getNumRepetitions(int[] nums) {
        int[] sortedNums = Arrays.copyOf(nums, nums.length);
        sort(sortedNums);

        int numRepetitions = 0;
        while (!Arrays.equals(nums, sortedNums)) {
            sort(nums);
            numRepetitions++;
        }

#######################################################3
Stack
Sure! Here are the implementations of the 12 stack methods using LinkedList, ArrayList, and Array without using any pre-existing collection classes:

**1. push(char)**
```java
// LinkedList
public void push(char c) {
    list.add(c);
}

// ArrayList
public void push(char c) {
    array.add(c);
}

// Array
public void push(char c) {
    if (top == array.length - 1) {
        resizeArray();
    }
    array[++top] = c;
}
```

**2. pop()**
```java
// LinkedList
public char pop() {
    if (!list.isEmpty()) {
        return list.removeLast();
    } else {
        return '\0';
    }
}

// ArrayList
public char pop() {
    if (!array.isEmpty()) {
        return array.remove(array.size() - 1);
    } else {
        return '\0';
    }
}

// Array
public char pop() {
    if (top >= 0) {
        return array[top--];
    } else {
        return '\0';
    }
}
```

**3. peek()**
```java
// LinkedList
public char peek() {
    if (!list.isEmpty()) {
        return list.getLast();
    } else {
        return '\0';
    }
}

// ArrayList
public char peek() {
    if (!array.isEmpty()) {
        return array.get(array.size() - 1);
    } else {
        return '\0';
    }
}

// Array
public char peek() {
    if (top >= 0) {
        return array[top];
    } else {
        return '\0';
    }
}
```

**4. isStackEmpty()**
```java
// LinkedList
public boolean isStackEmpty() {
    return list.isEmpty();
}

// ArrayList
public boolean isStackEmpty() {
    return array.isEmpty();
}

// Array
public boolean isStackEmpty() {
    return top == -1;
}
```

**5. isStackFull()**
```java
// LinkedList (Not applicable as LinkedList doesn't have a fixed capacity)

// ArrayList
public boolean isStackFull() {
    return false; // ArrayList can dynamically grow, so it's never full
}

// Array
public boolean isStackFull() {
    return top == array.length - 1;
}
```

**6. popAll()**
```java
// LinkedList
public void popAll() {
    list.clear();
}

// ArrayList
public void popAll() {
    array.clear();
}

// Array
public void popAll() {
    top = -1;
    array = new char[initialCapacity];
}
```

**7. display()**
```java
// LinkedList
public void display() {
    for (char c : list) {
        System.out.print(c + " ");
    }
    System.out.println();
}

// ArrayList
public void display() {
    for (char c : array) {
        System.out.print(c + " ");
    }
    System.out.println();
}

// Array
public void display() {
    for (int i = 0; i <= top; i++) {
        System.out.print(array[i] + " ");
    }
    System.out.println();
}
```

**8. displayInReverse()**
```java
// LinkedList
public void displayInReverse() {
    ListIterator<Character> iterator = list.listIterator(list.size());
    while (iterator.hasPrevious()) {
        System.out.print(iterator.previous() + " ");
    }
    System.out.println();
}

// ArrayList
public void displayInReverse() {
    for (int i = array.size() - 1; i >= 0; i--) {
        System.out.print(array.get(i) + " ");
    }
    System.out.println();
}

// Array
public void displayInReverse() {
    for (int i = top; i >= 0; i--) {
        System.out.print(array[i] + " ");
    }
    System.out.println();
}
```

**9. pushMany()**
```java
// LinkedList
public void pushMany(char[] elements) {
    for (char c : elements) {
        list.add(c);
    }
}

// ArrayList
public void pushMany(char[] elements) {
    for (char c : elements) {
        array.add(c);
    }
}

// Array
public void pushMany(char[] elements) {
    for (char c : elements) {
        push(c);
    }
}
```

**10. popMiddle()**
```java
// LinkedList
public char popMiddle() {
    int middleIndex = list.size() / 2;
    if (list.size() % 2 == 0) {
        middleIndex--;
    }
    return list.remove(middleIndex);
}

// ArrayList
public char popMiddle() {
    int middleIndex = array.size() / 2;
    if (array.size() % 2 == 0) {
        middleIndex--;
    }
    return array.remove(middleIndex);
}

// Array
public char popMiddle() {
    if (top >= 0) {
        int middleIndex = top / 2;
        char middleElement = array[middleIndex];
        System.arraycopy(array, middleIndex + 1, array, middleIndex, top - middleIndex);
        top--;
        return middleElement;
    } else {
        return '\0';
    }
}
```

**11. top()**
```java
// LinkedList
public char top() {
    return peek();
}

// ArrayList
public char top() {
    return peek();
}

// Array
public char top() {
    return peek();
}
```

**12. size()**
```java
// LinkedList
public int size() {
    return list.size();
}

// ArrayList
public int size() {
    return array.size();
}

// Array
public int size() {
    return top + 1;
}
```

These implementations provide the desired stack functionality using LinkedList, ArrayList, and Array without using any pre-existing collection classes from Java.

        return numRepetitions;
    }

