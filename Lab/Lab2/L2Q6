public class MinMaxTwoDArray{

    public static void main (String[] args){
        Integer[][] numbers = {{4,5,6},{1,2,3}}; //Initialize 2D array as normal
        System.out.println("Min = " + min(numbers));
        System.out.println("Max = " + max(numbers));
    }
    
    public static <E extends Comparable<E>> E min (E[][] list){
        E min = list[0][0]; // initialize min to the first element in the array
        for(int i = 0; i < list.length; i++){
            for(int j = 0; j<list[0].length; j++){
                if(list[i][j].compareTo(min) < 0){
                    min = list[i][j];
                }
            }
        }
        return min;
    }
    
    public static <E extends Comparable<E>> E max(E[][] list){
        E max = list[0][0]; // initialize max to the first element in the array
        for(int i = 0; i < list.length; i++){
            for(int j = 0; j<list[0].length; j++){
                if(list[i][j].compareTo(max) > 0){
                    max = list[i][j];
                }
            }
        }
        return max;
    }
}

/*
The method signature public static <E extends Comparable<E>> E min(E[][] list) is a generic method that returns the minimum element in a two-dimensional array of type E. The E parameter extends the Comparable<E> interface, which means that the elements in the array must be comparable to determine the minimum element.

Here's how the method works:

It takes a two-dimensional array list of type E.
It initializes a variable min of type E to the first element in the array.
It loops through each element in the array using nested loops.
For each element in the array, it compares it to the current minimum using the compareTo method.
If the element is less than the current minimum, it updates the minimum to the new element.
After looping through all elements, it returns the minimum element.
Here's an example of how to use the min method with a two-dimensional array of integers:
*/
