A new candy machine is purchased for the cafeteria, but it is not working properly. The candy
machine has four dispensers to hold and release items sold by the candy machine as well as a
cash register. The machine sells four products—candies, chips, gum, and cookies—each stored
in a separate dispenser. You have been asked to write a program for this candy machine so that it
can be put into operation.
The program should do the following:
• Show the customer the different products sold by the candy machine.
• Let the customer make the selection.
• Show the customer the cost of the item selected.
• Accept the money from the customer.
• Return the change.
• Release the item, that is, make the sale.
You can see that the program you are about to write is supposed to deal with dispensers and cash
registers. That is, the main objects are four dispensers and a cash register.
/* Will not be
Because all the dispensers are of the same type, you need to create a class, say, Dispenser, to create
the dispensers. Similarly, you need to create a class, say, CashRegister, to create a cash register.
You will create the class CandyMachine containing the four dispensers, a cash register, and the
application program.
Your tasks are to design ADTs to represent the three classes:
a. Identify the instance variables for each of the class (i.e. Dispenser, Cash Register, Candy
Machine)
b. Identify the methods/operations for each of the class (i.e. Dispenser, Cash Register, Candy
Machine)
c. Produce a UML class diagram to represent the three classes

a. Identify the Instance Variables for each of the class
Dispenser: To make the sale, at least one item must be in the dispenser and the customer must know the cost of the product.
- Product cost: cost
- Number of items in the dispenser: numberOfItems

Cash Register: The cash register acepts money and returns change. (Only 1 instance variable)
- cashOnHand

Candy Machine: The class CandyMachine has four dispensers and a cash register. (Name the 4 dispensers by the item they sotre)
- four dispensers: candy, chip, gum, cookies
- a cash register: cRegister


b. Identify the methods/operation for each of the class
Candy Machine: show(selection); make(selection)
Dispenser: show(cost), make(sale)
Cash Register: accept(money); return(change)

Dispenser:
show(cost): either printing/retrieving the value of the data member cost
make(sale): reducing the number of items in the dispenser by 1 (Dispenser has to be nonempty)
Operation to set the cost & the number of items in the dispenser
- getCount: Retrieve the number of items in the dispenser
- getProductCost: Retrieve the cost of the item
- makeSale: Reduce the number of items in the dispenser by 1
- setNumberOfItems: Set the number of items in the dispenser

Cash Register:
accept(money): updating the money in the cash register by adding the money deposited by the customer
return(change): reducing the money in the cash register by returning the overpaid amound (by the customer) to the customer
Need to (initially) set the money in the cash register & retrieve the money from the cash register
- acceptAmount: Update the amount in the cash register
- returnChange: Return the change
- getCashOnHand: Retrieve the amount in the cash register
- setCashOnHand: Set the amount in the cash register

Candy Machine:
- showSelection: Show the number of products sold by the candy machine
- makeSelection: Allow the customer to select the product
