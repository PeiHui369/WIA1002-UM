public interface BidInterface{
  /** Returns the name of the company making this bid
      Precondition: None
      Postcondition: he name was returned
      @return The name of the company making this bid. */
  public String getCompanyName();
  
  /** Returns the description of the air conditioner that this bid is for.
      Precondition: None
      Postcondition: The description was returned
      @return The description of the air conditioner. */
  public String getDescription);
  
  /** Return the capacity of this bid's AC in tons (1 ton = 12,000 BTU)
      Precondition: None
      Postcondition: The performance was returned
      @return The cooling capacity of the AC unit in tons. */
  public double getCapacity();
  
  /** Return the seasonal efficiency of this bid's AC (SEER)
      Precondtion: None
      Postcondition: The performance was returned
      @return The efficiency of the AC unit*/
 public double getSEER();
 
 /** Return the cost of this bid's AC.
     Precondition: None
     Postcondition: The AC cost was returned.
     @return The cost of the unit in dollars. */
 public double getUnitCost();
 
 /** Returns the cost of installing this bid's AC.
     Precondition: None
     Postcondition: The installation cost was returned.
     @return The cost of installation in dollars. */
 public double getInstallationCost();
 
 /** Returns the yearl cost of operating this bid's AC.
     Precondition: None
     Postcondition: The yearly cost was returned.
     @param hoursOperated aVERAGE NUMBER OF HOURS THE UNIT OPERATES PER YEAR
     @param energyCost Cost in dollars per kilowatt hour
     @return The cost for the year in dollars, cost = 12 * tons * energyCost * hoursOperated/SEER */
 publicdouble getYearlyCost(double hoursOperated, double energyCost);
 
 } //end BidInterface
 
 
 <BidCollectionInterface>
 /**
 This is an interface for a collection of objects each of which is a Bid for installing an air conditioning unit.
 */
 
 public interface BidCollectionInterface{
 
 /** Adds a big to this collection.
     Precondition: None
     Postcondition: The bid was added at the end of the collection
     @param toAdd The bid to add. */
 public void add (BidInterface toAdd);
 
 /** Returns the bid in this collection with the best yearly cost.
     Precondition: The collection is not empty
     Postcondition: The bid with the lowest yearly cost was retuned.
     @param averageHours Average hours of operation per year
     @param energyCost Cost in dollars per kilowatt hour
     @return A bid with the lowest yearly cost. */
 public BidInterface bestYearlyCost(double averageHours, double energyCost);
 
 /** Returns the bid in this collection with the best initial cost.
     The initial cost will be defined as the unit cost plus the installation cost.
     Precondition: The collection is not empty.
     Postcondition: The bid with the lowest initial cost was returned
     @return A bid with the lowest initial cost. */
 public BidInterface bestInitialCost();
 
 /** Clears all of the items from this collection.
     Precondition: None
     Postcondition: The collection is empty. */
 public void clear();
 
 /** Gets the number of items in this collection.
     Precondition: None
     Postcondition: The collection is unchanged. */
 public int getLength();
 
 /** Sees whether this collection is empty.
     Precondition: None
     Postcondition: The collection is unchanged.
     @return True if there are no items in the bid collection, false otherwise. */
 public boolean isEmpty()

} //end BidCollectionInterface
  
  
  LabTest
  9am-10am
  12/4/2023
  Submit to spectrum link
  X chatgpt (will give wrg ans)
  1 ques
  - Look back at how to do all the loop (how it works)
  - ***Iteration
