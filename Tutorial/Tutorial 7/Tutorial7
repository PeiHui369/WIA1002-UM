@ queueName.front(); >>Return first element

T7Q1

Waiting in line at a grocery store checkout: This is a common example of a queue that most people encounter on a regular basis. Customers line up in a single-file queue to pay for their groceries, and the next customer is served once the previous customer has finished paying.

Waiting for a turn at a theme park ride: Another example of a queue is the line that forms for popular attractions at amusement parks. Visitors line up in a queue for their turn to ride the roller coaster or other rides, and are served on a first-come, first-served basis.

Waiting in a queue to speak with customer service: When calling customer service, it's common to be placed in a queue and wait for the next available representative to assist you. This type of queue is often managed by automated systems that play hold music or provide updates on the estimated wait time.

Waiting in a queue to board a plane: When boarding a plane, passengers are often placed in a queue according to their assigned seat numbers. They wait in line to board the plane in a particular order, based on their seating group or priority status.

Waiting for a table at a restaurant: If you arrive at a popular restaurant during peak hours, you may need to wait in a queue for a table. The host or hostess will take your name and let you know how long the wait is expected to be. Once a table becomes available, the next group in the queue is seated. This type of queue is commonly found in restaurants that don't take reservations or have limited seating capacity.

/*
Buying ticket at cinema, Printing
*/

T7Q2
A queue and a stack are both abstract data types that allow for the storage and retrieval of elements in a specific order, but they differ in their fundamental principles of operation:

Queue: A queue is a data structure that follows the First In First Out (FIFO) principle, meaning that the first element that is added to the queue is the first one to be removed. This resembles a real-world queue or line, such as the customers waiting in a bank or grocery store line. The operations of adding an element to the end of the queue and removing an element from the front of the queue are called "enqueue" and "dequeue", respectively.

Stack: A stack, on the other hand, follows the Last In First Out (LIFO) principle, meaning that the last element that is added to the stack is the first one to be removed. This resembles a real-world stack of plates, where the last plate placed on the stack is the first one to be removed. The operations of adding an element to the top of the stack and removing an element from the top of the stack are called "push" and "pop", respectively.

In summary, the main difference between a queue and a stack is the order in which elements are added and removed. A queue follows the FIFO principle, while a stack follows the LIFO principle.

/*
Queue: First in first out (FIFO)
Stack: Last in first out
*/

T7Q3
Queue<Integer> q = new Queue<Integer>();
Scanner keyIn = new Scanner(System.in);
for (int i = 1; i <= 5; i++) {
    if (keyIn.nextBoolean()) {
        System.out.print(i + " ");
    } else {
        q.enqueue(i);
    }
}
while (!q.isEmpty()) {
    System.out.print(q.dequeue() + " ");
}
System.out.println();

/*
Explanation:

The code segment first creates a new queue q and a scanner keyIn to read user input from the console.
It then enters a for loop that runs from i = 1 to i = 5.
For each iteration of the loop, it reads a boolean input value from the user using keyIn.nextBoolean().
If the input value is true, it prints the value of i followed by a space.
If the input value is false, it enqueues the value of i into the queue q.
After the for loop completes, it enters a while loop that runs until the queue q is empty.
For each iteration of the while loop, it dequeues the first element from the queue q using q.dequeue() and prints it followed by a space.
Finally, it prints a newline character to complete the output.
*/

(a) What is the output for the following input sequence?    true  false  false  true  true 
1 4 5 2 3
Explanation:

The loop runs for i = 1 to 5, and for each iteration, it checks the next boolean value input from the user.
When the first input value is "true", it prints the value of i, which is 1.
When the second and third input values are "false", it enqueues the values 2 and 3 into the queue.
When the fourth input value is "true", it prints the value of i, which is 4.
When the fifth input value is "true", it prints the value of i, which is 5.
Finally, it dequeues and prints the values 2 and 3 from the queue, followed by a newline character.

(b) Is it possible to have output: 1 3 5 4 2? If yes, give an input sequence that produces the output; or else, provide justification to your answer.  /* 2 always come before 4, only possible 1 3 5 2 4 */
No, it is not possible to have output 1 3 5 4 2 with this code segment, because the enqueue operations always add elements to the back of the queue, while the dequeue operations always remove elements from the front of the queue. Therefore, the output will always be in the order in which the elements were enqueued, followed by the order in which they were dequeued. The input sequence that would produce the output 1 3 5 4 2 would require more complex operations than just enqueue and dequeue, such as inserting or removing elements from the middle of the queue.

(c) Here are three input sequences that produce the output "1 2 3 4 5":

true true true true true
false false false false false
true false false false false

/* 
true false true false true

In the given code segment, the elements that are not printed immediately (i.e., those for which the user inputs false) are enqueued into a queue. Once all the elements have been generated and enqueued or printed, the code dequeues and prints the elements in the queue in the order they were enqueued. Therefore, the order in which the elements are printed can be different from the order in which they were generated.

In the input sequence "true false true false true", the elements that are printed immediately are 1, 3, and 5, while the elements that are enqueued are 2 and 4. Therefore, when the elements are dequeued from the queue, they are printed in the order 2, 4, which is why the final output is "1 3 5 2 4".

However, if we ignore the order in which the elements were generated and simply look at the order in which they are printed, we can see that the final output is "1 2 3 4 5". This is because the elements that are printed immediately are printed in the correct order, and the elements that are dequeued from the queue are printed in the correct order as well (i.e., in the order they were enqueued).
*/

T7Q4
Queue<Integer> X = new Queue<Integer>();

X.enqueue(new Integer(14));
X.enqueue(new Integer(3));
X.enqueue(new Integer(5));

Object Y = X.dequeue();

X.enqueue(new Integer(7));
X.enqueue(new Integer(9));

Y = X.dequeue();

X.enqueue(new Integer(2));
X.enqueue(new Integer(4));

- Here is the hand tracing of the given operations on the queue X:

X.enqueue(new Integer(14));
Queue X: [14]

X.enqueue(new Integer(3));
Queue X: [14, 3]

X.enqueue(new Integer(5));
Queue X: [14, 3, 5]

Object Y = X.dequeue();
Queue X: [3, 5]
Y = 14

X.enqueue(new Integer(7));
Queue X: [3, 5, 7]

X.enqueue(new Integer(9));
Queue X: [3, 5, 7, 9]

Y = X.dequeue();
Queue X: [5, 7, 9]
Y = 3

X.enqueue(new Integer(2));
Queue X: [5, 7, 9, 2]

X.enqueue(new Integer(4));
Queue X: [5, 7, 9, 2, 4]

Given the resulting queue X above, what would be the result of each of the following?
[5,7,9,2,4]

(a) X.front();                    //[5,7,9,2,4]
>> 5
'X.front();' would return '5', since it is the first element in the queue after the previous 'dequeue' operation.

(b) 
Y = X.dequeue();                  //[7,9,2,4] Y=5
X.enqueue(new Integer(10));       //[7,9,2,4,10]
X.front();                        //7
>> 7

(c) Y = X.dequeue();               //[9,2,4] Y=7

(d) X.front();                     //9


T7Q5
Provide and explain three operations / functions of Linked List based Queue that you can add to the GenericQueue class, other than those discussed in the lecture (i.e., enqueue, dequeue and getSize from Slide 10 in the lecture slide)

1. peek()
This function returns the value of the first element in the queue without removing it.
This function is useful when you want to check the value of the next element in the queue without actually dequeuing it.

public T peek(){
  if(front == null){
    throw new NoSuchElementException();
  }
  return front.value;
}

2. contains(T value)
This function checks if a given value is present in the queue.
It traverses the linked list from front to back and returns true if the value is found in the queue, false otherwise.

public boolean contains (T value){
  Node<T> current = front;
  while(current!=null){
    if(current.value.equals(value)){
      return true;
    }
    current = current.next;
  }
  return false;
}

3. reverse() //#not commonly used
This function reverses the order of elements in the queue.
It swaps the front and back pointers of the linked list, effectively reversing the order of the elements in the queue.

public void reverse(){
  if(front==null){
    return;
  }
  Node<T> prev = null;
  Node<T> current = front;
  Node<T> next = null;
  while(current!=null){
    next = current.next;
    prev = current;
    current = next;
  }
  Node<T> temp = front;
  front = back;
  back = temp;
}

isEmpty() : return true when the queue is empty
peek(): retrieve but do not enqueuer the first element of the queue
toString): convert queue into string format
and others (refer to the linkedlist class)
