1. Describe the main difference between Queue and PriorityQueue. 
Queue: a first-in, first-out(FIFO) data structure
PriorityQueue: priority-based data structure that allows for element to be inserted in any order, bur removed in a specific order determined by their priority

2. Briefly provide THREE (3) real-life example in using PriorityQueue. 
- Hospital triage: 
In a hospital emergency department, patients are typically assessed and triaged according to the severity of their condition. 
A 'PriorityQueue' could be used to hold patients waiting to be seen by a doctor, with the priority based on the severity of their condition. 
This would allow the most critical patients to be seen first, even if they arrived later than other patients.

- Air traffic control: 
In air traffic control, planes must be given clearance to take off and land in a specific order to avoid collisions and congestion. 
A 'PriorityQueue' could be used to hold incoming and outgoing planes, with the priority based on their flight path and the urgency of their landing or takeoff.

- Job scheduling: 
In a computer system, multiple processes or threads may be competing for CPU time. 
A 'PriorityQueue' could be used to hold pending jobs, with the priority based on the amount of CPU time required or the deadline for completion. 
This would allow the most important or urgent jobs to be executed first, even if they were submitted later than other jobs.

3. Show the output for every System.out.println ((a) â€“ (f)) in the following code: 
import java.util.*;

public class PriorityQueueExample {
  public static void main(String args[]) {
    PriorityQueue<String> pQueue = new PriorityQueue<String>();
    pQueue.offer("C++");
    pQueue.offer("Python");
    pQueue.offer("Java");
    pQueue.offer("Fortran");
    System.out.println("peek() gives us: " + pQueue.peek());     //(a)

    System.out.println("The queue elements:");                    //(b) 
    Iterator itr = pQueue.iterator();
    while (itr.hasNext())
        System.out.println(itr.next());                          //(b) 

    pQueue.poll();
    System.out.println("After poll():");                          //(c)
    Iterator<String> itr2 = pQueue.iterator();
    while (itr2.hasNext())
        System.out.println(itr2.next());                          //(c)

    pQueue.remove("Java");
    System.out.println("After remove():");                        //(d)
    Iterator<String> itr3 = pQueue.iterator();
    while (itr3.hasNext())
        System.out.println(itr3.next());                          //(d)

    boolean b = pQueue.contains("Ruby");
    System.out.println("Priority queue contains Ruby or not?: " + b);   //(e)

    Object[] arr = pQueue.toArray();
    System.out.println("Value in array: ");                        //(f)
    for (int i = 0; i < arr.length; i++)
        System.out.println("Value: " + arr[i].toString());        //(f)
}

(a) C++

(b) The queue elements:
C++
Fortran
Java
Python
/*
In (b), the order is not guaranteed because the iteration of a 'PriorityQueue' does not necessarily return elements in the same order they were added. 
The order of iteration is determined by the priority of the elements, which is based on the ordering defined by the elements' 'compareTo' method or a custom 'Comparator' provided when creating the 'PriorityQueue'. 
Therefore, the iteration order of the 'PriorityQueue' may change depending on the contents of the queue and the comparison method used.
*/

(c) After poll():
Fortran
Java
Python
/*
In line (c), the 'poll()' method is called on the 'pQueue' object.
The 'poll()' method removes and returns the head (i.e., the first element) of the priority queue. 
If the priority queue is empty, it returns 'null'. 
In this case, it removes the head element, which is "C++". 
After calling 'poll()', the head element becomes "Fortran".
*/

(d) After remove():
Fortran
Python

(e) Priority queue contains Ruby or not?: false

(f) Value in array:
Value: Fortran
Value: Python

#T7bQ4
public class PriorityQueue2{
  public static void main(String[] args){
    PriorityQueueComparator pqc = new PriorityQueueComparator();    //#
    PriorityQueue<String> pq = new PriorityQueue<String>(5, pqc);   //#
    pq.add("Jason");
    pq.add("Ali");
    pq.add("Muhamad");
    for(String s:pq){
      System.out.println(s);
    }
  }
  
  public class PriorityQueueComparator implements Comparator<String>{
    public int compare(String s1, String s2){
      if(s1.length() < s2.length()){
        return -1;
      }
      if(s1.length() > s2.length()){
        return 1;
      }
      return 0;
    }
  }
  
a) What is the purpose of the PriorityQueueComparator in the code? 
To define a custom ordering for the elements in the priority queue.
In this case, the 'compare' method of the 'PriorityQueueComparator' is used to compare two strings based on their length.
Shorter strings are considered to have a higher priority and will be placed before longer strings in the priority queue

b) What is the output for the code? 
Ali
Jason
Muhamad

/* 
Since the 'PriorityQueueComparator; is used to order the elements based on their length, the priority queue will contain the strings in the following order:
Ali
Jason
Muhamad
When we iterate over the priority queue using the enhanced for loop, the strings are printed in the order in which they are returned by the priority queue's iterator. Therefore, the output of the program is as above.
*/
