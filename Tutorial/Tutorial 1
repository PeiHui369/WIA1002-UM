public class Main{
    public static void main(String[] args){
        String arr[] = new String[5];

        Telephone telephone1 = new Telephone("03", "79676300");
        Telephone telephone2 = new Telephone("03", "79676301");
        Telephone telephone3 = new Telephone("03", "79676302");
        Telephone telephone4 = new Telephone("03", "79676303");
        Telephone telephone5 = new Telephone("03", "79676304");

        arr[0] = telephone1.makeFullNumber();
        arr[1] = telephone2.makeFullNumber();
        arr[2] = telephone3.makeFullNumber();
        arr[3] = telephone4.makeFullNumber();
        arr[4] = telephone5.makeFullNumber();

        for(int i = 0; i<5; i++){
            System.out.println(arr[i]);
        }
    }
}

class Telephone{
    String areaCode;
    String number;
    static int numberOfTelephoneObject;

    Telephone(String areaCode, String number){
        this.areaCode = areaCode;
        this.number = number;
    }

    String getAreaCode(){
        return this.areaCode;
    }

    String getNumber(){
        return this.number;
    }

    void setAreaCode(String areaCode){
        this.areaCode = areaCode;
    }

    void setNumber(String number){
        this.number = number;
    }

    String makeFullNumber(){
        return this.areaCode + "-" + this.number;
    }
}

2.
(1) Performs Person's tasks
(2) Invoke Employee's overloaded constructor
(3) Performs Employee's tasks 
(4) Performs Faculty's tasks

3.
a. AB
 
4.
abstract class Vehicle{
    double maxSpeed;
    protected double currentSpeed;

    Vehicle(double maxSpeed){
        this.maxSpeed = maxSpeed;
    }

    abstract void accelerate();

    double getCurrentSpeed(){
        return this.currentSpeed;
    }

    double getMaxSpeed(){
        return this.maxSpeed;
    }

    void pedalToTheMetal(){
        while(this.currentSpeed!=this.maxSpeed){
            accelerate();
        }
    }
}

public class Main{
    public static void main(String[] args){
        Vehicle a = new Vehicle(99) {
            @Override
            void accelerate() {
               this.currentSpeed +=60;
            }
        };
    }
}

Yes

5.
<Account.java>
public interface Account{
    int deposit(int x);
    boolean withdraw(int y);
}

<BankAccount.java>
public class BankAccount implements Account{
    int balance;
    BankAccount(int balance){
        this.balance = balance;
    }

    @Override
    public int deposit(int x) {
        return this.balance += x;
    }

    @Override
    public boolean withdraw(int y) {
        if((this.balance-y)>=0){
            this.balance =- y;
            return true;
        }else{
            return false;
        }
    }
}
