T4Q1a        
        //Create node1 and node2
        Node<Character> node1 = new Node<>('a');
        Node<Character> node2 = new Node<>('z');

        //Set head and tail to point to node1 & node2 respectively
        Node<Character> head = node1;
        Node<Character> tail = node2;
        
T4Q1b

   head           tail
    |              |
    v              v
  [a] -> null -> ... -> [z] -> null
        
In this representation, the nodes node1 and node2 each contain a single character, 'a' and 'z' respectively. 
The arrows indicate the references head and tail that point to node1 and node2, respectively. 
The empty boxes below the nodes represent the remainder of the node structure, which is not shown in this simplified representation.

T4Q1c
//Set node1's next reference to node2
node1.next = node2;

 head           tail
    |              |
    v              v
  [a] -> [z] -> null -> ... -> null

T4Q1d
Node<Character> firstNode = new Node<>('f');
firstNode.next() = node1;
head = firstNode;

head           tail
    |              |
    v              v
  [f] -> [a] -> [z] -> null -> ... -> null
  

T4Q1e
If we have no information about the status of the linked list, we need to consider the following conditions before adding the firstNode at the beginning of the list:
If the linked list is empty, then firstNode becomes the head of the list.
If the linked list is not empty, then we need to set the next reference of firstNode to point to the current head node, and then update the head reference to point to firstNode.

T4Q1f
1. Create a new node called firstNode
2. If the linked list is empty:
     1. Set head to firstNode
3. If the linked list is not empty:
     1. Set the next reference of firstNode to point to the current head node
     2. Set head to firstNode

T4Q1g
Node<Character> firstNode = new Node<>('f');
if(head == null){
        head = firstNode;
 }else{
        firstNode.next = head;
        head = firstNode;
 }
 //this code assumes that the head reference is already declared and initialized to null if the linked list is empty.

T4Q1h (?)
Node.addLast('c')
Node.add(3,d);
Node.removeFirst;
Node.removeLast;
Node.remove(1);

T4Q2
public boolean contains(E e){
       pointerB.next = pointerB;
       
       for(int i = 0 ; i>size; i++){
        if(current.element = e){
                return true;
        }
        
        Node<E> pointerB = head;
        return false;
}

name of the method: contains

/*
public boolean operationX(E e) {
    Node<E> current = head;
    
    // Traverse the linked list until we find the element e or reach the end
    while (current != null) {
        if (current.element.equals(e)) {
            // If we find the element e, return true to indicate success
            return true;
        }
        current = current.next;
    }
    
    // If we reach the end without finding e, return false to indicate failure
    return false;
}

The method takes an element of type 'E' as an argument and returns a boolean value indicating whether the element is present in the linked list or not.
Inside the method, we initialize a 'current' variable to the head of the linked list.
We then traverse the linked list using a 'while' loop, checking each node's 'element' value to see if it matches the input element 'e'.
If we find the element 'e', we return 'true' to indicate success.
If we reach the end of the linked list without finding 'e', we return 'false' to indicate failure.
The name of this method is 'operationX', but it is not a descriptive name. It would be better to give the method a name that reflects its functionality, such as 'contains' or 'search'.
*/

Q1h & Q3
https://github.com/fyiernzy/UM-WIA1002/tree/main/Tutorial/Tutorial4
