1. //Revise

2. 
Will the following class compile? If not, why?
public final class Algorithm {
    public static <T> T max(T x, T y) {
        return x > y ? x : y;
    }
}
Answer: No. The greater than (>) operator applies only to primitive numeric types

3. //good

4.
If the compiler erases all type parameters at compile time, why should you use generics?

Answer: You should use generics because:
The Java compiler enforces tighter type checks on generic code at compile time.
Generics support programming types as parameters.
Generics enable you to implement generic algorithms.

5. //remove <K,V> from classname, all <> change to Object
What is the following class converted to after type erasure?
public class Pair<K, V> {

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey(); { return key; }
    public V getValue(); { return value; }

    public void setKey(K key)     { this.key = key; }
    public void setValue(V value) { this.value = value; }

    private K key;
    private V value;
}
Answer:
public class Pair {

    public Pair(Object key, Object value) {
        this.key = key;
        this.value = value;
    }

    public Object getKey()   { return key; }
    public Object getValue() { return value; }

    public void setKey(Object key)     { this.key = key; }
    public void setValue(Object value) { this.value = value; }

    private Object key;
    private Object value;
}

6.
What is the following method converted to after type erasure?
public static <T extends Comparable<T>>
    int findFirstGreaterThan(T[] at, T elem) {
    // ...
}
Answer:
public static int findFirstGreaterThan(Comparable[] at, Comparable elem) {
    // ...
    }
    
7.
Will the following method compile? If not, why?
public static void print(List<? extends Number> list) {
    for (Number n : list)
        System.out.print(n + " ");
    System.out.println();
}
Answer: Yes.

9.
Will the following class compile? If not, why?
public class Singleton<T> {

    public static T getInstance() {
        if (instance == null)
            instance = new Singleton<T>();

        return instance;
    }

    private static T instance = null;
}
Answer: No. You cannot create a static field of the type parameter T.

10.
Given the following classes:
class Shape { /* ... */ }
class Circle extends Shape { /* ... */ }
class Rectangle extends Shape { /* ... */ }

class Node<T> { /* ... */ }
Will the following code compile? If not, why?
Node<Circle> nc = new Node<>();
Node<Shape>  ns = nc;
Answer: No. Because Node<Circle> is not a subtype of Node<Shape>. //Circle is a subtype of Shape

In Java, a subtype is a class or interface that is derived from another class or interface, also known as the superclass or superinterface, respectively. A subtype inherits the properties (fields and methods) of its superclass or superinterface, and can also override or add additional properties.

In the given example, `Circle` and `Rectangle` are subtypes of `Shape`, as they inherit from the `Shape` class. Similarly, `Node<T>` is a generic class, and `Node<Circle>` and `Node<Shape>` are both possible instantiations of the generic class `Node<T>`, where `T` can be replaced with any type. However, `Node<Circle>` is not a subtype of `Node<Shape>`, even though `Circle` is a subtype of `Shape`.

This is because generic types in Java are not covariant, which means that `Node<Circle>` is not considered a subtype of `Node<Shape>`, even though `Circle` is a subtype of `Shape`. This is to ensure type safety, as allowing such assignment could lead to potential type mismatches at runtime.

To define a subtype, you need to create a class or interface that extends or implements another class or interface, respectively. The concept of subtyping is inherent to the Java programming language and is not something that needs to be predefined or explicitly defined in the system. Subtyping is a fundamental principle of object-oriented programming, where classes can inherit from other classes and create a hierarchy of related types.

### A implements/extends B, A is a subtype of B BUT Class<A> is not a subtype of Class<B>

11.
Consider this class:
class Node<T> implements Comparable<T> {
    public int compareTo(T obj) { /* ... */ }
    // ...
}
Will the following code compile? If not, why?
Node<String> node = new Node<>();
Comparable<String> comp = node;
Answer: Yes.

12. //Revise
