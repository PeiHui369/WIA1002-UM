 @ Must have <E> for all method 
 public static <E> void listAll(E[] list)
 
 @ 
 public class A{
  psvm{
    A.B(para);            //Static method associated with class itself, so need className.methodName(para) if diff class, same class no need
    }
  public static <E> void B(E[] list){}
}

@
private InstanceVariable;

@ When accept 2 parameter with type Object and type String

@ To retrieve arrayList
listName.get(indexNo)
 
@ Invoke method
SAME CLASS STATIC
methodName(para)

DIFF CLASS STATIC
methodClass.methodName(para)

SAME CLASS NOT STATIC
displayWild a = new displayWild();
        a.listAll(numOfCars);

DIFF CLASS NOT STATIC
displayWild a = new displayWild();
a.listAll(para)


==========================================
Lab

Q3
public class StorePairGeneric<T extends Comparable<T>> implements Comparable<StorePairGeneric<T>>{}

//b) Override the Object equals() method in the StorePair class
public boolean equals (Object o){
        StorePairGeneric<T> other = (StorePairGeneric<T>) o;
        return this.first.equals(other.first);
    }

//c) Have the StorePair class implement the Comparable interface. 
//c) Override the compareTo()method to compare the first values
@Override
    public int compareTo(StorePairGeneric<T> o) {
        return this.first.compareTo(o.first);
    }
    
- Test program can create in the same class as methods above with psvm

Q4
public class comparison{
 public static <T extends Comparable<T>> String minmax(T[] arr){}
 psvm
}

Q5
 static class Circle implements Comparable<Circle> {
        //Circle not generic class, so not Circle<T>
        //Circle class uses Comparable interface: implements Comparable<Circle> [Type is Circle, as we want to compare Circle]
        
 - don't declare final if unsure
 
 @Override
        public int compareTo(Circle o) {
            if(radius < o.radius){return -1;}
            else if (radius == o.radius) {return 0;}
            else{return 1;}
        }
