Implementation of a generic Queue using an array (ArrayQueue<E>):

public class ArrayQueue<E> {
    private static final int DEFAULT_CAPACITY = 10;
    private E[] elements;
    private int front;
    private int rear;
    private int size;

    public ArrayQueue() {
        this(DEFAULT_CAPACITY);
    }

    public ArrayQueue(int initialCapacity) {
        elements = (E[]) new Object[initialCapacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    public void enqueue(E e) {
        if (size == elements.length) {
            resize();
        }
        rear = (rear + 1) % elements.length;
        elements[rear] = e;
        size++;
    }

    public E dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty.");
        }
        E dequeuedElement = elements[front];
        elements[front] = null;
        front = (front + 1) % elements.length;
        size--;
        return dequeuedElement;
    }

    public E getElement() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty.");
        }
        return elements[front];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public int size() {
        return size;
    }

    private void resize() {
        int newCapacity = elements.length * 2;
        E[] newElements = (E[]) new Object[newCapacity];
        for (int i = 0; i < size; i++) {
            newElements[i] = elements[(front + i) % elements.length];
        }
        elements = newElements;
        front = 0;
        rear = size - 1;
    }
}
